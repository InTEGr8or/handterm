[{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/e2e/example.spec.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/playwright.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/scripts/clearLocalStorage.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/scripts/clearLocalStorage.js` using `parserOptions.project`: \n- <tsconfigRootDir>/tsconfig.json\n- <tsconfigRootDir>/tsconfig.test.json\n- <tsconfigRootDir>/tsconfig.node.json\nHowever, none of those TSConfigs include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change one of those TSConfigs to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/troubleshooting/typed-linting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"console.log(\"Clearing Storage\");","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/App.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":16,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":16,"column":16,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":16,"endColumn":28},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createRef`. Check if you meant to write `import {createRef} from 'react'` instead.","line":17,"column":24,"nodeType":"MemberExpression","endLine":17,"endColumn":39},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_containerWidth` must not have a leading underscore.","line":18,"column":10,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":18,"endColumn":25},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":18,"column":48,"nodeType":"MemberExpression","endLine":18,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":49,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":49,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1761,1789],"text":"(handexTermWrapperRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useCallback } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { HandTermWrapper, type IHandTermWrapperMethods } from './components/HandTermWrapper';\nimport { Output } from './components/Output';\nimport { ActivityMediatorProvider } from './contexts/ActivityMediatorContext';\nimport { AppProvider } from './contexts/AppContext';\nimport { CommandProvider } from './contexts/CommandProvider';\nimport { useAuth } from './hooks/useAuth';\nimport { bypassTutorialSignal } from './signals/appSignals';\nimport { TerminalCssClasses } from './types/TerminalTypes';\nimport { ActivityType } from './types/Types';\nimport { parseLocation } from './utils/navigationUtils';\n\nexport default function App() {\n  const containerRef = React.createRef<HTMLDivElement>();\n  const [_containerWidth, setContainerWidth] = React.useState<number>(0);\n\n  const auth = useAuth();\n  const handexTermWrapperRef = useRef<IHandTermWrapperMethods>(null);\n  const isBypassActive = useComputed(() => bypassTutorialSignal.value);\n\n  const getContainerWidth = useCallback(() => {\n    return containerRef.current?.clientWidth ?? 0\n  }, [containerRef]);\n\n  useEffect(() => {\n    const handleResize = () => {\n      const w = getContainerWidth();\n      setContainerWidth(w);\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [getContainerWidth]);\n\n  const handleOutputUpdate = () => {\n    // Placeholder for future implementation\n  };\n\n  useEffect(() => {\n    const w = getContainerWidth();\n    setContainerWidth(w);\n\n    const handleClickOutsideTerminal = (event: UIEvent) => {\n      // Check if the click is outside of the terminal area\n      if (\n        handexTermWrapperRef.current &&\n        (event.target as HTMLElement).id !== TerminalCssClasses.Terminal\n      ) {\n        event.stopPropagation();\n        handexTermWrapperRef.current.focusTerminal();\n\n        if (event instanceof MouseEvent || (event instanceof TouchEvent && event.touches.length === 1)) {\n          setTimeout(() => {\n            handexTermWrapperRef.current?.focusTerminal();\n          }, 1000);\n        }\n      }\n    };\n\n    // Attach the event listener to the document body\n    document.body.addEventListener('click', handleClickOutsideTerminal);\n    document.body.addEventListener('touchstart', handleClickOutsideTerminal);\n\n    // Clean up the event listener\n    return () => {\n      document.body.removeEventListener('click', handleClickOutsideTerminal);\n      document.body.removeEventListener('touchstart', handleClickOutsideTerminal);\n    };\n  }, [getContainerWidth, handexTermWrapperRef]);\n\n  return (\n    <ActivityMediatorProvider>\n      <div className='app' ref={containerRef}>\n        <AppProvider>\n          <CommandProvider\n            auth={auth}\n            handTermRef={handexTermWrapperRef}\n          >\n            {parseLocation().activityKey !== ActivityType.EDIT\n              && <Output />\n            }\n            {isBypassActive.value && (\n              <div style={{ position: 'fixed', top: 0, right: 0, color: 'black', background: '#222', padding: '5px' }}>\n                Bypass Mode Active\n              </div>\n            )}\n            <HandTermWrapper\n              ref={handexTermWrapperRef}\n              auth={auth}\n              terminalWidth={_containerWidth}\n              onOutputUpdate={handleOutputUpdate}\n            />\n          </CommandProvider>\n        </AppProvider>\n      </div>\n    </ActivityMediatorProvider>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/Persistence.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/@octokit/app.ts","messages":[{"ruleId":"@typescript-eslint/no-extraneous-class","severity":2,"message":"Unexpected class with only a constructor.","line":3,"column":14,"nodeType":"Identifier","messageId":"onlyConstructor","endLine":3,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\n\nexport class App {\n  constructor() {\n    return {\n      getInstallationOctokit: vi.fn().mockResolvedValue({\n        auth: vi.fn().mockResolvedValue({\n          type: 'token',\n          tokenType: 'installation',\n          token: 'test-token',\n          expiresAt: new Date(Date.now() + 3600000).toISOString()\n        }),\n        rest: {\n          apps: {\n            getUserInstallation: vi.fn().mockResolvedValue({\n              data: {\n                id: 12345,\n                account: {\n                  login: 'testuser'\n                }\n              }\n            })\n          }\n        }\n      })\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/@octokit/core.ts","messages":[{"ruleId":"@typescript-eslint/no-extraneous-class","severity":2,"message":"Unexpected class with only a constructor.","line":3,"column":14,"nodeType":"Identifier","messageId":"onlyConstructor","endLine":3,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\n\nexport class Octokit {\n  constructor() {\n    return {\n      request: vi.fn(),\n      graphql: vi.fn(),\n      auth: vi.fn().mockResolvedValue({\n        type: 'token',\n        tokenType: 'installation',\n        token: 'test-token',\n        expiresAt: new Date(Date.now() + 3600000).toISOString()\n      })\n    };\n  }\n}\n\nexport interface OctokitOptions {\n  auth?: string;\n  baseUrl?: string;\n  userAgent?: string;\n}\n\nexport interface RequestParameters {\n  method?: string;\n  url?: string;\n  headers?: Record<string, string>;\n  body?: Record<string, unknown>;\n}\n\nexport interface GraphQLResponse<T = Record<string, unknown>> {\n  data: T;\n}\n\nexport interface RequestError extends Error {\n  status: number;\n  response: {\n    data: Record<string, unknown>;\n    status: number;\n    headers: Record<string, string>;\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/@octokit/rest.ts","messages":[{"ruleId":"@typescript-eslint/no-extraneous-class","severity":2,"message":"Unexpected class with only a constructor.","line":3,"column":14,"nodeType":"Identifier","messageId":"onlyConstructor","endLine":3,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `full_name` must match one of the following formats: camelCase, UPPER_CASE","line":14,"column":17,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":14,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `html_url` must match one of the following formats: camelCase, UPPER_CASE","line":16,"column":17,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":16,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `updated_at` must match one of the following formats: camelCase, UPPER_CASE","line":17,"column":17,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":17,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `trees_url` must match one of the following formats: camelCase, UPPER_CASE","line":19,"column":17,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":26}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\n\nexport class Octokit {\n  constructor() {\n    return {\n      rest: {\n        repos: {\n          listForAuthenticatedUser: vi.fn().mockResolvedValue({\n            data: [\n              {\n                id: 1,\n                name: 'test-repo',\n                owner: { login: 'testuser' },\n                full_name: 'testuser/test-repo',\n                description: 'A test repository',\n                html_url: 'https://github.com/testuser/test-repo',\n                updated_at: '2023-01-01T00:00:00Z',\n                url: 'https://api.github.com/repos/testuser/test-repo',\n                trees_url: 'https://api.github.com/repos/testuser/test-repo/git/trees{/sha}'\n              }\n            ]\n          })\n        },\n        git: {\n          getTree: vi.fn().mockResolvedValue({\n            data: {\n              tree: [\n                {\n                  path: 'README.md',\n                  type: 'blob',\n                  sha: 'abcd1234'\n                },\n                {\n                  path: 'src',\n                  type: 'tree',\n                  sha: 'efgh5678'\n                }\n              ]\n            }\n          }),\n          getBlob: vi.fn().mockResolvedValue({\n            data: {\n              content: Buffer.from('Hello, World!').toString('base64'),\n              encoding: 'base64',\n              sha: 'abcd1234',\n              size: 13\n            }\n          })\n        }\n      },\n      auth: vi.fn().mockResolvedValue({\n        type: 'token',\n        tokenType: 'installation',\n        token: 'test-token',\n        expiresAt: new Date(Date.now() + 3600000).toISOString()\n      })\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/@preact/signals-react.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":2,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":2,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":8,"column":42,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":8,"endColumn":44},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":20,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":47},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":24,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":41}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Mock implementation of signals\nexport const signal = <T>(initialValue: T) => ({\n  value: initialValue,\n  subscribe: jest.fn(),\n  peek: () => initialValue\n});\n\nexport const computed = <T>(fn: () => T) => ({\n  value: fn(),\n  subscribe: jest.fn(),\n  peek: fn\n});\n\nexport const useSignal = <T>(initialValue: T) => ({\n  value: initialValue,\n  subscribe: jest.fn(),\n  peek: () => initialValue\n});\n\nexport const useComputed = <T>(fn: () => T) => fn();\n\nexport const effect = jest.fn();\n\nexport const batch = (fn: () => void) => fn();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/canvasMock.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/signals/appSignals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/signals/commandLineSignals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__mocks__/signals/tutorialSignals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__tests__/activitySwitching.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__tests__/basic.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__tests__/hooks/useActivityMediator.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/__tests__/useActivityMediator.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/allChords.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/BypassCommand.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":12,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_context` must not have a leading underscore.","line":13,"column":5,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":13,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":14,"column":5,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":14,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/commands/BypassCommand.ts\n\nimport { activitySignal , setBypassTutorial, bypassTutorialSignal } from 'src/signals/appSignals';\n\nimport { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { type ParsedCommand , ActivityType } from '../types/Types';\nimport { navigate } from '../utils/navigationUtils';\n\nexport const BypassCommand: ICommand = {\n  name: 'bypass',\n  description: 'Toggle tutorial bypass mode for testing',\n  execute: async (\n    _context: ICommandContext,\n    _parsedCommand: ParsedCommand\n  ): Promise<ICommandResponse> => {\n    const newBypassState = !bypassTutorialSignal.value;\n    setBypassTutorial(newBypassState);\n\n    if(newBypassState){\n      // Set activity route to normal\n      activitySignal.value = ActivityType.NORMAL;\n      navigate({\n        activityKey: ActivityType.NORMAL,\n        contentKey: null,\n        groupKey: null\n      });\n    }\n\n    return {\n      status: 200,\n      message: `Bypass mode ${newBypassState ? 'enabled' : 'disabled'}. ${newBypassState ? 'You are now in NORMAL mode.' : 'Tutorial mode will resume on next page load.'}`,\n    };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/GitHubCommand.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":46,"column":59,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":46,"endColumn":82,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1815,1839],"text":"(deviceCodeResponse.data == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":49,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1964,1988],"text":"(deviceCodeResponse.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1964,1988],"text":"(deviceCodeResponse.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1964,1988],"text":"(Boolean(deviceCodeResponse.error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `verification_uri` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","line":53,"column":25,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":53,"endColumn":41},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `user_code` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","line":53,"column":43,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":53,"endColumn":52},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `device_code` must match one of the following formats: camelCase, PascalCase, UPPER_CASE","line":53,"column":54,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":53,"endColumn":65},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":81,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3371,3389],"text":"(pollResponse.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3371,3389],"text":"(pollResponse.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3371,3389],"text":"(Boolean(pollResponse.error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":85,"column":33,"nodeType":"BinaryExpression","messageId":"conditionErrorNumber","endLine":85,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[3514,3529],"text":"((interval * 1000) !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[3514,3529],"text":"(!Number.isNaN((interval * 1000)))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3514,3529],"text":"(Boolean((interval * 1000)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":111,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":111,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4551,4565],"text":"(response.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4551,4565],"text":"(response.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4551,4565],"text":"(Boolean(response.error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":118,"column":48,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":118,"endColumn":61,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4805,4818],"text":"(response.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":120,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":120,"endColumn":58,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4926,4942],"text":"(repo.description != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4926,4942],"text":"(repo.description ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4926,4942],"text":"(Boolean(repo.description))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":133,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":133,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5401,5415],"text":"(response.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5401,5415],"text":"(response.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5401,5415],"text":"(Boolean(response.error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":139,"column":22,"nodeType":"Identifier","messageId":"conditionErrorOther","endLine":139,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":146,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":146,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5931,5952],"text":"(parsedCommand.args[1] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5931,5952],"text":"(parsedCommand.args[1] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5931,5952],"text":"(Boolean(parsedCommand.args[1]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":147,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":147,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5988,6009],"text":"(parsedCommand.args[2] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5988,6009],"text":"(parsedCommand.args[2] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5988,6009],"text":"(Boolean(parsedCommand.args[2]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":153,"column":48,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":153,"endColumn":61,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6274,6287],"text":"(response.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":176,"column":30,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":176,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7220,7234],"text":"(response.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7220,7234],"text":"(response.error ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7220,7234],"text":"(Boolean(response.error))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { type ParsedCommand, ActivityType } from '../types/Types';\nimport { getRepoTree, listRecentRepos, unlinkGitHub, getGitHubDeviceCode, pollGitHubDeviceAuth } from '../utils/apiClient';\nimport { createLogger } from '../utils/Logger';\n\nconst logger = createLogger();\n\nconst POLL_INTERVAL = 5000; // 5 seconds\nconst MAX_POLL_TIME = 300000; // 5 minutes\n\nasync function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport const GitHubCommand: ICommand = {\n    name: 'github',\n    description: 'GitHub account and repository management',\n    switches: {\n        'h': 'Show help for GitHub command',\n        'l': 'Link GitHub account',\n        'u': 'Unlink GitHub account',\n        'r': 'List recent repositories',\n        't': 'Get repository tree (Usage: -t owner/repo [path] [sha])'\n    },\n    execute: async (\n        context: ICommandContext,\n        parsedCommand: ParsedCommand\n    ): Promise<ICommandResponse> => {\n        // Show help if requested\n        if ('h' in parsedCommand.switches) {\n            return {\n                status: 200,\n                message: `GitHub Command Usage:\n                github -l : Link your GitHub account\n                github -u : Unlink GitHub account\n                github -r : List recent repositories\n                github -t owner/repo [path] [sha] : Get repository tree\n                github -h : Show this help message`\n            };\n        }\n\n        try {\n            if ('l' in parsedCommand.switches) {\n                // Get device code from GitHub\n                const deviceCodeResponse = await getGitHubDeviceCode(context.auth);\n                if (deviceCodeResponse.status !== 200 || !deviceCodeResponse.data) {\n                    return {\n                        status: deviceCodeResponse.status,\n                        message: deviceCodeResponse.error || 'Failed to get device code'\n                    };\n                }\n\n                const { verification_uri, user_code, device_code, interval } = deviceCodeResponse.data;\n\n                // Copy code to clipboard\n                await navigator.clipboard.writeText(user_code);\n\n                // Open browser to verification URL\n                window.open(verification_uri, '_blank');\n\n                // Log authentication steps\n                logger.info(`Opening browser for GitHub authentication...`);\n                logger.info(`Device code copied to clipboard!`, user_code);\n                logger.info(`Waiting for authentication...`);\n\n                // Poll for completion\n                const startTime = Date.now();\n                while (Date.now() - startTime < MAX_POLL_TIME) {\n                    const pollResponse = await pollGitHubDeviceAuth(context.auth, device_code);\n\n                    if (pollResponse.status === 200 && pollResponse.data?.status === 'complete') {\n                        return {\n                            status: 200,\n                            message: 'Successfully linked GitHub account!'\n                        };\n                    }\n\n                    if (pollResponse.status !== 202) {\n                        return {\n                            status: pollResponse.status,\n                            message: pollResponse.error || 'Failed to check authorization status'\n                        };\n                    }\n\n                    await sleep(interval * 1000 || POLL_INTERVAL);\n                }\n\n                return {\n                    status: 408,\n                    message: 'Authentication timed out. Please try again.'\n                };\n            }\n\n            if ('u' in parsedCommand.switches) {\n                const response = await unlinkGitHub(context.auth);\n                if (response.status === 200) {\n                    // Clear GitHub-related items from localStorage\n                    localStorage.removeItem('githubUsername');\n                    localStorage.removeItem('current_github_repo');\n                    localStorage.removeItem('github_tree_items');\n                    sessionStorage.removeItem('github_auth_state');\n\n                    return {\n                        status: 200,\n                        message: 'GitHub account unlinked. Use \"github -l\" to link again with new permissions.'\n                    };\n                }\n\n                return {\n                    status: response.status,\n                    message: response.error || 'Failed to unlink GitHub account.'\n                };\n            }\n\n            if ('r' in parsedCommand.switches) {\n                const response = await listRecentRepos(context.auth);\n\n                if (response.status === 200 && response.data) {\n                    const repoList = response.data.map(repo =>\n                        `${repo.name}: ${repo.description || 'No description'}`\n                    ).join('<br />');\n\n                    return {\n                        status: 200,\n                        message: response.data.length > 0\n                            ? `Recent Repositories:<br />${repoList}`\n                            : 'No recent repositories found.'\n                    };\n                }\n\n                return {\n                    status: response.status,\n                    message: response.error || 'Failed to retrieve repositories.'\n                };\n            }\n\n            if ('t' in parsedCommand.switches) {\n                const repoArg = parsedCommand.switches.t === true ? parsedCommand.args[0] : parsedCommand.switches.t;\n                if (!repoArg) {\n                    return {\n                        status: 400,\n                        message: 'Repository parameter required. Usage: github -t owner/repo [path] [sha]'\n                    };\n                }\n\n                const path = parsedCommand.args[1] || '';\n                const sha = parsedCommand.args[2] || '';\n\n                logger.info('Fetching tree for repo:', repoArg);\n                const response = await getRepoTree(context.auth, repoArg, path, sha);\n                logger.info('Tree response:', response);\n\n                if (response.status === 200 && response.data) {\n                    // Store current repository for file fetching\n                    localStorage.setItem('current_github_repo', repoArg);\n\n                    // Store tree items in localStorage\n                    localStorage.setItem('github_tree_items', JSON.stringify(response.data));\n\n                    // Switch to tree view mode\n                    logger.info('Switching to TREE mode');\n                    context.updateLocation({\n                        activityKey: ActivityType.TREE,\n                        contentKey: null,\n                        groupKey: null\n                    });\n\n                    return {\n                        status: 200,\n                        message: 'Repository tree loaded. Use j/k to navigate, Enter to select a file, e to close.'\n                    };\n                }\n\n                return {\n                    status: response.status,\n                    message: response.error || 'Failed to retrieve repository tree.'\n                };\n            }\n\n            return {\n                status: 400,\n                message: 'Invalid command. Use -h to show command help info',\n            };\n        } catch (error) {\n            logger.error('GitHub command error:', error);\n            return {\n                status: 501,\n                message: 'Failed to process GitHub command',\n            };\n        }\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/HelpCommand.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ReactDOMServer` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":22},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":10,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":10,"endColumn":18},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `ReactDOMServer` also has a named export `renderToStaticMarkup`. Check if you meant to write `import {renderToStaticMarkup} from 'react-dom/server'` instead.","line":30,"column":16,"nodeType":"MemberExpression","endLine":30,"endColumn":51}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import ReactDOMServer from 'react-dom/server';\n\nimport { Chord } from '../components/Chord';\nimport { type ICommand, type ICommandResponse , type ICommandContext } from '../contexts/CommandContext';\nimport { type ParsedCommand } from '../types/Types';\n\nexport const HelpCommand: ICommand = {\n  name: 'help',\n  description: 'Display help information',\n  execute: async (\n    context: ICommandContext,\n    parsedCommand: ParsedCommand,\n  ): Promise<ICommandResponse> => {\n    if (\n      parsedCommand.command === 'help'\n      || parsedCommand.command === '411'\n    ) {\n      const commandChords = [\n        'DELETE (Backspace)',\n        'Return (ENTER)',\n        'UpArrow',\n        'LeftArrow',\n        'DownArrow',\n        'RightArrow',\n        'ESCAPE',\n      ].map(c => {\n        return <Chord key={c} displayChar={c} />;\n      });\n      const commandChordsHtml = commandChords.map(element => {\n        return ReactDOMServer.renderToStaticMarkup(element);\n      }).join('');\n      const response = \"<div class='chord-display-container'>\" + commandChordsHtml + \"</div>\";\n      return { status: 200, message: response };\n    }\n    return { status: 404, message: \"Help command not recognized\" };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/ListPhrasesCommand.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":12,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":14,"column":5,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":14,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":16,"column":10,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":16,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { Phrases, type GamePhrase, type ParsedCommand } from '../types/Types';\n\nexport const ListPhrasesCommand: ICommand = {\n  name: 'ls',\n  description: 'List files',\n  switches: {\n    'all': 'List all phrases',\n    'random': 'List a random phrase',\n    'easy': 'List only easy phrases',\n  },\n  execute: async (\n    context: ICommandContext,\n    _parsedCommand: ParsedCommand\n  ): Promise<ICommandResponse> => {\n    if (!context) {\n      return { status: 404, message: 'No command context available.' };\n    }\n\n    const phrases: string = Phrases\n      .map((phrase: GamePhrase) => phrase.key)\n      .join('\\n');\n\n    return {\n      status: 200,\n      message: phrases\n    };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/LoginCommand.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/SignUpCommand.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":12,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":12,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/commands/SignUpCommand.ts\nimport { tempUserNameSignal, setTempEmail, tempEmailSignal, setTempUserName, tempPasswordSignal, isInSignUpProcessSignal, setIsInSignUpProcess } from 'src/signals/appSignals';\n\nimport { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { type ParsedCommand } from '../types/Types';\n\nexport const SignUpCommand: ICommand = {\n    name: 'signup',\n    description: 'Create a new account',\n    execute: async (\n        context: ICommandContext, \n        _parsedCommand: ParsedCommand\n    ): Promise<ICommandResponse> => {\n        const { auth } = context;\n\n        if (_parsedCommand.args.length === 2) {\n            // Start signup process\n            setIsInSignUpProcess(true);\n            setTempUserName(_parsedCommand.args[0]);\n            setTempEmail(_parsedCommand.args[1])\n            return { status: 200, message: 'Enter password:' };\n        } else if (_parsedCommand.args.length === 3 && isInSignUpProcessSignal.value) {\n            // Complete signup process\n            const username = tempUserNameSignal.value;\n            const password = tempPasswordSignal.value;\n            const email = tempEmailSignal.value;\n            \n            try {\n                const result = await auth.signup({ username, password, email });\n                setIsInSignUpProcess(false);\n                \n                if (result.status === 200) {\n                    return {\n                        status: 200,\n                        message: 'Account created successfully! Please check your email for verification.'\n                    };\n                } else {\n                    return {\n                        status: result.status,\n                        message: `Signup failed: ${result.message}`\n                    };\n                }\n            } catch (error) {\n                setIsInSignUpProcess(false);\n                return {\n                    status: 500,\n                    message: `Signup error: ${error instanceof Error ? error.message : 'Unknown error'}`\n                };\n            }\n        } else {\n            return { status: 400, message: 'Usage: signup <username> <email>' };\n        }\n    }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/SpecialCommand.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ReactDOMServer` must match one of the following formats: camelCase","line":3,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":3,"endColumn":22},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":12,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_context` must not have a leading underscore.","line":13,"column":5,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":13,"endColumn":30},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":14,"column":5,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":14,"endColumn":34},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `ReactDOMServer` also has a named export `renderToStaticMarkup`. Check if you meant to write `import {renderToStaticMarkup} from 'react-dom/server'` instead.","line":21,"column":7,"nodeType":"MemberExpression","endLine":21,"endColumn":42}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport ReactDOMServer from 'react-dom/server';\n\nimport { Chord } from '../components/Chord';\nimport { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { type ParsedCommand } from '../types/Types';\n\nexport const SpecialCommand: ICommand = {\n  name: 'special',\n  description: 'Display special characters',\n  execute: async (\n    _context: ICommandContext,\n    _parsedCommand: ParsedCommand,\n  ): Promise<ICommandResponse> => {\n    const specialChars = ['~', '`', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '[', '}', ']', '|', '\\\\', ':', ';', '\"', \"'\", '<', '>', ',', '.', '?', '/'];\n    const chordElements = specialChars.map(char => (\n      <Chord key={char} displayChar={char} />\n    ));\n    const chordsHtml = chordElements.map(element =>\n      ReactDOMServer.renderToStaticMarkup(element)\n    ).join('');\n\n    return {\n      status: 200,\n      message: `<div class='chord-display-container'>${chordsHtml}</div>`\n    };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/__tests__/LoginCommand.test.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `AccessToken` must match one of the following formats: camelCase, UPPER_CASE","line":94,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":94,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `RefreshToken` must match one of the following formats: camelCase, UPPER_CASE","line":95,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":95,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `IdToken` must match one of the following formats: camelCase, UPPER_CASE","line":96,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":96,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `ExpiresIn` must match one of the following formats: camelCase, UPPER_CASE","line":97,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":97,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, type MockedFunction } from 'vitest';\n\nimport * as appSignals from 'src/signals/appSignals';\nimport {\n  type ICommandContext,\n  type ICommandResponse,\n  type ParsedCommand,\n  type IAuthProps,\n  type IHandTermWrapperMethods,\n  type MyResponse,\n  type AuthResponse\n} from 'src/types/HandTerm';\n\nimport { LoginCommand } from '../LoginCommand';\n\n// Type-safe mock of signals\ninterface SignalMock { value: boolean }\ntype SetSignalFn = (value: boolean) => void;\n\n// Mock the signals\nvi.mock('src/signals/appSignals', () => ({\n  isInLoginProcessSignal: { value: false } as SignalMock,\n  setIsInLoginProcess: vi.fn() as unknown as SetSignalFn,\n  setTempUserName: vi.fn(),\n  tempUserNameSignal: { value: '' } as { value: string }\n}));\n\ndescribe('LoginCommand', () => {\n  // Create a more complete mock of ICommandContext\n  const createMockContext = (overrides: Partial<ICommandContext> = {}): ICommandContext => ({\n    executeCommand: vi.fn(),\n    commandHistory: [],\n    addToCommandHistory: vi.fn(),\n    output: [],\n    appendToOutput: vi.fn(),\n    handTermRef: {\n      current: {\n        writeOutput: vi.fn(),\n        prompt: vi.fn(),\n        saveCommandResponseHistory: vi.fn(),\n        focusTerminal: vi.fn(),\n        handleCharacter: vi.fn(),\n        refreshComponent: vi.fn(),\n        setHeroSummersaultAction: vi.fn(),\n        setEditMode: vi.fn(),\n        handleEditSave: vi.fn()\n      } as IHandTermWrapperMethods\n    },\n    auth: {\n      login: vi.fn(),\n      signup: vi.fn(),\n      verify: vi.fn(),\n      refreshToken: vi.fn(),\n      validateAndRefreshToken: vi.fn(),\n      isLoggedIn: false,\n      isLoading: false,\n      isError: false,\n      error: null,\n      isPending: false\n    } as IAuthProps,\n    updateLocation: vi.fn(),\n    ...overrides\n  });\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    // Reset signal values with type-safe approach\n    (appSignals.isInLoginProcessSignal as SignalMock).value = false;\n  });\n\n  it('should initiate login process with username', async () => {\n    const mockContext = createMockContext();\n    const parsedCommand: ParsedCommand = {\n      command: 'login',\n      args: ['testuser'],\n      switches: {}\n    };\n\n    const response: ICommandResponse = await LoginCommand.execute(mockContext, parsedCommand);\n\n    expect(appSignals.setIsInLoginProcess).toHaveBeenCalledWith(true);\n    expect(appSignals.setTempUserName).toHaveBeenCalledWith('testuser');\n    expect(response.status).toBe(200);\n    expect(response.message).toBe('Enter password:');\n  });\n\n  it('should complete login process successfully', async () => {\n    const mockContext = createMockContext();\n    // Type-safe mock of login method with full MyResponse structure\n    const mockLogin = mockContext.auth.login as MockedFunction<typeof mockContext.auth.login>;\n    const successResponse: MyResponse<AuthResponse> = {\n      status: 200,\n      data: {\n        AccessToken: 'mock-access-token',\n        RefreshToken: 'mock-refresh-token',\n        IdToken: 'mock-id-token',\n        ExpiresIn: '3600'\n      },\n      message: 'Login successful',\n      error: []\n    };\n    mockLogin.mockResolvedValue(successResponse);\n\n    // Simulate being in login process\n    (appSignals.isInLoginProcessSignal as SignalMock).value = true;\n\n    const parsedCommand: ParsedCommand = {\n      command: 'login',\n      args: ['testuser', 'password123'],\n      switches: {}\n    };\n\n    const response: ICommandResponse = await LoginCommand.execute(mockContext, parsedCommand);\n\n    expect(mockLogin).toHaveBeenCalledWith('testuser', 'password123');\n    expect(appSignals.setIsInLoginProcess).toHaveBeenCalledWith(false);\n    expect(response.status).toBe(200);\n    expect(response.message).toBe('Login successful!');\n    expect(response.sensitive).toBe(true);\n  });\n\n  it('should handle login failure', async () => {\n    const mockContext = createMockContext();\n    // Type-safe mock of login method with error response\n    const mockLogin = mockContext.auth.login as MockedFunction<typeof mockContext.auth.login>;\n    const errorResponse: MyResponse<AuthResponse> = {\n      status: 401,\n      message: 'Login error: An unknown error occurred',\n      error: ['Authentication failed'],\n      data: undefined\n    };\n    mockLogin.mockRejectedValue(errorResponse);\n\n    // Simulate being in login process\n    (appSignals.isInLoginProcessSignal as SignalMock).value = true;\n\n    const parsedCommand: ParsedCommand = {\n      command: 'login',\n      args: ['testuser', 'wrongpassword'],\n      switches: {}\n    };\n\n    const response: ICommandResponse = await LoginCommand.execute(mockContext, parsedCommand);\n\n    expect(mockLogin).toHaveBeenCalledWith('testuser', 'wrongpassword');\n    expect(appSignals.setIsInLoginProcess).toHaveBeenCalledWith(false);\n    expect(response.status).toBe(500);\n    expect(response.message).toBe('Login error: An unknown error occurred');\n    expect(response.sensitive).toBe(true);\n  });\n\n  it('should reject invalid command format', async () => {\n    const mockContext = createMockContext();\n    const parsedCommand: ParsedCommand = {\n      command: 'login',\n      args: [],\n      switches: {}\n    };\n\n    const response: ICommandResponse = await LoginCommand.execute(mockContext, parsedCommand);\n\n    expect(response.status).toBe(400);\n    expect(response.message).toBe('Usage: login <username>');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/archiveCommand.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":19,"column":1,"nodeType":"ExportNamedDeclaration","endLine":116,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":30,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":30,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1049,1053],"text":"key == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1050,1053],"text":"(key ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1049,1053],"text":"!Boolean(key)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":44,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":44,"endColumn":32,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1693,1700],"text":"content != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1693,1700],"text":"content ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1693,1700],"text":"Boolean(content)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_handTerm` must not have a leading underscore.","line":46,"column":35,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":46,"endColumn":61},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":46,"column":64,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":46,"endColumn":80},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":48,"column":34,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":48,"endColumn":63,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1869,1899],"text":"(_handTerm.current?.props.auth) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":100,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":103,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `_handTerm` must not have a leading underscore.","line":121,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":121,"endColumn":18}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { LogKeys } from '../types/TerminalTypes';\nimport { type ParsedCommand , type OutputElement } from '../types/Types';\n\ninterface HandTermProps {\n    auth: {\n        saveLog: (key: string, content: string, format: string) => Promise<boolean>;\n    };\n    prompt: () => void;\n}\n\ninterface HandTermCurrent {\n    current?: {\n        props: HandTermProps;\n        prompt: () => void;\n    } | null;\n}\n\nexport const archiveCommand: ICommand = {\n    name: 'archive',\n    description: 'Archive the current command history',\n    execute: async (\n        context: ICommandContext,\n        parsedCommand: ParsedCommand,\n    ): Promise<ICommandResponse> => {\n        const archiveNext = async (index: number): Promise<ICommandResponse> => {\n            if (index >= localStorage.length) return { status: 200, message: 'Command history archived.' }; // Stop if we've processed all items\n\n            const key = localStorage.key(index);\n            if (!key) {\n                await archiveNext(index + 1); // Skip and move to the next item\n                return {\n                    status: 500,\n                    message: 'Stopping archive due to localStorage key not found.'\n                };\n            }\n\n            if (key.startsWith(LogKeys.Command + '_') || key.startsWith(LogKeys.CharTime + '_')) {\n                if (key.includes('_archive_')) {\n                    localStorage.removeItem(key);\n                } else {\n                    const logKey = key.substring(0, key.indexOf('_'));\n                    const content = localStorage.getItem(key);\n                    if (content) {\n                        try {\n                            const _handTerm: HandTermCurrent = window._handTerm || { current: null };\n\n                            if (!_handTerm.current?.props.auth) {\n                                const outputElement: OutputElement = {\n                                    command: parsedCommand,\n                                    response: 'Authentication not available.',\n                                    status: 500,\n                                    commandTime: new Date()\n                                };\n                                context.appendToOutput(outputElement);\n                                return {\n                                    status: 500,\n                                    message: 'Authentication not available.'\n                                };\n                            }\n\n                            const result = await _handTerm.current.props.auth.saveLog(key, content, 'json');\n                            if (!result) {\n                                // If saveLog returns false, stop the archiving process\n                                const outputElement: OutputElement = {\n                                    command: parsedCommand,\n                                    response: 'Stopping archive due to saveLog returning false.',\n                                    status: 500,\n                                    commandTime: new Date()\n                                };\n                                context.appendToOutput(outputElement);\n                                return {\n                                    status: 500,\n                                    message: 'Stopping archive due to saveLog returning false.'\n                                };\n                            }\n                            localStorage.setItem(key.replace(logKey, logKey + '_archive'), content);\n                            localStorage.removeItem(key);\n                        } catch (e) {\n                            const errorMessage = e instanceof Error ? e.message : 'An unknown error occurred';\n                            const outputElement: OutputElement = {\n                                command: parsedCommand,\n                                response: `Archive error: ${errorMessage}`,\n                                status: 500,\n                                commandTime: new Date()\n                            };\n                            context.appendToOutput(outputElement);\n                            return {\n                                status: 500,\n                                message: `Archive error: ${errorMessage}`\n                            };\n                        }\n                    }\n                }\n            }\n\n            // Use setTimeout to avoid blocking the main thread\n            // and process the next item in the next event loop tick\n            return new Promise((resolve) => {\n                setTimeout(async () => {\n                    const result = await archiveNext(index + 1);\n                    resolve(result);\n                }, 300);\n            });\n        };\n\n        // Ensure _handTerm is defined in the global scope\n        if (typeof window._handTerm === 'undefined') {\n            window._handTerm = { current: null };\n        }\n\n        const result = await archiveNext(0); // Start processing from the first item\n        window._handTerm.current?.prompt();\n        return result;\n    },\n}\n\n// Extend the global Window interface to include _handTerm\ndeclare global {\n    interface Window {\n        _handTerm: HandTermCurrent;\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/cleanCommand.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":14,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":16,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":16,"endColumn":38},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":18,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":18,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":22,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":23,"endColumn":73},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":22,"column":32,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":23,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":43,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":87,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[829,873],"text":"(localStorage.getItem(LogKeys.CommandHistory) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[829,873],"text":"(localStorage.getItem(LogKeys.CommandHistory) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[829,873],"text":"(Boolean(localStorage.getItem(LogKeys.CommandHistory)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .filter on an `any` value.","line":23,"column":14,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .length on an `any` value.","line":25,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":25,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `any` value.","line":26,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":26,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":28,"column":17,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":28,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .splice on an `any` value.","line":28,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":28,"endColumn":38},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":30,"column":17,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":30,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [i] on an `any` value.","line":30,"column":46,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":30,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string[]`.","line":34,"column":28,"nodeType":"Identifier","messageId":"unsafeArgument","endLine":34,"endColumn":42}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// src/commands/cleanCommand.ts\nimport { type ParsedCommand } from 'src/types/Types';\n\nimport { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { LogKeys } from '../types/TerminalTypes';\nimport { saveCommandHistory } from '../utils/commandUtils';\n\n\nexport const cleanCommand: ICommand = {\n    name: 'clean',\n    description: 'clean the command history',\n    // Make sure the parameters match the ICommand execute definition\n    execute: async (\n        context: ICommandContext,\n        _parsedCommand: ParsedCommand\n    ): Promise<ICommandResponse> => {\n        if (!context) {\n            return { status: 404, message: 'No command context available.' };\n        }\n        // Logic to clean the command history from localStorage\n        const commandHistory = JSON.parse(localStorage.getItem(LogKeys.CommandHistory) || '[]')\n            .filter((ch: string) => { return ch !== 'Return (ENTER)'; })\n        let prevCommand = ''\n        for (let i = commandHistory.length - 1; i >= 0; i--) {\n            if (commandHistory[i] === prevCommand) {\n                // handTerm.writeOutput(prevCommand + '\\n');\n                commandHistory.splice(i, 1);\n            } else {\n                prevCommand = commandHistory[i];\n            }\n        }\n\n        saveCommandHistory(commandHistory);\n        localStorage.setItem(LogKeys.CommandHistory, JSON.stringify(commandHistory));\n        context.handTermRef?.current?.prompt();\n        return { status: 200, message: 'Command history cleaned.' };\n    }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/clearCommand.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":29,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":29,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":35,"column":10,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":35,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1111,1129],"text":"(handTerm?.current) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":50,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":50,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1646,1650],"text":"key == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1647,1650],"text":"(key ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1646,1650],"text":"!Boolean(key)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":72,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":72,"endColumn":25}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/commands/clearCommand.tsx\nimport type React from 'react';\n\nimport { type IHandTermWrapperMethods } from \"../components/HandTermWrapper\";\nimport { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { LogKeys } from '../types/TerminalTypes';\nimport { type ParsedCommand, type OutputElement } from '../types/Types';\n\ninterface HandTermState {\n  commandHistory?: unknown[];\n  outputElements?: unknown[];\n}\n\ninterface HandTermInstance extends IHandTermWrapperMethods {\n  setState: (state: Partial<HandTermState>) => void;\n  terminalReset: () => void;\n  prompt: () => void;\n}\n\n// Extend ICommandContext to include handTerm\ninterface ExtendedCommandContext extends ICommandContext {\n  handTerm?: React.RefObject<HandTermInstance>;\n  appendToOutput: (output: OutputElement) => void;\n}\n\nexport const clearCommand: ICommand = {\n  name: 'clear',\n  description: 'Clear the command history',\n  execute: async (\n    context: ExtendedCommandContext,\n    parsedCommand: ParsedCommand\n  ): Promise<ICommandResponse> => {\n    const handTerm = context.handTerm;\n\n    if (!handTerm?.current) {\n      const outputElement: OutputElement = {\n        command: parsedCommand,\n        response: 'No command context available.',\n        status: 404,\n        commandTime: new Date()\n      };\n      context.appendToOutput(outputElement);\n      return { status: 404, message: 'No command context available.' };\n    }\n\n    // Logic to clear the command history from localStorage\n    const removeKeys: string[] = [];\n    for (let i = localStorage.length; i >= 0; i--) {\n      const key = localStorage.key(i);\n      if (!key) continue;\n\n      if (\n        key.includes(LogKeys.Command)\n        || key.includes('terminalCommandHistory') // Remove after clearing legacy phone db.\n        || key.includes(LogKeys.CharTime)\n      ) {\n        removeKeys.push(key);\n      }\n\n      if (parsedCommand.args.length > 0) {\n        if (key.includes(parsedCommand.args[0])) {\n          removeKeys.push(key);\n        }\n      }\n    }\n\n    for (const removeKey of removeKeys) {\n      localStorage.removeItem(removeKey); // Clear localStorage.length\n    }\n\n    const handTermInstance = handTerm.current;\n    if (handTermInstance) {\n      handTermInstance.setState({ commandHistory: [] });\n      handTermInstance.setState({ outputElements: [] });\n      handTermInstance.terminalReset();\n      handTermInstance.prompt();\n    }\n\n    const outputElement: OutputElement = {\n      command: parsedCommand,\n      response: 'Command history cleared.',\n      status: 200,\n      commandTime: new Date()\n    };\n    context.appendToOutput(outputElement);\n\n    return { status: 200, message: 'Command history cleared.' };\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/commandRegistry.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":5,"column":1,"nodeType":"ExportNamedDeclaration","endLine":5,"endColumn":62},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":20,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[529,536],"text":"(filter == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[530,536],"text":"(filter ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[529,536],"text":"(!Boolean(filter))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/commands/commandRegistry.ts\n\nimport { type ICommand } from '../contexts/CommandContext';\n\nexport type ICommandRegistryItems = Record<string, ICommand>;\n\nclass CommandRegistry {\n    private commands: ICommandRegistryItems = {};\n\n    register(command: ICommand) {\n        this.commands[command.name] = command;\n    }\n\n    getCommand(name: string): ICommand | undefined {\n        return this.commands[name];\n    }\n\n    getHelp(filter?: string): string {\n        return Object.values(this.commands)\n            .filter(cmd => !filter || cmd.name.includes(filter))\n            .map(cmd => `${cmd.name}: ${cmd.description}`)\n            .join('\\n\\n');\n    }\n\n}\n\nexport const commandRegistry = new CommandRegistry();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/editCommand.tsx","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":7,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":7,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":29,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":14,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[569,590],"text":"(parsedCommand.args[0] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[569,590],"text":"(parsedCommand.args[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[569,590],"text":"(Boolean(parsedCommand.args[0]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":23,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":23,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ICommand, type ICommandResponse , type ICommandContext } from '../contexts/CommandContext';\nimport { ActivityType, type ParsedCommand } from '../types/Types';\n\nconst EditCommand: ICommand = {\n    name: 'edit',\n    description: 'Edit file contents',\n    execute: async (\n        context: ICommandContext,\n        parsedCommand: ParsedCommand,\n    ): Promise<ICommandResponse> => {\n        if (parsedCommand.command.toLowerCase() === 'edit') {\n            context.updateLocation({\n                activityKey: ActivityType.EDIT,\n                contentKey: parsedCommand.args[0] || '_index.md',\n                groupKey: null\n            })\n            return { status: 200, message: \"Editing file content\" };\n        }\n        return { status: 404, message: \"Help command not recognized\" };\n    }\n};\n\nexport default EditCommand;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/index.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_path` must not have a leading underscore.","line":27,"column":42,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":27,"endColumn":47},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":31,"column":7,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":31,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[906,927],"text":"(commandModule.default != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/commands/index.ts\nimport { type ICommand } from '../contexts/CommandContext';\n\nimport { commandRegistry } from './commandRegistry';\n\n// Interface for command modules\ninterface CommandModule {\n  default?: ICommand;\n  [key: string]: ICommand | undefined;\n}\n\n// Type guard to check if a value is a valid command\nfunction isValidCommand(command: unknown): command is ICommand {\n  return (\n    typeof command === 'object' &&\n    command !== null &&\n    'name' in command &&\n    'execute' in command &&\n    typeof (command as ICommand).name === 'string' &&\n    typeof (command as ICommand).execute === 'function'\n  );\n}\n\n// Dynamically import and register all command files\nconst commandModules = import.meta.glob('./*Command.ts*', { eager: true });\n\nObject.entries(commandModules).forEach(([_path, module]) => {\n  const commandModule = module as CommandModule;\n\n  // Check for default export first\n  if (commandModule.default && isValidCommand(commandModule.default)) {\n    commandRegistry.register(commandModule.default);\n    return;\n  }\n\n  // If no default, check other exports\n  const commands = Object.values(commandModule).filter(isValidCommand);\n  commands.forEach(command => {\n    commandRegistry.register(command);\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/toggleVideoCommand.ts","messages":[{"ruleId":"@typescript-eslint/require-await","severity":2,"message":"Async method 'execute' has no 'await' expression.","line":8,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingAwait","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_context` must not have a leading underscore.","line":9,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":9,"endColumn":34},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_parsedCommand` must not have a leading underscore.","line":10,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":10,"endColumn":38},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":20,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":20,"endColumn":15}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ICommand, type ICommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { isShowVideoSignal } from '../signals/appSignals';\nimport { type ParsedCommand } from '../types/Types';\n\nexport const toggleVideoCommand: ICommand = {\n    name: 'video',\n    description: 'Toggle webcam video on/off',\n    execute: async (\n        _context: ICommandContext,\n        _parsedCommand: ParsedCommand\n    ): Promise<ICommandResponse> => {\n        isShowVideoSignal.value = !isShowVideoSignal.value;\n        return {\n            status: 200,\n            message: `Video ${isShowVideoSignal.value ? 'enabled' : 'disabled'}`,\n        };\n    }\n};\n\nexport default toggleVideoCommand;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/commands/wrtCommand.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":51,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":51,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":53,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":53,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1678,1686],"text":"(fileName != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1678,1686],"text":"(fileName ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1678,1686],"text":"(Boolean(fileName))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":53,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":53,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1690,1710],"text":"(context.auth.getFile != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":56,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":56,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1847,1860],"text":"(response.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1847,1860],"text":"(response.data ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1847,1860],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":68,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":68,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":70,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":70,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2535,2543],"text":"(fileName != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2535,2543],"text":"(fileName ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2535,2543],"text":"(Boolean(fileName))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":70,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":70,"endColumn":44,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2547,2566],"text":"(context.setEditMode != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":70,"column":48,"nodeType":"ChainExpression","messageId":"conditionErrorNullableObject","endLine":70,"endColumn":96,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2570,2618],"text":"((context.activityMediator?.determineActivityState) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected value in conditional. A boolean expression is required.","line":76,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorOther","endLine":76,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":78,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":78,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2983,2991],"text":"(fileName != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2983,2991],"text":"(fileName ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2983,2991],"text":"(Boolean(fileName))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":78,"column":25,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":78,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2995,3015],"text":"(context.auth.getFile != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":78,"column":49,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":78,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3019,3041],"text":"(context.handleEditSave != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":81,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3178,3191],"text":"(response.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3178,3191],"text":"(response.data ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3178,3191],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\n\nimport { type ICommand, type ICommandResponse, type ICommandContext } from '../contexts/CommandContext';\nimport { type IAuthProps } from '../hooks/useAuth';\nimport { ActivityType, type OutputElement, type ParsedCommand } from '../types/Types';\n\n// Extend the command context with optional methods\ninterface ExtendedCommandContext extends ICommandContext {\n  auth: IAuthProps & {\n    getFile?: (fileName: string, format: string) => Promise<{\n      status: number;\n      data?: string;\n      message?: string;\n    }>;\n  };\n  setEditMode?: (mode: boolean) => void;\n  activityMediator?: {\n    determineActivityState?: (activity: ActivityType) => void;\n  };\n  handleEditSave?: (content: string) => void;\n}\n\nexport const wrtCommand: ICommand = {\n  name: 'wrt',\n  description: 'Write to the terminal',\n  switches: {\n    'file': 'Write the contents of a file to the terminal',\n    'edit': 'Edit the contents of a file',\n    'save': 'Save the contents of a file',\n  },\n  execute: async (\n    context: ExtendedCommandContext,\n    parsedCommand: ParsedCommand\n  ): Promise<ICommandResponse> => {\n    const switches = parsedCommand.switches;\n    const args = parsedCommand.args;\n\n    const getFileName = (switchKey: string): string | null => {\n      const fileName = switches[switchKey];\n      return typeof fileName === 'string' ? fileName : null;\n    };\n\n    const createOutputElement = (message: string | React.ReactNode): OutputElement => ({\n      command: parsedCommand,\n      response: message,\n      status: 200,\n      commandTime: new Date()\n    });\n\n    try {\n      if (switches['file']) {\n        const fileName = getFileName('file');\n        if (fileName && context.auth.getFile) {\n          try {\n            const response = await context.auth.getFile(fileName, 'txt');\n            if (response.status === 200 && response.data) {\n              context.appendToOutput(createOutputElement(response.data));\n            } else {\n              context.appendToOutput(createOutputElement(`Error reading file: ${fileName}`));\n            }\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            context.appendToOutput(createOutputElement(`Error reading file: ${errorMessage}`));\n          }\n        } else {\n          context.appendToOutput(createOutputElement('Please provide a file name or file reading is not supported.'));\n        }\n      } else if (switches['edit']) {\n        const fileName = getFileName('edit');\n        if (fileName && context.setEditMode && context.activityMediator?.determineActivityState) {\n          context.setEditMode(true);\n          context.activityMediator.determineActivityState(ActivityType.EDIT);\n        } else {\n          context.appendToOutput(createOutputElement('Please provide a file name to edit or edit mode is not supported.'));\n        }\n      } else if (switches['save']) {\n        const fileName = getFileName('save');\n        if (fileName && context.auth.getFile && context.handleEditSave) {\n          try {\n            const response = await context.auth.getFile(fileName, 'txt');\n            if (response.status === 200 && response.data) {\n              context.handleEditSave(response.data);\n            } else {\n              context.appendToOutput(createOutputElement(`Error reading file: ${fileName}`));\n            }\n          } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n            context.appendToOutput(createOutputElement(`Error reading file: ${errorMessage}`));\n          }\n        } else {\n          context.appendToOutput(createOutputElement('Please provide a file name to save or save functionality is not supported.'));\n        }\n      } else if (args.length > 0) {\n        // Write the provided arguments to the terminal\n        context.appendToOutput(createOutputElement(args.join(' ')));\n      } else {\n        return { status: 400, message: 'Please provide text to write or use a switch.' };\n      }\n\n      return { status: 200, message: 'Command executed successfully.' };\n    } catch (error) {\n      return {\n        status: 500,\n        message: error instanceof Error ? error.message : 'An unexpected error occurred'\n      };\n    }\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/Chord.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":9,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":28,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":14,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":14,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[347,358],"text":"foundChord == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\n\r\nimport { allChords } from \"../allChords\";\r\n\r\nexport interface ChordProps {\r\n    displayChar: string;\r\n}\r\n\r\nexport const Chord: React.FC<ChordProps> = ({ displayChar }) => {\r\n    let foundChord = Array.from(allChords).find(x => {\r\n        return x.key.replace('&#x2581;', ' ') === displayChar;\r\n    });\r\n\r\n    if (!foundChord) {\r\n        foundChord = Array.from(allChords).find(x => x.key === displayChar);\r\n    }\r\n\r\n    const foundChar = foundChord?.alias ?? foundChord?.key;\r\n\r\n    return (\r\n        <div className=\"chord-image-holder\" id=\"chord-image-holder\" data-source=\"ErrorDisplay.tsx\">\r\n            <div className=\"col-sm-2 row generated next\" id=\"chord2\">\r\n                <span id=\"char15\" className=\"char\">{foundChar}</span>\r\n                <img loading=\"lazy\" alt=\"2\" src={`${import.meta.env.BASE_URL}images/svgs/${foundChord?.chordCode}.svg`} height=\"59.516\" width=\"75\" className=\"hand\"></img>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/CommandOutput.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":4,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":4,"endColumn":18},{"ruleId":"import/no-named-as-default","severity":1,"message":"Using exported name 'WpmTable' as identifier for default import.","line":11,"column":8,"nodeType":"ImportDefaultSpecifier","endLine":11,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `WpmTable` must match one of the following formats: camelCase","line":11,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":16},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":21,"column":60,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":57,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `__html` must not have a leading underscore.","line":36,"column":73,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":36,"endColumn":79},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":52,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":52,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":52,"column":22,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":52,"endColumn":35}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/CommandOutput.tsx\n\nimport {type ReactNode} from 'react';\nimport type React from 'react';\n\nimport { parsedCommandToString } from 'src/utils/commandUtils';\n\nimport { type ParsedCommand, type WPMs } from '../types/Types';\n\nimport { TimeDisplay } from './TimeDisplay';\nimport WpmTable from './WpmTable';\n\ninterface CommandOutputProps {\n    command: ParsedCommand;\n    response: ReactNode;\n    status: number;\n    wpms: WPMs;\n    commandTime: Date;\n}\n\nexport const CommandOutput: React.FC<CommandOutputProps> = ({\n    command,\n    response,\n    status,\n    wpms,\n    commandTime\n}) => {\n    // Function to check if a string contains HTML tags\n    const containsHTML = (str: string) => {\n        return typeof str === 'string' && /<[a-z][\\s\\S]*>/i.test(str);\n    };\n\n    // Render response based on its type and content\n    const renderResponse = () => {\n        if (typeof response === 'string' && containsHTML(response)) {\n            return <div className=\"response\" dangerouslySetInnerHTML={{ __html: response }} />;\n        }\n        return <div className=\"response\">{response}</div>;\n    };\n\n    return (\n        <div data-status={status}>\n            <div className=\"log-line\">\n                <span className=\"log-time\">\n                    <TimeDisplay time={commandTime} />\n                </span>\n                <span className=\"wpm-label\">WPM:</span>\n                <span className=\"wpm\">{(wpms.wpmAverage ?? 0).toFixed(0)}</span>\n                <span className=\"content\">{parsedCommandToString(command)}</span>\n            </div>\n            {renderResponse()}\n            {wpms && wpms.charWpms && wpms.charWpms.length > 0 && (\n                <WpmTable wpms={wpms.charWpms} name=\"slow-char\" />\n            )}\n        </div>\n    );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/ErrorDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":28,"column":8,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":28,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[683,697],"text":"(mismatchedChar.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[683,697],"text":"(mismatchedChar !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[683,697],"text":"(Boolean(mismatchedChar))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":37,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":37,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useImperativeHandle, forwardRef } from 'react';\n\nimport { Chord } from './Chord';\n\ninterface ErrorDisplayProps {\n  mismatchedChar: string;\n  isVisible: boolean;\n}\n\nconst ErrorDisplay = forwardRef((props: ErrorDisplayProps, ref) => {\n  const [errorCount, setErrorCount] = useState(0);\n  const { mismatchedChar } = props;\n\n\n  const showError = () => {\n    setErrorCount(prevCount => prevCount + 1);\n  };\n\n\n  // Use useImperativeHandle to expose functions to the parent component\n  useImperativeHandle(ref, () => ({\n    showError,\n  }));\n\n  return (\n    <div style={{ display: props.isVisible ? 'block' : 'none' }} >\n      <div>Error Count: {errorCount}</div>\n      {mismatchedChar &&\n        <Chord displayChar={mismatchedChar} />\n      }\n    </div>\n  );\n});\n\nErrorDisplay.displayName = 'ErrorDisplay';\n\nexport default ErrorDisplay;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/HandTermWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `WebCam` must match one of the following formats: camelCase","line":14,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":14,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `Game` must match one of the following formats: camelCase","line":17,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":17,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useAuth' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `MonacoEditor` must match one of the following formats: camelCase","line":25,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":25,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `NextCharsDisplay` must match one of the following formats: camelCase","line":26,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":26,"endColumn":24},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":40,"column":1,"nodeType":"ExportNamedDeclaration","endLine":44,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":46,"column":1,"nodeType":"ExportNamedDeclaration","endLine":54,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":56,"column":1,"nodeType":"ExportNamedDeclaration","endLine":66,"endColumn":2},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `forwardRef`. Check if you meant to write `import {forwardRef} from 'react'` instead.","line":72,"column":32,"nodeType":"MemberExpression","endLine":72,"endColumn":48},{"ruleId":"react/display-name","severity":2,"message":"Component definition is missing display name","line":72,"column":32,"nodeType":"CallExpression","messageId":"noDisplayName","endLine":302,"endColumn":3},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createRef`. Check if you meant to write `import {createRef} from 'react'` instead.","line":77,"column":72,"nodeType":"MemberExpression","endLine":77,"endColumn":87},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":81,"column":31,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":81,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2941,2977],"text":"(localStorage.getItem('canvasHeight') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2941,2977],"text":"(localStorage.getItem('canvasHeight') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2941,2977],"text":"(Boolean(localStorage.getItem('canvasHeight')))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":97,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":97,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3736,3763],"text":"(nextCharsDisplayRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":97,"column":40,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":97,"endColumn":79},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":106,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":106,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4108,4115],"text":"phrase == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":126,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":126,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4922,4933],"text":"storedItems != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4922,4933],"text":"storedItems ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4922,4933],"text":"Boolean(storedItems)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":128,"column":17,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":128,"endColumn":48},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":148,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":148,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5635,5651],"text":"xtermRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":159,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":159,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6006,6018],"text":"currentRepo == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6007,6018],"text":"(currentRepo ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6006,6018],"text":"!Boolean(currentRepo)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":168,"column":38,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":168,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6339,6352],"text":"(response.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":225,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":225,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8021,8037],"text":"xtermRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":253,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":253,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8819,8837],"text":"(lastTypedCharacter != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[8819,8837],"text":"(lastTypedCharacter ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8819,8837],"text":"(Boolean(lastTypedCharacter))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":256,"column":65,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":256,"endColumn":85,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8967,8987],"text":"(tutorialSignal.value != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":266,"column":23,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":266,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9314,9322],"text":"(userName != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9314,9322],"text":"(userName ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9314,9322],"text":"(Boolean(userName))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":267,"column":21,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":267,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[9355,9361],"text":"(domain.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[9355,9361],"text":"(domain !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9355,9361],"text":"(Boolean(domain))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":280,"column":25,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":280,"endColumn":61,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9696,9732],"text":"(localStorage.getItem('edit-content') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[9696,9732],"text":"(localStorage.getItem('edit-content') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9696,9732],"text":"(Boolean(localStorage.getItem('edit-content')))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise-returning function provided to attribute where a void return was expected.","line":291,"column":24,"nodeType":"JSXExpressionContainer","messageId":"voidReturnAttribute","endLine":291,"endColumn":42},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":304,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":304,"endColumn":15}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useRef, useState, useCallback, useImperativeHandle } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { useActivityMediator } from 'src/hooks/useActivityMediator';\nimport { activitySignal, isShowVideoSignal } from 'src/signals/appSignals';\nimport { commandTimeSignal } from 'src/signals/commandLineSignals';\nimport {\n  setGamePhrase,\n} from 'src/signals/gameSignals';\nimport { tutorialSignal } from 'src/signals/tutorialSignals';\nimport { createLogger, LogLevel } from 'src/utils/Logger';\nimport { navigate, parseLocation } from 'src/utils/navigationUtils';\nimport WebCam from 'src/utils/WebCam';\n\n\nimport Game, { type IGameHandle } from '../game/Game';\nimport { useAuth, type IAuthProps } from '../hooks/useAuth';\nimport { useTerminal } from '../hooks/useTerminal';\nimport { useWPMCalculator } from '../hooks/useWPMCaculator';\nimport { ActivityType, type OutputElement, type GamePhrase } from '../types/Types';\nimport { getFileContent } from '../utils/apiClient';\n\nimport { Chord } from './Chord';\nimport MonacoEditor from './MonacoEditor';\nimport NextCharsDisplay, { type NextCharsDisplayHandle } from './NextCharsDisplay';\nimport { Prompt } from './Prompt';\nimport { TutorialManager } from './TutorialManager';\n\nconst logger = createLogger({\n  prefix: 'HandTermWrapper',\n  level: LogLevel.DEBUG\n});\n\ninterface TreeItem {\n  path: string;\n  type: 'file' | 'directory';\n}\n\nexport interface IHandTermWrapperProps {\n  terminalWidth: number;\n  auth: IAuthProps;\n  onOutputUpdate: (output: OutputElement) => void;\n}\n\nexport interface XtermMethods {\n  focusTerminal: () => void;\n  terminalWrite: (data: string) => void;\n  getCurrentCommand: () => string;\n  getTerminalSize: () => { width: number; height: number } | undefined;\n  prompt: () => void;\n  appendTempPassword: (password: string) => void;\n  scrollBottom: () => void;\n}\n\nexport interface IHandTermWrapperMethods {\n  writeOutput: (output: string) => void;\n  prompt: () => void;\n  saveCommandResponseHistory: (command: string, response: string, status: number) => string;\n  focusTerminal: () => void;\n  handleCharacter: (character: string) => void;\n  refreshComponent: () => void;\n  setHeroSummersaultAction: () => void;\n  setEditMode: (isEditMode: boolean) => void;\n  handleEditSave: (content: string) => void;\n}\n\nconst getTimestamp = (date: Date) => {\n  return date.toTimeString().split(' ')[0];\n}\n\nexport const HandTermWrapper = React.forwardRef<IHandTermWrapperMethods, IHandTermWrapperProps>((props, forwardedRef) => {\n  const { xtermRef, writeToTerminal, resetPrompt } = useTerminal();\n  const targetWPM = 10;\n  const wpmCalculator = useWPMCalculator();\n  const gameHandleRef = useRef<IGameHandle>(null);\n  const nextCharsDisplayRef: React.RefObject<NextCharsDisplayHandle> = React.createRef();\n  const activityMediator = useActivityMediator();\n\n  const [domain] = useState<string>('handterm.com');\n  const initialCanvasHeight = localStorage.getItem('canvasHeight') || '100';\n  const [canvasHeight] = useState(parseInt(initialCanvasHeight));\n  const [lastTypedCharacter] = useState<string | null>(null);\n  const [, setErrorCharIndex] = useState<number | undefined>(undefined);\n  const [githubUsername] = useState<string | null>(null);\n  const [userName] = useState<string | null>(null);\n  const commandTime = useComputed(() => commandTimeSignal.value);\n  const [treeItems, setTreeItems] = useState<TreeItem[]>([]);\n  const [, setCurrentFile] = useState<string | null>(null);\n\n  const currentActivity = parseLocation().activityKey;\n\n  // Declare handlePhraseComplete with all its dependencies\n  const handlePhraseComplete = useCallback(() => {\n    localStorage.setItem('currentCommand', '');\n    setGamePhrase(null);\n    if (nextCharsDisplayRef.current && nextCharsDisplayRef.current.cancelTimer) {\n      nextCharsDisplayRef.current.cancelTimer();\n    }\n    gameHandleRef.current?.completeGame();\n    resetPrompt();\n  }, [nextCharsDisplayRef, gameHandleRef, resetPrompt]);\n\n  // Then use it in handlePhraseSuccess\n  const handlePhraseSuccess = useCallback((phrase: GamePhrase | null) => {\n    if (!phrase) return;\n    logger.debug(`handlePhraseSuccess called with phrase:`, phrase.key, \"Activity:\", ActivityType[activitySignal.value]);\n    const wpms = wpmCalculator.getWPMs();\n    const wpmAverage = wpms.wpmAverage;\n\n    if (wpmAverage > targetWPM) {\n      activityMediator.checkGameProgress(phrase);\n    }\n\n    gameHandleRef.current?.completeGame();\n    gameHandleRef.current?.levelUp();\n    handlePhraseComplete();\n  }, [wpmCalculator, activityMediator, handlePhraseComplete, gameHandleRef, targetWPM]);\n\n  // Load tree items when entering tree view mode\n  useEffect(() => {\n    if (currentActivity === ActivityType.TREE) {\n      logger.info('Loading tree items in TREE mode');\n      const storedItems = localStorage.getItem('github_tree_items');\n      logger.debug('Stored items:', storedItems);\n      if (storedItems) {\n        try {\n          const items = JSON.parse(storedItems);\n          logger.debug('Parsed items:', items);\n          if (Array.isArray(items) && items.length > 0) {\n            setTreeItems(items);\n          } else {\n            logger.error('Tree items array is empty or invalid');\n          }\n        } catch (error) {\n          logger.error('Error parsing tree items:', error);\n        }\n      } else {\n        logger.error('No tree items found in localStorage');\n      }\n    }\n  }, [currentActivity]);\n\n  // Reset terminal when returning to normal mode\n  useEffect(() => {\n    if (currentActivity === ActivityType.NORMAL) {\n      logger.info('Resetting terminal in NORMAL mode');\n      if (xtermRef.current) {\n        xtermRef.current.focus();\n      }\n      resetPrompt();\n    }\n  }, [currentActivity, xtermRef, resetPrompt]);\n\n  const handleFileSelect = useCallback(async (path: string) => {\n    try {\n      // Get the current repository from localStorage (set by GitHubCommand)\n      const currentRepo = localStorage.getItem('current_github_repo');\n      if (!currentRepo) {\n        logger.error('No repository selected');\n        return;\n      }\n\n      logger.info('Fetching file content:', { repo: currentRepo, path });\n      const response = await getFileContent(props.auth, currentRepo, path);\n      logger.debug('File content response:', response);\n\n      if (response.status === 200 && response.data) {\n        // Store content and file path\n        localStorage.setItem('edit-content', response.data.content);\n        setCurrentFile(path);\n\n        // Update location with file path\n        navigate({\n          activityKey: ActivityType.EDIT,\n          contentKey: `${currentRepo}/${path}`,\n          groupKey: null\n        });\n      } else {\n        logger.error('Failed to fetch file content:', response.error);\n      }\n    } catch (error) {\n      logger.error('Failed to fetch file content:', error);\n      // Stay in tree view mode on error\n      return;\n    }\n  }, [props.auth]);\n\n  const handleEditorClose = useCallback((): void => {\n    logger.info('Closing editor, returning to NORMAL mode');\n    // Clear stored content and file path\n    localStorage.removeItem('edit-content');\n    setCurrentFile(null);\n    // Return to normal mode\n    navigate({\n      activityKey: ActivityType.NORMAL,\n      contentKey: null,\n      groupKey: null\n    });\n  }, []);\n\n  const handleTreeClose = useCallback((): void => {\n    logger.info('Closing tree view, returning to NORMAL mode');\n    // Clear tree items\n    setTreeItems([]);\n    localStorage.removeItem('github_tree_items');\n    // Return to normal mode\n    navigate({\n      activityKey: ActivityType.NORMAL,\n      contentKey: null,\n      groupKey: null\n    });\n  }, []);\n\n  const handlePhraseErrorState = useCallback((errorIndex: number | undefined) => {\n    setErrorCharIndex(errorIndex);\n  }, []);\n\n  // Initialize component methods\n  useImperativeHandle(forwardedRef, () => ({\n    writeOutput: writeToTerminal,\n    prompt: () => { },\n    saveCommandResponseHistory: () => '',\n    focusTerminal: () => {\n      if (xtermRef.current) {\n        xtermRef.current.focus();\n      }\n    },\n    handleCharacter: () => { },\n    refreshComponent: () => { },\n    setHeroSummersaultAction: () => { },\n    setEditMode: () => { },\n    handleEditSave: () => { },\n  }), [writeToTerminal, xtermRef]);\n\n  return (\n    <div id='handterm-wrapper'>\n      {(parseLocation().activityKey === ActivityType.GAME) && (\n        <Game\n          ref={gameHandleRef}\n          canvasHeight={canvasHeight}\n          canvasWidth={props.terminalWidth}\n        />\n      )}\n      {parseLocation().activityKey === ActivityType.GAME && (\n        <NextCharsDisplay\n          ref={nextCharsDisplayRef}\n          isInPhraseMode={true}\n          onPhraseSuccess={handlePhraseSuccess}\n          onError={handlePhraseErrorState}\n        />\n      )}\n      {lastTypedCharacter && (\n        <Chord displayChar={lastTypedCharacter} />\n      )}\n      {parseLocation().activityKey === ActivityType.TUTORIAL && tutorialSignal.value && (\n        <TutorialManager\n          tutorial={tutorialSignal.value}\n        />\n      )}\n\n      {/* Always show terminal unless in EDIT or TREE mode */}\n      {currentActivity !== ActivityType.EDIT && currentActivity !== ActivityType.TREE && (\n        <div id=\"prompt-and-terminal\">\n          <Prompt\n            username={userName || 'guest'}\n            domain={domain || 'handterm.com'}\n            githubUsername={githubUsername}\n            timestamp={getTimestamp(commandTime.value)}\n          />\n          <div\n            ref={xtermRef}\n            id=\"xtermRef\"\n          />\n        </div>\n      )}\n\n      {currentActivity === ActivityType.EDIT && (\n        <MonacoEditor\n          initialValue={localStorage.getItem('edit-content') || ''}\n          language=\"markdown\"\n          onClose={handleEditorClose}\n        />\n      )}\n      {currentActivity === ActivityType.TREE && treeItems.length > 0 && (\n        <MonacoEditor\n          initialValue=\"\"\n          language=\"plaintext\"\n          isTreeView={true}\n          treeItems={treeItems}\n          onFileSelect={handleFileSelect}\n          onClose={handleTreeClose}\n        />\n      )}\n      {isShowVideoSignal.value && (\n        <WebCam\n          setOn={isShowVideoSignal.value}\n        />\n      )}\n    </div>\n  );\n});\n\nexport default HandTermWrapper;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/MonacoEditor.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleGitHubSave' is assigned a value but never used.","line":41,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1137,1149],"text":"(currentRepo == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1138,1149],"text":"(currentRepo ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1137,1149],"text":"(!Boolean(currentRepo))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":46,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":46,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1153,1165],"text":"(currentFile == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1154,1165],"text":"(currentFile ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1153,1165],"text":"(!Boolean(currentFile))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleEditorDidMount' is assigned a value but never used.","line":65,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":31},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":69,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":69,"endColumn":21,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[1927,1937],"text":"isTreeView ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[1927,1937],"text":"isTreeView === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":76,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":76,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2119,2137],"text":"editorRef.current == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":86,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":86,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2481,2493],"text":"onFileSelect != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":94,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableBoolean","endLine":94,"endColumn":20,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2680,2690],"text":"(isTreeView ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2680,2690],"text":"(isTreeView === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"react/jsx-handler-names","severity":2,"message":"Handler function for onClick prop key must be a camelCase name beginning with 'handle' only","line":103,"column":17,"nodeType":"JSXAttribute","messageId":"badHandlerName","endLine":103,"endColumn":34},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":111,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":111,"endColumn":15}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useRef, useImperativeHandle, forwardRef, useCallback } from 'react';\n\nimport { type editor } from 'monaco-editor';\n\nimport { createLogger, LogLevel } from 'src/utils/Logger';\n\nimport { useAuth } from '../hooks/useAuth';\n\n\nconst logger = createLogger({\n  prefix: 'MonacoEditor',\n  level: LogLevel.DEBUG\n});\n\ninterface TreeItem {\n  path: string;\n  type: 'file' | 'directory';\n}\n\ninterface MonacoEditorProps {\n  initialValue?: string;\n  language?: string;\n  onClose: () => void;\n  height?: string;\n  isTreeView?: boolean;\n  treeItems?: TreeItem[];\n  onFileSelect?: (file: string) => void;\n}\n\nconst MonacoEditor = forwardRef<editor.IStandaloneCodeEditor, MonacoEditorProps>(\n  ({\n    onClose,\n    height = '80vh',\n    isTreeView,\n    treeItems = [],\n    onFileSelect\n  }, ref) => {\n    const editorRef = useRef<editor.IStandaloneCodeEditor | null>(null);\n    const auth = useAuth();\n\n    const handleGitHubSave = useCallback(async (): Promise<void> => {\n      try {\n        const currentRepo = localStorage.getItem('current_github_repo');\n        const currentFile = localStorage.getItem('current_github_file');\n\n        if (!currentRepo || !currentFile) {\n          logger.error('No repository or file selected for saving');\n          return;\n        }\n\n        // Use a generic file save method from auth\n        const response = await auth.login(currentRepo, currentFile);\n\n        if (response.status === 200) {\n          logger.info('File saved to GitHub successfully');\n        } else {\n          logger.error('Failed to save file to GitHub:', response.message);\n          throw new Error(response.message);\n        }\n      } catch (error) {\n        logger.error('Error saving to GitHub:', error);\n      }\n    }, [auth]);\n\n    const handleEditorDidMount = useCallback((editor: editor.IStandaloneCodeEditor) => {\n      logger.info('Editor mounted, setting up...');\n      editorRef.current = editor;\n\n      if (isTreeView) {\n        logger.info('Setting up tree view mode');\n        editor.updateOptions({ readOnly: true });\n      }\n    }, [isTreeView]);\n\n    useImperativeHandle(ref, () => {\n      if (!editorRef.current) {\n        throw new Error('Editor ref is not available');\n      }\n      return editorRef.current;\n    }, [editorRef]);\n\n    const handleFileSelection = useCallback((item: TreeItem) => {\n      if (item.type === 'directory') {\n        logger.debug('Toggling directory:', item.path);\n        // Toggle directory expansion logic\n      } else if (onFileSelect) {\n        logger.info('Opening file:', item.path);\n        onFileSelect(item.path);\n      }\n    }, [onFileSelect]);\n\n    return (\n      <div style={{ height, width: '100%' }}>\n        {isTreeView && treeItems.length > 0 && (\n          <div>\n            {treeItems.map((item, index) => (\n              <button key={index} onClick={() => handleFileSelection(item)}>\n                {item.path}\n              </button>\n            ))}\n          </div>\n        )}\n        <button onClick={onClose}>Close</button>\n      </div>\n    );\n  }\n);\n\nMonacoEditor.displayName = 'MonacoEditor';\n\nexport default MonacoEditor;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/Nav.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Chord } from \"./Chord\";\n\nexport function Nav() {\n    return (\n        ['UpArrow', 'LeftArrow', 'DownArrow', 'RightArrow'].map(c => {\n            return <Chord key={c} displayChar={c} />\n        })\n    )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/NextCharsDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `GamePhrases` must match one of the following formats: camelCase","line":8,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ErrorDisplay` must match one of the following formats: camelCase","line":14,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":14,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `Timer` must match one of the following formats: camelCase","line":15,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":13},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":17,"column":1,"nodeType":"ExportNamedDeclaration","endLine":21,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":23,"column":1,"nodeType":"ExportNamedDeclaration","endLine":26,"endColumn":2},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `forwardRef`. Check if you meant to write `import {forwardRef} from 'react'` instead.","line":28,"column":26,"nodeType":"MemberExpression","endLine":28,"endColumn":42},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_mismatchedChar` must not have a leading underscore.","line":33,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":33,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_mismatchedIsVisible` must not have a leading underscore.","line":34,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":34,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_nextChars` must not have a leading underscore.","line":35,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":35,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_phrase` must not have a leading underscore.","line":36,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":36,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_gamePhrase` must not have a leading underscore.","line":37,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":37,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":49,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":49,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":53,"column":14,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":53,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2220,2238],"text":"(stringBeingTested.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2220,2238],"text":"(stringBeingTested === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2220,2238],"text":"(!Boolean(stringBeingTested))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":88,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":88,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3377,3388],"text":"(_gamePhrase != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":88,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":88,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3392,3407],"text":"(_gamePhrase.key.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3392,3407],"text":"(_gamePhrase.key !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3392,3407],"text":"(Boolean(_gamePhrase.key))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":93,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":93,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3582,3598],"text":"timerRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":99,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":99,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3727,3743],"text":"timerRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":105,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":105,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3863,3879],"text":"timerRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":111,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":111,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4000,4016],"text":"timerRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":114,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":114,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4080,4100],"text":"nextCharsRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":127,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":127,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4544,4557],"text":"nextChordHTML != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"consistent-return","severity":2,"message":"Arrow function expected a return value.","line":133,"column":13,"nodeType":"ReturnStatement","messageId":"missingReturnValue","endLine":133,"endColumn":20},{"ruleId":"consistent-return","severity":2,"message":"Arrow function expected a return value.","line":149,"column":13,"nodeType":"ReturnStatement","messageId":"missingReturnValue","endLine":149,"endColumn":20},{"ruleId":"consistent-return","severity":2,"message":"Arrow function expected a return value.","line":154,"column":9,"nodeType":"ReturnStatement","messageId":"missingReturnValue","endLine":154,"endColumn":16},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":176,"column":14,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":176,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[6021,6033],"text":"(activityKey.length === 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[6021,6033],"text":"(activityKey === \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6021,6033],"text":"(!Boolean(activityKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":176,"column":30,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":176,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6037,6048],"text":"(contentKey == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6038,6048],"text":"(contentKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6037,6048],"text":"(!Boolean(contentKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":179,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":179,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":196,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":196,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6724,6750],"text":"(currentLocation.contentKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6724,6750],"text":"(currentLocation.contentKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6724,6750],"text":"(Boolean(currentLocation.contentKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":201,"column":18,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":201,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6893,6908],"text":"(_mismatchedChar != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6893,6908],"text":"(_mismatchedChar ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6893,6908],"text":"(Boolean(_mismatchedChar))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":220,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":220,"endColumn":15}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useImperativeHandle, useCallback, useEffect, useMemo } from 'react';\n\nimport { useComputed, useSignalEffect } from \"@preact/signals-react\";\n\nimport { commandLineSignal } from \"src/signals/commandLineSignals\";\nimport { setCompletedGamePhrase } from \"src/signals/gameSignals\";\nimport { type GamePhrase } from \"src/types/Types\";\nimport * as GamePhrases from \"src/utils/GamePhrases\";\nimport { parseLocation } from \"src/utils/navigationUtils\";\n\nimport { TerminalCssClasses } from \"../types/TerminalTypes\";\nimport { Phrase } from \"../utils/Phrase\";\n\nimport ErrorDisplay from \"./ErrorDisplay\";\nimport Timer, { type TimerHandle } from './Timer';\n\nexport interface INextCharsDisplayProps {\n    isInPhraseMode: boolean;\n    onPhraseSuccess: (phrase: GamePhrase | null) => void;\n    onError: (error: number | undefined) => void;\n}\n\nexport interface NextCharsDisplayHandle {\n    resetTimer: () => void;\n    cancelTimer: () => void;\n}\n\nconst NextCharsDisplay = React.forwardRef<NextCharsDisplayHandle, INextCharsDisplayProps>(({\n    isInPhraseMode,\n    onPhraseSuccess,\n    onError\n}, ref) => {\n    const [_mismatchedChar, setMismatchedChar] = useState<string | null>(null);\n    const [_mismatchedIsVisible, setMismatchedIsVisible] = useState(false);\n    const [_nextChars, setNextChars] = useState<string>('');\n    const [_phrase, setPhrase] = useState<Phrase>(new Phrase(['']));\n    const [_gamePhrase, setGamePhrase] = useState<GamePhrase | null>(null);\n\n    const nextCharsRef = useRef<HTMLPreElement>(null);\n    const nextCharsRateRef = useRef<HTMLDivElement>(null);\n    const timerRef = useRef<TimerHandle>(null);\n    const wpmRef = useRef<HTMLSpanElement>(null);\n    const commandLine = useComputed(() => commandLineSignal.value);\n\n    // Memoize location parsing to prevent unnecessary re-renders\n    const currentLocation = useMemo(() => parseLocation(), []);\n\n    const getFirstNonMatchingChar = useCallback((stringBeingTested: string): number => {\n        if (!_phrase.value) return 0;\n        const sourcePhrase = _phrase.value;\n        const sourcePhraseString = sourcePhrase.join('');\n        if (stringBeingTested === sourcePhraseString) return sourcePhraseString.length;\n        if (!stringBeingTested || stringBeingTested.length === 0) {\n            return 0;\n        }\n        let result = 0;\n        for (let i = 0; i < stringBeingTested.length; i++) {\n            if (stringBeingTested[i] !== sourcePhrase[i]) {\n                return i;\n            }\n            result++;\n        }\n        return result;\n    }, [_phrase.value]);\n\n    const getNextCharacters = useCallback((stringBeingTested: string): string => {\n        const nextIndex = getFirstNonMatchingChar(stringBeingTested);\n        const result = _phrase.value.join('').substring(nextIndex);\n        return result;\n    }, [_phrase.value, getFirstNonMatchingChar]);\n\n    const showError = useCallback((char: string, charIndex: number) => {\n        setMismatchedChar(char);\n        setMismatchedIsVisible(true);\n        onError(charIndex);\n    }, [onError]);\n\n    const hideError = useCallback(() => {\n        setMismatchedChar(null);\n        setMismatchedIsVisible(false);\n        onError(undefined);\n    }, [onError]);\n\n    const handleSuccess = useCallback(() => {\n        setMismatchedChar('');\n        setMismatchedIsVisible(false);\n        setNextChars('');\n        if (_gamePhrase && _gamePhrase.key) setCompletedGamePhrase(_gamePhrase.key)\n        onPhraseSuccess(_gamePhrase);\n    }, [_gamePhrase, onPhraseSuccess]);\n\n    const stopTimer = useCallback(() => {\n        if (timerRef.current) {\n            timerRef.current.stop();\n        }\n    }, []);\n\n    const startOrContinueTimer = useCallback(() => {\n        if (timerRef.current) {\n            timerRef.current.start();\n        }\n    }, []);\n\n    const resetTimer = useCallback(() => {\n        if (timerRef.current) {\n            timerRef.current.reset();\n        }\n    }, []);\n\n    const cancelTimer = useCallback(() => {\n        if (timerRef.current) {\n            timerRef.current.reset();\n        }\n        if (nextCharsRef.current) nextCharsRef.current.innerText = _phrase.value.join('');\n    }, [_phrase.value]);\n\n    const handleCommandLineChange = useCallback((stringBeingTested: string) => {\n        startOrContinueTimer();\n\n        const nextIndex = getFirstNonMatchingChar(stringBeingTested);\n        if (nextIndex < 0 || nextIndex > _phrase.value.length) {\n            return null;\n        }\n\n        const nextChordHTML = _phrase.chordsHTML[nextIndex];\n\n        if (nextChordHTML) {\n            nextChordHTML.classList.remove(\"error\");\n        }\n\n        if (stringBeingTested.length === 0) {\n            cancelTimer();\n            return;\n        }\n\n        if (stringBeingTested === _phrase.value.join('').trim().substring(0, stringBeingTested.length)) {\n            hideError();\n        } else {\n            const firstNonMatchingChar = getFirstNonMatchingChar(stringBeingTested);\n            const mismatchedChar = _phrase.value[firstNonMatchingChar];\n            setMismatchedIsVisible(true);\n            setMismatchedChar(mismatchedChar);\n            showError(mismatchedChar, firstNonMatchingChar);\n        }\n\n        if (stringBeingTested.trim() === _phrase.value.join('').trim()) {\n            stopTimer();\n            handleSuccess();\n            return;\n        }\n\n        const nextCharactersString = getNextCharacters(stringBeingTested);\n        setNextChars(nextCharactersString);\n        return;\n    }, [\n        startOrContinueTimer,\n        getFirstNonMatchingChar,\n        _phrase.value,\n        _phrase.chordsHTML,\n        cancelTimer,\n        hideError,\n        showError,\n        stopTimer,\n        handleSuccess,\n        getNextCharacters\n    ]);\n\n    useImperativeHandle(ref, () => ({\n        resetTimer,\n        cancelTimer\n    }), [resetTimer, cancelTimer]);\n\n    // Optimize useEffect to only run when content key changes\n    useEffect(() => {\n        const { activityKey, contentKey } = currentLocation;\n        if (!activityKey || !contentKey) return;\n\n        const foundPhrase = GamePhrases.default.getGamePhraseByKey(contentKey);\n        if (!foundPhrase) return;\n\n        // Prevent unnecessary state updates\n        setGamePhrase(prevPhrase =>\n            prevPhrase?.key === foundPhrase.key ? prevPhrase : foundPhrase\n        );\n        setPhrase(new Phrase(foundPhrase.value.split('')));\n        setNextChars(foundPhrase.value);\n    }, [currentLocation, currentLocation.contentKey]);\n\n    // Optimize signal effect to prevent unnecessary re-renders\n    useSignalEffect(() => {\n        const commandLineValue = commandLine.value;\n        handleCommandLineChange(commandLineValue);\n    });\n\n    return (\n        (currentLocation.contentKey &&\n            <div\n                id={TerminalCssClasses.NextChars}\n                hidden={!isInPhraseMode}\n            >\n                {_mismatchedChar && _mismatchedIsVisible && (\n                    <ErrorDisplay\n                        isVisible={_mismatchedIsVisible}\n                        mismatchedChar={_mismatchedChar ?? ''}\n                    />\n                )}\n                <Timer ref={timerRef} />\n                <div id={TerminalCssClasses.NextCharsRate} ref={nextCharsRateRef}></div>\n                <span id={TerminalCssClasses.WPM} ref={wpmRef}></span>\n                <pre id={TerminalCssClasses.NextChars} ref={nextCharsRef}>\n                    {_nextChars}\n                </pre>\n            </div>\n        )\n    );\n});\n\nNextCharsDisplay.displayName = 'NextCharsDisplay';\n\nexport default NextCharsDisplay;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/Output.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":13,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":37,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/Output.tsx\nimport type React from 'react';\nimport { useState } from 'react';\n\nimport { useSignalEffect } from '@preact/signals-react';\n\nimport { outputElementsSignal } from 'src/signals/appSignals';\nimport { type OutputElement } from 'src/types/Types';\n\nimport { CommandOutput } from './CommandOutput';\n\n\nexport const Output: React.FC = () => {\n  const [outputElements, setOutputElements] = useState<OutputElement[]>([]);\n\n  useSignalEffect(() => {\n    setOutputElements(outputElementsSignal.value);\n  });\n\n  return (\n    <div id=\"output-container\">\n      {outputElements.map((outputElement: OutputElement, index: number) => (\n        <CommandOutput\n          key={index}\n          command={outputElement.command}\n          response={outputElement.response}\n          status={outputElement.status}\n          wpms={{\n            wpmAverage: outputElement?.wpmAverage ?? 0,\n            charWpms: outputElement?.characterAverages ?? []\n          }}\n          commandTime={outputElement.commandTime}\n        />\n      ))}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/Prompt.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":16,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":33,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":24,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":24,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[747,761],"text":"(githubUsername != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[747,761],"text":"(githubUsername ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[747,761],"text":"(Boolean(githubUsername))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { promptInfoSignal } from 'src/signals/commandLineSignals';\n\nimport { TerminalCssClasses } from \"../types/TerminalTypes\"\n\ninterface PromptProps {\n    domain: string;\n    username: string;\n    timestamp: string;\n    githubUsername: string | null;\n}\n\nexport const Prompt: React.FC<PromptProps> = ({ domain, username, timestamp, githubUsername }) => {\n    const promptInfo = useComputed(() => promptInfoSignal.value);\n\n    return (\n        <pre id={TerminalCssClasses.Prompt}>\n            <span className=\"timestamp\">{timestamp}</span>\n            <span className=\"user\">{username}</span>\n            <span className=\"domain\">@{domain}</span>\n            {githubUsername &&\n                <span className=\"github\">\n                    <i className=\"fa fa-github\" aria-hidden=\"true\"></i>\n                    {githubUsername}\n                </span>\n            }\n            <span>{promptInfo.value}</span>\n        </pre>\n    )\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/SlowestCharactersDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":18,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":18,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[454,476],"text":"charGroups[character] == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":33,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":50,"endColumn":2}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\n\ninterface CharWPM {\n    character: string;\n    wpm: number;\n    durationMilliseconds: number;\n}\n\ninterface SlowestCharactersDisplayProps {\n    charWpms: CharWPM[];\n}\n\nconst averageWpmByCharacter = (charWpms: CharWPM[]) => {\n    const charGroups: Record<string, { totalWpm: number, count: number }> = {};\n\n    // Sum WPMs for each character and count occurrences\n    charWpms.forEach(({ character, wpm }) => {\n        if (!charGroups[character]) {\n            charGroups[character] = { totalWpm: 0, count: 0 };\n        }\n        charGroups[character].totalWpm += wpm;\n        charGroups[character].count++;\n    });\n\n    // Calculate average WPM for each character\n    return Object.entries(charGroups).map(([character, { totalWpm, count }]) => ({\n        character,\n        wpm: totalWpm / count,\n        durationMilliseconds: 0, // You may want to handle duration aggregation differently\n    }));\n}\n\nexport const SlowestCharactersDisplay: React.FC<SlowestCharactersDisplayProps> = ({ charWpms }) => {\n    // that calculates the average WPM for each character.\n    const characterAverages = averageWpmByCharacter(charWpms.filter(wpm => wpm.durationMilliseconds > 1));\n    const slowestCharacters = characterAverages\n        .sort((a, b) => a.wpm - b.wpm)\n        .slice(0, 3);\n\n    return (\n        <div className=\"slow-chars\">\n            {slowestCharacters.map((char, index) => (\n                <div key={index}>\n                    <span>Character: {char.character}</span>\n                    <span>WPM: {char.wpm.toFixed(2)}</span>\n                </div>\n            ))}\n        </div>\n    );\n};\n\n// If you need to use ReactDOMServer.renderToStaticMarkup in the functional component context,\n// you would typically do it outside the component, wherever you're intending to use the HTML string.\n// For example:\n// const slowestCharactersHtml = ReactDOMServer.renderToStaticMarkup(<SlowestCharactersDisplay charWpms={charWpms} />);","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/TimeDisplay.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":7,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":20,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_time` must not have a leading underscore.","line":8,"column":9,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":8,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\n\ninterface TimeDisplayProps {\n  time?: Date;\n}\n\nexport const TimeDisplay: React.FC<TimeDisplayProps> = ({ time = new Date() }) => {\n  const _time:Date = typeof time === 'string' ? new Date(time): time;\n  const hours = _time.getHours().toString().padStart(2, '0');\n  const minutes = _time.getMinutes().toString().padStart(2, '0');\n  const seconds = _time.getSeconds().toString().padStart(2, '0');\n\n  return (\n    <>\n      <span className=\"log-hour\">{hours}</span>\n      <span className=\"log-minute\">{minutes}</span>\n      <span className=\"log-second\">{seconds}</span>\n    </>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/Timer.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":3,"column":1,"nodeType":"ExportNamedDeclaration","endLine":3,"endColumn":31},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":5,"column":1,"nodeType":"ExportNamedDeclaration","endLine":10,"endColumn":2},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":12,"column":66,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":83,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_props` must not have a leading underscore.","line":12,"column":67,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":12,"endColumn":73},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullish value in conditional. The condition is always false.","line":27,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullish","endLine":27,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":31,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":31,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[951,961],"text":"intervalId != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[951,961],"text":"intervalId ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[951,961],"text":"Boolean(intervalId)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":85,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":85,"endColumn":15}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useImperativeHandle, forwardRef, type ForwardRefRenderFunction } from 'react';\n\nexport interface TimerProps {}\n\nexport interface TimerHandle {\n  start: () => void;\n  stop: () => void;\n  reset: () => number;\n  success: () => void;\n}\n\nconst Timer: ForwardRefRenderFunction<TimerHandle, TimerProps> = (_props, ref) => {\n  const [centiSecond, setCentiSecond] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [svgStatus, setSvgStatus] = useState<'start' | 'stop' | 'pause'>('start');\n\n  useEffect(() => {\n    let intervalId: number | null = null;\n\n    if (isActive) {\n      setSvgStatus('pause');\n      intervalId = window.setInterval(() => {\n        setCentiSecond((prevCentiSecond: number) => prevCentiSecond + 1);\n      }, 10);\n    } else if (!isActive && centiSecond !== 0) {\n      setSvgStatus('start');\n      if (intervalId) clearInterval(intervalId);\n    }\n\n    return () => {\n      if (intervalId) clearInterval(intervalId);\n    };\n  }, [isActive, centiSecond]);\n\n  const start = () => {\n    setIsActive(true);\n  };\n\n  const stop = () => {\n    setIsActive(false);\n  };\n\n  const reset = (): number => {\n    setIsActive(false);\n    const finalCentiSecond = centiSecond;\n    setCentiSecond(0);\n    return finalCentiSecond;\n  };\n\n  const success = () => {\n    setCentiSecond(0);\n    setIsActive(false);\n  };\n\n  useImperativeHandle(ref, () => ({\n    start,\n    stop,\n    reset,\n    success\n  }));\n\n  const renderSvg = () => {\n    switch (svgStatus) {\n      case 'start':\n        return <use href=\"#start\" transform=\"scale(2,2)\" />;\n      case 'stop':\n        return <use href=\"#stop\" transform=\"scale(2,2)\" />;\n      case 'pause':\n        return <use href=\"#pause\" transform=\"scale(2,2)\" />;\n      default:\n        return <use href=\"#stop\" transform=\"scale(2,2)\" />;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <span id=\"timer\">{(centiSecond / 100).toFixed(1)}</span>\n      <svg width=\"15\" height=\"20\" style={{ float: 'left' }}>\n        {renderSvg()}\n      </svg>\n    </React.Fragment>\n  );\n};\n\nexport default forwardRef(Timer);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/TutorialManager.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":9,"column":1,"nodeType":"ExportNamedDeclaration","endLine":31,"endColumn":4},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":10,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":14,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":14,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[496,512],"text":"(tutorial.display != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[496,512],"text":"(tutorial.display ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[496,512],"text":"(Boolean(tutorial.display))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":35,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[702,719],"text":"(tutorial.display == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[703,719],"text":"(tutorial.display ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[702,719],"text":"(!Boolean(tutorial.display))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TutorialManager.tsx\nimport type React from 'react';\nimport { memo } from 'react';\n\nimport { type Tutorial } from '../types/Types';\n\nimport { Chord } from './Chord';\n\nexport const TutorialManager: React.FC<{tutorial:Tutorial}> = memo(({tutorial}) => {\n    return (tutorial &&\n        <div className=\"tutorial-component\" data-testid=\"tutorial-component\">\n            <pre className=\"tutorial-prompt\">{tutorial.prompt}</pre>\n            <div className=\"chord-display-container\">\n                {tutorial.display &&\n                    <Chord\n                        key={tutorial.phrase}\n                        displayChar={tutorial.display}\n                    />\n                }\n                {!tutorial.display &&\n                    tutorial.phrase.split('').map((character, index) => (\n                        <Chord\n                            key={index}\n                            displayChar={character}\n                        />\n                    ))\n                }\n            </div>\n        </div>\n    );\n});\n\nTutorialManager.displayName = 'TutorialManager';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/WpmTable.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":12,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":58,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":17,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":17,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[547,557],"text":"acc[char] == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":60,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":60,"endColumn":15}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/WpmTable.tsx\r\nimport type React from 'react';\nimport { useMemo } from 'react';\n\r\nimport { type CharWPM } from '../types/TerminalTypes';\r\n\r\ninterface WpmTableProps {\r\n  wpms: ReadonlyArray<CharWPM>;\r\n  name?: string;\r\n}\r\n\r\nexport const WpmTable: React.FC<WpmTableProps> = ({ wpms, name = \"slowest-characters\" }) => {\r\n  const groupedAndSortedWpms = useMemo(() => {\r\n    // Group by character\r\n    const grouped = wpms.reduce((acc, curr) => {\r\n      const char = curr.character.replace(\"\\r\", \"\\\\r\").replace(\" \", \"\\\\s\");\r\n      if (!acc[char]) {\r\n        acc[char] = { character: char, wpm: curr.wpm, count: 1 };\r\n      } else {\r\n        acc[char].wpm += curr.wpm;\r\n        acc[char].count += 1;\r\n      }\r\n      return acc;\r\n    }, {} as Record<string, { character: string, wpm: number, count: number }>);\r\n\r\n    // Calculate average WPM for each character\r\n    const averages = Object.values(grouped).map(item => ({\r\n      character: item.character,\r\n      wpm: item.wpm / item.count\r\n    }));\r\n\r\n    // Sort by slowest (lowest WPM) first\r\n    averages.sort((a, b) => a.wpm - b.wpm);\r\n\r\n    // Take top 5\r\n    return averages.slice(0, 5);\r\n  }, [wpms]);\r\n\r\n  return (\r\n    <table className=\"wpm-table\">\r\n      <thead>\r\n        <tr><th colSpan={2}>{name}</th></tr>\r\n        <tr>\r\n          <th>Character</th>\r\n          <th>Avg WPM</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {groupedAndSortedWpms.map((wpm, index) => (\r\n          <tr key={index} className=\"wpm-table-row\">\r\n            <td>{wpm.character}</td>\r\n            <td className=\"number\">{wpm.wpm.toFixed(0)}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default WpmTable;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/components/XtermAdapterConfig.ts","messages":[{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":1,"column":34,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":1,"endColumn":73},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":1,"column":76,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":1,"endColumn":123}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export const XtermAdapterConfig: import(\"@xterm/xterm\").ITerminalOptions | import(\"@xterm/xterm\").ITerminalInitOnlyOptions = {\n      fontFamily: '\"Fira Code\", Menlo, \"DejaVu Sans Mono\", \"Lucida Console\", monospace',\n      cursorBlink: true,\n      cursorStyle: 'block',\n      cursorInactiveStyle: 'outline',\n      rows: 50,\n      theme: {\n        foreground: 'white',\n        background: '#0007',\n        cursor: 'white',\n        cursorAccent: 'yellow',\n        selectionForeground: 'gray',\n        selectionBackground: 'black',\n        black: '#0007',\n        red: '#ff0000',\n        green: '#00ff00',\n        yellow: '#ffff00',\n        blue: '#4444ff',\n        magenta: '#ff00ff',\n        cyan: '#00ffff',\n        white: '#ffffff',\n        brightBlack: '#808080',\n        brightRed: '#ff0000',\n        brightGreen: '#00ff00',\n        brightYellow: '#ffff00',\n        brightBlue: '#66aaff',\n        brightMagenta: '#ff00ff',\n        brightCyan: '#00ffff',\n        brightWhite: '#ffffff'\n      }\n    }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/constants/terminal.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/contexts/ActivityMediatorContext.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":7,"column":1,"nodeType":"ExportNamedDeclaration","endLine":10,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":14,"column":46,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":14,"endColumn":48},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":16,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":16,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[546,554],"text":"context == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":22,"column":82,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":36,"endColumn":2}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/contexts/ActivityMediatorContext.tsx\nimport type React from 'react';\nimport { createContext, useContext, useState } from 'react';\n\nimport { ActivityType } from '../types/Types';\n\nexport interface IActivityMediatorContext {\n    currentActivity: ActivityType;\n    setCurrentActivity: React.Dispatch<React.SetStateAction<ActivityType>>;\n}\n\nconst ActivityMediatorContext = createContext<IActivityMediatorContext | null>(null);\n\nexport const useActivityMediatorContext = () => {\n    const context = useContext(ActivityMediatorContext);\n    if (!context) {\n        throw new Error('useActivityMediatorContext must be used within an ActivityMediatorProvider');\n    }\n    return context;\n};\n\nexport const ActivityMediatorProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n\n    const [currentActivity, setCurrentActivity] = useState<ActivityType>(ActivityType.NORMAL);\n\n    const value: IActivityMediatorContext = {\n        currentActivity,\n        setCurrentActivity\n    };\n\n    return (\n        <ActivityMediatorContext.Provider value={value}>\n            {children}\n        </ActivityMediatorContext.Provider>\n    );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/contexts/AppContext.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":20,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":35},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":22,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":22,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[666,674],"text":"context == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":28,"column":69,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":45,"endColumn":2}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/contexts/AppContext.tsx\nimport type React from 'react';\nimport { createContext, useContext, useState } from 'react';\n\nimport { type ActivityType, type OutputElement } from '../types/Types';\n\nimport { useActivityMediatorContext } from './ActivityMediatorContext';\n\ninterface AppContextType {\n  currentActivity: ActivityType;\n  isLoggedIn: boolean;\n  setIsLoggedIn: (isLoggedIn: boolean) => void;\n  userName: string | null;\n  setUserName: (userName: string | null) => void;\n  outputElements: OutputElement[];\n}\n\nconst AppContext = createContext<AppContextType | null>(null);\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport const AppProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userName, setUserName] = useState<string | null>(null);\n  const [outputElements] = useState<OutputElement[]>([]);\n\n  const { currentActivity } = useActivityMediatorContext();\n\n  const value: AppContextType = {\n    currentActivity,\n    isLoggedIn,\n    setIsLoggedIn,\n    userName,\n    setUserName,\n    outputElements,\n  };\n\n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/contexts/CommandContext.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":39,"column":37,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":39,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":41,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":41,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1300,1308],"text":"context == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/contexts/CommandContext.tsx\nimport type React from 'react';\nimport { createContext, useContext } from 'react';\n\nimport { type IHandTermWrapperMethods } from '../components/HandTermWrapper';\nimport { type IAuthProps } from '../hooks/useAuth';\nimport { type OutputElement, type ParsedCommand, type ParsedLocation } from '../types/Types';\n\nexport interface ICommandResponse {\n  status: number;\n  message: string;\n  body?: string | null;\n  sensitive?: boolean; // Flag to indicate if the command response contains sensitive data\n}\n\nexport interface ICommand {\n  name: string;\n  description: string;\n  switches?: Record<string, string>;\n  execute: (\n    context: ICommandContext,\n    parsedCommand: ParsedCommand,\n  ) => Promise<ICommandResponse>;\n}\n\nexport interface ICommandContext {\n  executeCommand: (command: string) => Promise<void>;\n  commandHistory: string[];\n  addToCommandHistory: (command: string) => void;\n  output: OutputElement[];\n  appendToOutput: (output: OutputElement) => void;\n  handTermRef: React.RefObject<IHandTermWrapperMethods>;\n  auth: IAuthProps;\n  updateLocation: (options: ParsedLocation) => void;\n}\n\nexport const CommandContext = createContext<ICommandContext | null>(null);\n\nexport const useCommandContext = () => {\n  const context = useContext(CommandContext);\n  if (!context) {\n    throw new Error('useCommandContext must be used within a CommandProvider');\n  }\n  return context;\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/contexts/CommandProvider.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":21,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":53,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_executeCommand` must not have a leading underscore.","line":27,"column":21,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":27,"endColumn":36}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/contexts/CommandProvider.tsx\nimport type React from 'react';\n\nimport { type ParsedCommand } from 'src/types/Types';\nimport { parseCommand } from 'src/utils/commandUtils';\nimport { navigate } from 'src/utils/navigationUtils';\n\nimport { type IHandTermWrapperMethods } from '../components/HandTermWrapper';\nimport { type IAuthProps } from '../hooks/useAuth';\nimport { useCommand } from '../hooks/useCommand';\n\nimport { CommandContext } from './CommandContext';\n\n\ninterface CommandProviderProps {\n  children: React.ReactNode;\n  handTermRef: React.RefObject<IHandTermWrapperMethods>;\n  auth: IAuthProps;\n}\n\nexport const CommandProvider: React.FC<CommandProviderProps> = ({ children, handTermRef, auth }) => {\n  const {\n    commandHistory,\n    addToCommandHistory,\n    output,\n    appendToOutput,\n    executeCommand: _executeCommand\n  } = useCommand();\n\n\n  const executeCommand = async (command: string) => {\n    const parsedCommand: ParsedCommand = parseCommand(command);\n    await _executeCommand(parsedCommand);\n  };\n\n  const contextValue = {\n    commandHistory,\n    addToCommandHistory,\n    output,\n    appendToOutput,\n    handTermRef,\n    auth,\n    updateLocation: navigate,\n    executeCommand\n  };\n\n  return (\n    <CommandContext.Provider\n      value={contextValue}>\n      {children}\n    </CommandContext.Provider>\n  );\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/e2e/helpers/exposeSignals.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":6,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":6,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { commandLineSignal } from '../../signals/commandLineSignals';\n\n/**\n * Exposes signals to the window object for e2e testing\n */\nexport function exposeSignals() {\n    (window as { commandLineSignal: typeof commandLineSignal }).commandLineSignal = commandLineSignal;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/e2e/page-objects/TerminalPage.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":23,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":35,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":35,"endColumn":20},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":45,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":45,"endColumn":17},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":63,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":12,"nodeType":"AwaitExpression","messageId":"conditionErrorNullableString","endLine":74,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2001,2032],"text":"((await this.output.textContent()) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2001,2032],"text":"((await this.output.textContent()) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2001,2032],"text":"(Boolean((await this.output.textContent())))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":90,"column":12,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":90,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2550,2561],"text":"(commandLine.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2550,2561],"text":"(commandLine !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2550,2561],"text":"(Boolean(commandLine))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":97,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":97,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":105,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":105,"endColumn":25},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":117,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":117,"endColumn":22},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":124,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":124,"endColumn":24},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":132,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":132,"endColumn":14},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":139,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":139,"endColumn":18}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type Page, type Locator, expect } from '@playwright/test';\n\nimport { TERMINAL_CONSTANTS } from 'src/constants/terminal';\n\nexport class TerminalPage {\n  readonly page: Page;\n  readonly terminal: Locator;\n  readonly output: Locator;\n  readonly tutorialMode: Locator;\n  readonly gameMode: Locator;\n  readonly nextChars: Locator;\n  private readonly prompt = TERMINAL_CONSTANTS.PROMPT;\n\n  constructor(page: Page) {\n    this.page = page;\n    this.terminal = page.locator('#xtermRef');\n    this.output = page.locator('#output-container');\n    this.tutorialMode = page.locator('.tutorial-component');\n    this.gameMode = page.locator('#terminal-game');\n    this.nextChars = page.locator('pre#next-chars');\n  }\n\n  async goto() {\n    await this.page.goto('/');\n    // Wait for the signal to be exposed\n    await this.page.waitForFunction(() => 'commandLineSignal' in window);\n    await this.waitForTerminal();\n    await this.waitForPrompt();\n  }\n\n  /**\n   * Types a command into the terminal\n   * @param command The command to type\n   */\n  async typeCommand(command: string) {\n    await this.waitForTerminal();\n    await this.terminal.click();\n    await this.page.keyboard.type(command);\n  }\n\n  /**\n   * Types a sequence of keys without executing a command\n   * @param keys The keys to type\n   */\n  async typeKeys(keys: string) {\n    await this.waitForTerminal();\n    await this.terminal.click();\n    await this.page.keyboard.type(keys);\n  }\n\n  /**\n   * Presses the Enter key\n   */\n  async pressEnter() {\n    await this.waitForTerminal();\n    await this.page.keyboard.press('Enter');\n  }\n\n  /**\n   * Executes a command by typing it and pressing Enter\n   * @param command The command to execute\n   */\n  async executeCommand(command: string) {\n    await this.waitForTerminal();\n    await this.typeCommand(command);\n    await this.pressEnter();\n  }\n\n  /**\n   * Gets the current terminal output\n   * @returns The text content of the output container\n   */\n  async getOutput(): Promise<string> {\n    return await this.output.textContent() || '';\n  }\n\n  /**\n   * Gets the current command line text (without the prompt)\n   * @returns The current command line text\n   */\n  async getCurrentCommand(): Promise<string> {\n    // Wait for the signal to be available\n    await this.page.waitForFunction(() => 'commandLineSignal' in window);\n\n    // Get the value from commandLineSignal\n    const commandLine = await this.page.evaluate(() => {\n      return (window as unknown as { commandLineSignal: { value: string } }).commandLineSignal.value;\n    });\n\n    return commandLine || '';\n  }\n\n  /**\n   * Waits for specific text to appear in the output\n   * @param text The text to wait for\n   */\n  async waitForOutput(text: string) {\n    await this.output.getByText(text, { exact: false }).waitFor();\n  }\n\n  /**\n   * Waits for specific text to appear in the next chars display\n   * @param text The text to wait for\n   */\n  async waitForNextChars(text: string) {\n    // First wait for the element to exist\n    await this.nextChars.waitFor({ state: 'attached' });\n\n    // Then wait for the specific text\n    await this.nextChars.waitFor({ state: 'visible' });\n    await expect(this.nextChars).toHaveText(text, { timeout: 10000 });\n  }\n\n  /**\n   * Waits for the prompt to appear, indicating the terminal is ready\n   */\n  async waitForPrompt() {\n    await this.terminal.getByText(this.prompt).last().waitFor();\n  }\n\n  /**\n   * Waits for the terminal to be ready\n   */\n  async waitForTerminal() {\n    await this.terminal.waitFor({ state: 'attached' });\n    await this.terminal.waitFor({ state: 'visible' });\n  }\n\n  /**\n   * Focuses the terminal\n   */\n  async focus() {\n    await this.terminal.click();\n  }\n\n  /**\n   * Clears the current command line using Ctrl+C\n   */\n  async clearLine() {\n    await this.terminal.click();\n    await this.page.keyboard.press('Control+C');\n    await this.waitForPrompt();\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/e2e/scenarios/activitySwitchingScenarios.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/e2e/testDescriptionParser.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":5,"column":59,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":61}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createLogger } from 'src/utils/Logger';\n\nconst logger = createLogger({ prefix: 'TestDescriptionParser' });\n\nexport const parseTestDescription = (description: string) => {\n  logger.info('Parsing test description:', description);\n  return description;\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/e2e/tests/tutorial.spec.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'page' is defined but never used. Allowed unused args must match /^_[a-zA-Z][a-zA-Z0-9]*$/u.","line":16,"column":92,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":96}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { test, expect } from '@playwright/test';\n\nimport { TerminalPage } from '../page-objects/TerminalPage';\n\nlet terminalPage: TerminalPage;\n\ntest.beforeEach(async ({ page }) => {\n  terminalPage = new TerminalPage(page);\n\n  // Clear localStorage using a command\n  await terminalPage.executeCommand('clear');\n\n  await terminalPage.goto();\n});\n\ntest('should progress from tutorial to game mode after completing initial steps', async ({ page }) => {\n  // Given the user is in tutorial mode\n  await expect(terminalPage.tutorialMode).toBeVisible();\n\n  // When the user types \"Enter\"\n  await terminalPage.pressEnter();\n  await terminalPage.waitForPrompt();\n\n  // Type \"fdsa\" first time\n  await terminalPage.typeKeys('fdsa');\n  await terminalPage.pressEnter();\n  await terminalPage.waitForPrompt();\n\n  // Type \"fdsa\" second time with spaces\n  await terminalPage.typeKeys('f d s a');\n  await terminalPage.pressEnter();\n  await terminalPage.waitForPrompt();\n\n  // And the user types \"jkl;\"\n  await terminalPage.typeKeys('jkl;');\n  await terminalPage.pressEnter();\n  await terminalPage.waitForPrompt();\n\n  // Then the Activity should change from Tutorial to Game\n  await expect(terminalPage.tutorialMode).not.toBeVisible({ timeout: 10000 });\n  await expect(terminalPage.gameMode).toBeVisible({ timeout: 10000 });\n\n  // Wait for and verify the game phrase\n  await terminalPage.waitForNextChars('all sad lads ask dad; alas fads fall');\n\n  // When the user types \"all sad lads ask dad; alas fads fall\"\n  await terminalPage.typeKeys('all sad lads ask dad; alas fads fall');\n  await terminalPage.pressEnter();\n  await terminalPage.waitForPrompt();\n\n  // Then the user is returned to the tutorial\n  await expect(terminalPage.gameMode).not.toBeVisible({ timeout: 10000 });\n  await expect(terminalPage.tutorialMode).toBeVisible({ timeout: 10000 });\n});\n\ntest('should start in tutorial mode with clean state', async () => {\n  // This test will start fresh because of new context\n  await expect(terminalPage.tutorialMode).toBeVisible();\n  await expect(terminalPage.gameMode).not.toBeVisible();\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/Game.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ScrollingTextLayer` must match one of the following formats: camelCase","line":15,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":26},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":26,"column":1,"nodeType":"ExportNamedDeclaration","endLine":29,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":31,"column":1,"nodeType":"ExportNamedDeclaration","endLine":36,"endColumn":2},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":45,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":342,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":84,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":84,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3331,3358],"text":"animationFrameIndex.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3331,3358],"text":"animationFrameIndex.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3331,3358],"text":"Boolean(animationFrameIndex.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":91,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":98,"endColumn":8,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3539,3539],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":102,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":102,"endColumn":36,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3780,3807],"text":"zombie4DeathTimeout.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_context` must not have a leading underscore.","line":116,"column":60,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":116,"endColumn":94},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":123,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":123,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4503,4518],"text":"(heroRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":123,"column":28,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":123,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":127,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":127,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4610,4628],"text":"(zombie4Ref.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":127,"column":31,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":127,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":208,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":208,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7217,7242],"text":"heroRunTimeoutRef.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[7217,7242],"text":"heroRunTimeoutRef.current ?? 0"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7217,7242],"text":"Boolean(heroRunTimeoutRef.current)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":225,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":225,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[7669,7686],"text":"commandLine.value.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[7669,7686],"text":"commandLine.value !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7669,7686],"text":"Boolean(commandLine.value)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":230,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":230,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7848,7861],"text":"canvasContext != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":245,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":245,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8274,8287],"text":"(setLevelValue != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8274,8287],"text":"(setLevelValue ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8274,8287],"text":"(Boolean(setLevelValue))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":246,"column":21,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":246,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8367,8380],"text":"(setLevelValue != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[8367,8380],"text":"(setLevelValue ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8367,8380],"text":"(Boolean(setLevelValue))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":253,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":253,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8587,8594],"text":"context != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":269,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":269,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9075,9081],"text":"canvas != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":275,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":275,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9175,9202],"text":"zombie4DeathTimeout.current != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":282,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":282,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[9341,9348],"text":"context != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react/jsx-no-useless-fragment","severity":2,"message":"Fragments should contain more than one child - otherwise, there’s no need for a Fragment at all.","line":298,"column":5,"nodeType":"JSXFragment","messageId":"NeedsMoreChildren","endLine":340,"endColumn":8},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":344,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":344,"endColumn":15},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `forwardRef`. Check if you meant to write `import {forwardRef} from 'react'` instead.","line":344,"column":16,"nodeType":"MemberExpression","endLine":344,"endColumn":32}],"suppressedMessages":[],"errorCount":24,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// TerminalGame.ts\nimport React, { useState, useEffect, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\n\nimport confetti from 'canvas-confetti';\n\nimport { useComputed, useSignalEffect } from \"@preact/signals-react\";\n\nimport { commandLineSignal } from \"src/signals/commandLineSignals\";\nimport { isInGameModeSignal } from 'src/signals/gameSignals';\nimport { createLogger, LogLevel } from 'src/utils/Logger';\n\nimport { Hero } from './Hero';\nimport { layers, getLevelCount } from './Level';\nimport { type IParallaxLayer, ParallaxLayer } from './ParallaxLayer';\nimport ScrollingTextLayer from './ScrollingTextLayer';\nimport { type Sprite } from './sprites/Sprite';\nimport { type Action, type ActionType } from './types/ActionTypes';\nimport { type SpritePosition } from './types/Position';\nimport { Zombie4 } from './Zombie4';\n\nconst logger = createLogger({\n  prefix: 'Game',\n  level: LogLevel.DEBUG\n});\n\nexport interface IGameProps {\n  canvasHeight: number\n  canvasWidth: number\n}\n\nexport interface IGameHandle {\n  startGame: (tutorialGroup?: string) => void;\n  completeGame: () => void;\n  resetGame: () => void;\n  levelUp: (setLevelValue?: number | null) => void;\n}\n\ninterface ICharacterRefMethods {\n  getCurrentSprite: () => Sprite | null;\n  getActions: () => Record<ActionType, Action>;\n  positionRef: SpritePosition;\n  draw: (context: CanvasRenderingContext2D, position: SpritePosition) => number;\n}\n\nconst Game: React.ForwardRefRenderFunction<IGameHandle, IGameProps> = ((props, ref) => {\n  const {\n    canvasHeight,\n    canvasWidth,\n  } = props;\n\n  // Use useMemo to memoize static objects\n  const zombie4StartPosition = useMemo(() => ({ leftX: 0, topY: 0 }), []);\n  const heroStartPosition = useMemo(() => ({ leftX: 165, topY: 29 }), []);\n  const heroXPercent = 0.23;\n\n  const zombie4PositionRef = useRef<SpritePosition>(zombie4StartPosition);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const heroRef = useRef<ICharacterRefMethods>(null);\n  const zombie4Ref = useRef<ICharacterRefMethods>(null);\n  const animationFrameIndex = useRef<number | undefined>(undefined);\n  const zombie4DeathTimeout = useRef<NodeJS.Timeout | null>(null);\n  const heroRunTimeoutRef = useRef<number | null>(null);\n\n  const heroPositionRef = useRef<SpritePosition>(heroStartPosition);\n  const [heroPosition, setHeroPosition] = useState<SpritePosition>({ leftX: canvasWidth * heroXPercent, topY: 30 });\n\n  const [currentLevel, setCurrentLevel] = useState(1);\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\n  const [backgroundOffsetX, setBackgroundOffsetX] = useState(0);\n  const [isPhraseComplete, setIsPhraseComplete] = useState(false);\n  const [isTextScrolling, setIsTextScrolling] = useState(false);\n  const [heroAction, setHeroAction] = useState<ActionType>('Idle');\n  const [zombie4Action, setZombie4Action] = useState<ActionType>('Walk');\n  const textToScroll = \"TERMINAL VELOCITY!\";\n  const [layersState, setLayersState] = useState<IParallaxLayer[]>(layers[0]);\n\n  const commandLine = useComputed(() => commandLineSignal.value);\n  const isInGameMode = useComputed(() => isInGameModeSignal.value).value;\n\n  // Memoize getLevel to prevent unnecessary re-renders\n  const getLevel = useCallback(() => currentLevel, [currentLevel]);\n\n  const stopAnimationLoop = useCallback(() => {\n    if (animationFrameIndex.current) {\n      cancelAnimationFrame(animationFrameIndex.current);\n      animationFrameIndex.current = undefined;\n    }\n  }, []);\n\n  const triggerConfettiCannon = useCallback(() => {\n    confetti({\n      zIndex: 3,\n      angle: 160,\n      spread: 45,\n      startVelocity: 45,\n      particleCount: 150,\n      origin: { x: 0.99, y: 0.8 }\n    });\n  }, []);\n\n  const setZombie4ToDeathThenResetPosition = useCallback(() => {\n    if (zombie4DeathTimeout.current) {\n      clearTimeout(zombie4DeathTimeout.current);\n      zombie4DeathTimeout.current = null;\n    }\n\n    setZombie4Action('Death');\n    zombie4DeathTimeout.current = setTimeout(() => {\n      setZombie4Action('Walk');\n      zombie4PositionRef.current = zombie4StartPosition;\n      setIsPhraseComplete(false);\n      zombie4DeathTimeout.current = null;\n    }, 3000);\n  }, [zombie4StartPosition]);\n\n  const updateCharacterAndBackgroundPostion = useCallback((_context: CanvasRenderingContext2D): number => {\n    const canvasCenterX = canvasWidth * heroXPercent;\n    const characterReachThreshold = canvasCenterX;\n\n    _context.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    let heroDx = 0;\n    if (heroRef.current && _context) {\n      heroDx = heroRef.current.draw(_context, heroPosition);\n    }\n\n    if (zombie4Ref.current && _context) {\n      const zombie4Dx = zombie4Ref.current.draw(_context, zombie4PositionRef.current);\n      zombie4PositionRef.current = {\n        ...zombie4PositionRef.current,\n        leftX: zombie4PositionRef.current.leftX + zombie4Dx - heroDx\n      };\n    }\n\n    if (heroDx !== 0) {\n      setBackgroundOffsetX(prev => prev + heroDx);\n\n      if (heroPosition.leftX >= characterReachThreshold) {\n        setHeroPosition(prev => ({ ...prev, leftX: characterReachThreshold }));\n      }\n\n      const newZombie4PositionX = zombie4PositionRef.current.leftX - heroDx;\n      zombie4PositionRef.current = {\n        ...zombie4PositionRef.current,\n        leftX: newZombie4PositionX\n      };\n    }\n    return heroDx;\n  }, [canvasWidth, canvasHeight, heroPosition]);\n\n  const checkProximityAndSetAction = useCallback(() => {\n    const ATTACK_THRESHOLD = 100;\n    const distance = heroPosition.leftX - zombie4PositionRef.current.leftX;\n    // console.log(\"Distance:\", Math.round(distance / 5) * 5, heroAction, zombie4Action);\n\n    if (-20 < distance && distance < ATTACK_THRESHOLD) {\n      setZombie4Action('Attack');\n      if (distance < 50) {\n        setHeroAction('Hurt');\n      }\n      if (distance < 30) {\n        setHeroAction('Death');\n      }\n    } else {\n      if (zombie4Action === 'Attack') {\n        setZombie4Action('Walk');\n      }\n    }\n  }, [heroPosition, zombie4Action, setHeroAction]);\n\n  const toggleScrollingText = useCallback((show: boolean | null = null) => {\n    if (show === null) show = !isTextScrolling;\n    setIsTextScrolling(show);\n  }, [isTextScrolling]);\n\n  const drawScrollingText = useCallback(() => {\n    toggleScrollingText(true);\n    setTimeout(() => {\n      toggleScrollingText(false);\n    }, 3000);\n  }, [toggleScrollingText]);\n\n  const startAnimationLoop = useCallback((context: CanvasRenderingContext2D) => {\n    const frameDelay = 150;\n    let lastFrameTime = performance.now();\n\n    const loop = () => {\n      const now = performance.now();\n      const deltaTime = now - lastFrameTime;\n\n      if (deltaTime >= frameDelay) {\n        lastFrameTime = now - (deltaTime % frameDelay);\n\n        if (isPhraseComplete) {\n          drawScrollingText();\n        }\n\n        updateCharacterAndBackgroundPostion(context);\n        checkProximityAndSetAction();\n      }\n      animationFrameIndex.current = requestAnimationFrame(loop);\n    };\n\n    animationFrameIndex.current = requestAnimationFrame(loop);\n  }, [isPhraseComplete, drawScrollingText, updateCharacterAndBackgroundPostion, checkProximityAndSetAction]);\n\n  const setHeroRunAction = useCallback(() => {\n    if (heroRunTimeoutRef.current) {\n      clearTimeout(heroRunTimeoutRef.current);\n      heroRunTimeoutRef.current = null;\n    }\n\n    setHeroAction('Run');\n    heroRunTimeoutRef.current = window.setTimeout(() => {\n      setHeroAction('Idle');\n      heroRunTimeoutRef.current = null;\n    }, 800);\n  }, [setHeroAction]);\n\n  const handleCommandLineChange = useCallback(() => {\n    setHeroRunAction();\n  }, [setHeroRunAction]);\n\n  useSignalEffect(() => {\n    if (commandLine.value) handleCommandLineChange();\n  });\n\n  const setupCanvas = useCallback((canvas: HTMLCanvasElement) => {\n    const canvasContext = canvas.getContext('2d');\n    if (canvasContext) {\n      setContext(canvasContext);\n    } else {\n      logger.error(\"Failed to get canvas context.\");\n    }\n  }, []);\n\n  const setLevel = useCallback((newLevel: number) => {\n    const newLayers = layers[newLevel - 1];\n    setCurrentLevel(newLevel);\n    setLayersState(newLayers);\n  }, []);\n\n  const levelUp = useCallback((setLevelValue: number | null = null) => {\n    const levelCount = getLevelCount();\n    if (setLevelValue && setLevelValue > levelCount) setLevelValue = levelCount;\n    let nextLevel = setLevelValue || getLevel() + 1;\n    if (nextLevel > levelCount) nextLevel = 0;\n    if (nextLevel < 1) nextLevel = 1;\n    setLevel(nextLevel);\n  }, [setLevel, getLevel]);\n\n  const startGame = useCallback(() => {\n    if (context) {\n      startAnimationLoop(context);\n    }\n    // Reset game state here if needed\n    setIsPhraseComplete(false);\n    // Add any other necessary game start logic\n  }, [context, startAnimationLoop]);\n\n  const completeGame = useCallback(() => {\n    setZombie4ToDeathThenResetPosition();\n    triggerConfettiCannon();\n    setIsPhraseComplete(true);\n  }, [setZombie4ToDeathThenResetPosition, triggerConfettiCannon]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      setupCanvas(canvas);\n    }\n\n    return () => {\n      stopAnimationLoop();\n      if (zombie4DeathTimeout.current) {\n        clearTimeout(zombie4DeathTimeout.current);\n      }\n    };\n  }, [setupCanvas, stopAnimationLoop]);\n\n  useEffect(() => {\n    if (context) {\n      startAnimationLoop(context);\n    }\n  }, [context, startAnimationLoop]);\n\n  useImperativeHandle(ref, () => ({\n    startGame,\n    completeGame,\n    resetGame: () => {\n      zombie4PositionRef.current = zombie4StartPosition;\n      setIsPhraseComplete(false);\n    },\n    levelUp,\n  }), [startGame, completeGame, levelUp, zombie4StartPosition]);\n\n  return (\n    <>\n      {isInGameMode && (\n        <div\n          id=\"terminal-game\"\n          style={{ position: \"relative\", height: canvasHeight }}\n        >\n          <div className=\"parallax-background\">\n            {isTextScrolling && (\n              <ScrollingTextLayer\n                text={textToScroll}\n                canvasHeight={canvasHeight}\n              />\n            )}\n            {layersState.map((layer, index) => (\n              <ParallaxLayer\n                key={index}\n                layer={layer}\n                offset={backgroundOffsetX}\n                canvasHeight={canvasHeight}\n              />\n            ))}\n          </div>\n          <canvas\n            style={{ position: \"absolute\", top: 0, left: 0, zIndex: 2 }}\n            ref={canvasRef}\n            width={canvasWidth}\n            height={canvasHeight}\n          />\n          <Hero\n            ref={heroRef}\n            positionRef={heroPositionRef}\n            currentActionType={heroAction}\n            scale={1.95}\n          />\n          <Zombie4\n            ref={zombie4Ref}\n            positionRef={zombie4PositionRef}\n            currentActionType={zombie4Action}\n            scale={1.90}\n          />\n        </div>\n      )}\n    </>\n  );\n});\n\nexport default React.forwardRef(Game);\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/GameClock.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":8},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":19,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":26,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":31,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":10}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export class GameClock {\n  private startTime: number;\n  private currentTime: number;\n  private running: boolean;\n\n  constructor() {\n    this.startTime = 0;\n    this.currentTime = 0;\n    this.running = false;\n  }\n\n  start() {\n    if (!this.running) {\n      this.startTime = Date.now();\n      this.running = true;\n    }\n  }\n\n  stop() {\n    if (this.running) {\n      this.currentTime = this.getTime();\n      this.running = false;\n    }\n  }\n\n  reset() {\n    this.startTime = Date.now();\n    this.currentTime = 0;\n  }\n\n  getTime() {\n    if (this.running) {\n      return Date.now() - this.startTime;\n    }\n    return this.currentTime;\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/Hero.tsx","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":10,"column":1,"nodeType":"ExportNamedDeclaration","endLine":29,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Hero.tsx\n\nimport { forwardRef, useImperativeHandle } from \"react\";\n\nimport { type ICharacterProps } from \"./ICharacterProps\";\nimport { HeroActions } from \"./types/ActionTypes\";\nimport { useBaseCharacter } from \"./useBaseCharacter\";\n\n\nexport const Hero = forwardRef((props: ICharacterProps, ref) => {\n\n  // Use the custom hook for shared logic with BaseCharacter\n  const { draw } = useBaseCharacter({\n    actions: HeroActions,\n    currentActionType: props.currentActionType, // Replace with actual default action\n    name: 'Hero',\n    scale: props.scale,\n    xOffset: 0,\n    positionRef: props.positionRef\n  });\n\n  useImperativeHandle(ref, () => ({\n    draw: (context: CanvasRenderingContext2D) => {\n      return draw(context, props.positionRef, props.scale);\n    }\n  }));\n\n  return null;\n});\n\nHero.displayName = 'Hero';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/ICharacterProps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/Level.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/ParallaxLayer.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":9,"column":105,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":26,"endColumn":2}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from \"react\";\n\nexport interface IParallaxLayer {\n  imageSrc: string;\n  scale: number; // This is a multiplier (e.g., 0.8 for 80%)\n  movementRate: number;\n}\n\nexport const ParallaxLayer: React.FC<{ layer: IParallaxLayer; offset: number; canvasHeight: number }> = ({ layer, offset, canvasHeight }) => {\n  // Calculate the height of the background as a percentage of the canvas height\n  const backgroundHeight = canvasHeight * layer.scale; // Now scale is a direct multiplier\n  const top = canvasHeight - (canvasHeight * layer.scale)\n  const layerStyle: React.CSSProperties = {\n    backgroundImage: `url(${layer.imageSrc})`,\n    backgroundPositionX: -offset * layer.movementRate,\n    backgroundRepeat: 'repeat-x',\n    backgroundSize: `auto ${backgroundHeight}px`, // Use pixel value for height to match the canvasHeight scaling\n    willChange: 'transform',\n    height: `${backgroundHeight}px`, // Use pixel value for the height\n    width: '100%',\n    position: 'absolute',\n    top: top, // Align to the top of the container\n  };\n\n  return <div className=\"parallax-layer\" style={layerStyle} />;\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/ScrollingTextLayer.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":9,"column":63,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":27,"endColumn":2},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":29,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":29,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ScrollingTextLayer.tsx\nimport type React from 'react';\n\ninterface ScrollingTextLayerProps {\n    text: string;\n    canvasHeight: number;\n}\n\nconst ScrollingTextLayer: React.FC<ScrollingTextLayerProps> = (props: ScrollingTextLayerProps) => {\n    const textBottom = 60 - props.canvasHeight;\n    return (\n        <div\n            className=\"scrolling-text-container\"\n            style={{\n                position: 'absolute',\n                bottom: textBottom,\n                height: props.canvasHeight,\n                width: '100%',\n                zIndex: 1,\n                overflow: 'hidden'\n            }}>\n            <div className=\"scrolling-text\" style={{ whiteSpace: 'nowrap' }}>\n                {props.text}\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollingTextLayer;\n\n// function getTextHeight(fontFamily: string, fontSize: string, text: string): number {\n//   // Create a temporary span element\n//   const span = document.createElement('span');\n//   span.style.fontFamily = fontFamily;\n//   span.style.fontSize = fontSize;\n//   span.style.position = 'absolute'; // Position it out of the normal document flow\n//   span.style.whiteSpace = 'nowrap'; // Prevent line breaks\n//   span.style.visibility = 'hidden'; // Make it invisible\n//   span.textContent = text;\n\n//   // Append the span to the body and calculate the height\n//   document.body.appendChild(span);\n//   const textHeight = span.getBoundingClientRect().height;\n\n//   // Clean up and remove the temporary span\n//   document.body.removeChild(span);\n\n//   return textHeight;\n// }","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/SpriteManagerContext.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":13},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `createContext`. Check if you meant to write `import {createContext} from 'react'` instead.","line":7,"column":30,"nodeType":"MemberExpression","endLine":7,"endColumn":49},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":9,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// SpriteManagerContext.tsx\nimport React from 'react';\n\nimport { type SpriteManager } from './sprites/SpriteManager';\n\n// Create a context with a default undefined value\nconst SpriteManagerContext = React.createContext<SpriteManager | undefined>(undefined);\n\nexport default SpriteManagerContext;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/TypeScriptStateMachine.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Idle` must match one of the following formats: UPPER_CASE","line":9,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":9,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Running` must match one of the following formats: UPPER_CASE","line":10,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":10,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Paused` must match one of the following formats: UPPER_CASE","line":11,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Stopped` must match one of the following formats: UPPER_CASE","line":12,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":12,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Start` must match one of the following formats: UPPER_CASE","line":17,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":17,"endColumn":8},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Pause` must match one of the following formats: UPPER_CASE","line":18,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":18,"endColumn":8},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Resume` must match one of the following formats: UPPER_CASE","line":19,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Enum Member name `Stop` must match one of the following formats: UPPER_CASE","line":20,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":20,"endColumn":7}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/*\nIn this example, we have a simple state machine for a game with states like Idle, Running, Paused, and Stopped. We define possible actions that cause state transitions, such as Start, Pause, Resume, and Stop. The StateMachine class handles these transitions and changes the current state accordingly.\n\nOf course, this is a basic example. Real-world applications might involve more complex state machines with more states, more actions, and additional logic to handle complex transitions. You can also use libraries like XState to handle complex state machines with hierarchical states, parallel states, and more.\n*/\n\n// Define the possible states as an enum\nenum State {\n  Idle,\n  Running,\n  Paused,\n  Stopped,\n}\n\n// Define the possible actions as an enum\nenum Action {\n  Start,\n  Pause,\n  Resume,\n  Stop,\n}\n\n// Define the state machine class\nclass StateMachine {\n  private currentState: State;\n\n  constructor(initialState: State) {\n    this.currentState = initialState;\n  }\n\n  // Transition function that takes an action and transitions the state accordingly\n  transition(action: Action): void {\n    switch (this.currentState) {\n      case State.Idle:\n        if (action === Action.Start) {\n          this.currentState = State.Running;\n        }\n        break;\n      case State.Running:\n        if (action === Action.Pause) {\n          this.currentState = State.Paused;\n        } else if (action === Action.Stop) {\n          this.currentState = State.Stopped;\n        }\n        break;\n      case State.Paused:\n        if (action === Action.Resume) {\n          this.currentState = State.Running;\n        } else if (action === Action.Stop) {\n          this.currentState = State.Stopped;\n        }\n        break;\n      case State.Stopped:\n        // No transitions out of Stopped state in this simple example\n        break;\n    }\n  }\n\n  // Getter for the current state\n  getState(): State {\n    return this.currentState;\n  }\n}\n\n// Usage\nconst stateMachine = new StateMachine(State.Idle);\nstateMachine.transition(Action.Start); // Transitions to Running state\nstateMachine.transition(Action.Pause); // Transitions to Paused state\nstateMachine.transition(Action.Resume); // Transitions back to Running state\nstateMachine.transition(Action.Stop); // Transitions to Stopped state","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/Zombie4.tsx","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":16,"column":1,"nodeType":"ExportNamedDeclaration","endLine":33,"endColumn":4}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { forwardRef, useImperativeHandle } from 'react';\n\nimport { type ICharacterProps } from './ICharacterProps';\nimport { Zombie4Actions } from './types/ActionTypes';\nimport { useBaseCharacter } from './useBaseCharacter';\n\n\n// * Idle - 5 frames\n// * Walk - 13 frames\n// * Attack - 15 frames\n// * Hurt - 7 frames\n// * Death - 12 frames\n// * Spawn - 10 frames\n// There are 6 animations. All frames are on a 62x62 \"canvas.\"\n\nexport const Zombie4 = forwardRef((props: ICharacterProps, ref) => {\n  const { draw } = useBaseCharacter({\n    actions: Zombie4Actions,\n    currentActionType: props.currentActionType,\n    name: 'Zombie4',\n    scale: props.scale,\n    xOffset: 77,\n    positionRef: props.positionRef\n  });\n\n  useImperativeHandle(ref, () => ({\n    draw: (context: CanvasRenderingContext2D) => {\n      return draw(context, props.positionRef, props.scale);\n    }\n  }));\n\n  return null;\n});\n\nZombie4.displayName = 'Zombie4';\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/__tests__/Game.test.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":1,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `Game` must match one of the following formats: camelCase","line":8,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":12},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":32,"column":5,"severity":2,"nodeType":null,"fix":{"range":[825,887],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from '@typescript-eslint/no-explicit-any').","line":51,"column":5,"severity":2,"nodeType":null,"fix":{"range":[1312,1374],"text":" "}}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"import React from 'react';\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\n\nimport { render, screen } from '@testing-library/react';\n\nimport { setupCanvasMock , type CanvasMock } from '../../test-utils/canvasMock';\nimport Game from '../Game';\n\n// Mock dependencies\nvi.mock('src/hooks/useReactiveLocation', () => ({\n  useReactiveLocation: () => ({\n    updateLocation: vi.fn(),\n    parseLocation: () => ({\n      activityKey: 'NORMAL',\n      contentKey: '',\n      groupKey: ''\n    })\n  })\n}));\n\nvi.mock('src/signals/gameSignals', () => ({\n  isInGameModeSignal: { value: true }\n}));\n\ndescribe('Game Component', () => {\n  // Explicitly type canvasMock and use type assertion\n  let canvasMock: CanvasMock;\n\n  beforeEach(() => {\n    // Setup canvas mock before each test using the centralized utility\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    canvasMock = setupCanvasMock() as any;\n  });\n\n  afterEach(() => {\n    // Clean up canvas mock after each test\n    canvasMock.restoreOriginalGetContext();\n    vi.restoreAllMocks();\n  });\n\n  const defaultProps = {\n    canvasHeight: 600,\n    canvasWidth: 800\n  };\n\n  it('renders without canvas context errors', () => {\n    render(<Game {...defaultProps} />);\n\n    expect(screen.getByRole('presentation')).toBeTruthy();\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    expect((canvasMock as any).mockGetContext).toHaveBeenCalledWith('2d');\n  });\n\n  it('initializes canvas with correct dimensions', () => {\n    render(<Game {...defaultProps} />);\n\n    const canvas = screen.getByRole('presentation');\n    expect(canvas).toBeTruthy();\n    expect(canvas).toHaveAttribute('width', '800');\n    expect(canvas).toHaveAttribute('height', '600');\n  });\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/characters/hero/HeroAnimations.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Run` must match one of the following formats: camelCase, UPPER_CASE","line":5,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":5,"endColumn":8},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Idle` must match one of the following formats: camelCase, UPPER_CASE","line":19,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Walk` must match one of the following formats: camelCase, UPPER_CASE","line":31,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":31,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Attack` must match one of the following formats: camelCase, UPPER_CASE","line":43,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":43,"endColumn":11},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Summersault` must match one of the following formats: camelCase, UPPER_CASE","line":55,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":55,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Hurt` must match one of the following formats: camelCase, UPPER_CASE","line":67,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":67,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Death` must match one of the following formats: camelCase, UPPER_CASE","line":78,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":78,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Jump` must match one of the following formats: camelCase, UPPER_CASE","line":92,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":92,"endColumn":9}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// HeroAnimations.ts\nimport { type SpriteAnimation } from '../../types/SpriteTypes';\n\nexport const HeroAnimations = {\n    Run: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 6,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 50, topY: 37 },\n            { leftX: 100, topY: 37 },\n            { leftX: 150, topY: 37 },\n            { leftX: 200, topY: 37 },\n            { leftX: 250, topY: 37 },\n            { leftX: 300, topY: 37 },\n        ],\n    } as SpriteAnimation,\n    Idle: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 4,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 0, topY: 0 },\n            { leftX: 50, topY: 0 },\n            { leftX: 100, topY: 0 },\n            { leftX: 150, topY: 0 },\n        ],\n    } as SpriteAnimation,\n    Walk: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 4,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 0, topY: 0 },\n            { leftX: 50, topY: 0 },\n            { leftX: 100, topY: 0 },\n            { leftX: 150, topY: 0 },\n        ],\n    } as SpriteAnimation,\n    Attack: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 4,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 0, topY: 0 },\n            { leftX: 50, topY: 0 },\n            { leftX: 100, topY: 0 },\n            { leftX: 150, topY: 0 },\n        ],\n    } as SpriteAnimation,\n    Summersault: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 4,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 200, topY: 74 },\n            { leftX: 250, topY: 74 },\n            { leftX: 300, topY: 74 },\n            { leftX: 0, topY: 106 },\n        ],\n    } as SpriteAnimation,\n    Hurt: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 3,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 150, topY: 296 },\n            { leftX: 200, topY: 296 },\n            { leftX: 250, topY: 296 },\n        ],\n    } as SpriteAnimation,\n    Death: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 6,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 300, topY: 296 },\n            { leftX: 0, topY: 333 },\n            { leftX: 50, topY: 333 },\n            { leftX: 100, topY: 333 },\n            { leftX: 150, topY: 333 },\n            { leftX: 200, topY: 333 },\n        ],\n    } as SpriteAnimation,\n    Jump: {\n        imagePath: '/images/Adventurer/Adventurer-1.5/adventurer-v1.5-Sheet.png',\n        frameCount: 4,\n        frameWidth: 50,\n        frameHeight: 37,\n        framePositions: [\n            { leftX: 0, topY: 0 },\n            { leftX: 50, topY: 0 },\n            { leftX: 100, topY: 0 },\n            { leftX: 150, topY: 0 },\n        ],\n    } as SpriteAnimation,\n};\n\n// You can define more animations here","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/characters/zombie4/Zombie4Animations.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Idle` must match one of the following formats: camelCase, UPPER_CASE","line":11,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Walk` must match one of the following formats: camelCase, UPPER_CASE","line":17,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":17,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Attack` must match one of the following formats: camelCase, UPPER_CASE","line":23,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":23,"endColumn":11},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Hurt` must match one of the following formats: camelCase, UPPER_CASE","line":29,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":29,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Death` must match one of the following formats: camelCase, UPPER_CASE","line":35,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":35,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Spawn` must match one of the following formats: camelCase, UPPER_CASE","line":41,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":41,"endColumn":10}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type SpriteAnimation } from \"../../types/SpriteTypes\";\n\n// * Idle - 5 frames\n// * Walk - 13 frames\n// * Attack - 15 frames\n// * Hurt - 7 frames\n// * Death - 12 frames\n// * Spawn - 10 frames\n\nexport const Zombie4Animations = {\n    Idle: {\n        imagePath: '/images/Zombie4Package/Sprites/Idle.png',\n        frameCount: 5,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n    Walk: {\n        imagePath: '/images/Zombie4Package/Sprites/Walk.png',\n        frameCount: 13,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n    Attack: {\n        imagePath: '/images/Zombie4Package/Sprites/Attack.png',\n        frameCount: 15,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n    Hurt: {\n        imagePath: '/images/Zombie4Package/Sprites/Hurt.png',\n        frameCount: 7,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n    Death: {\n        imagePath: '/images/Zombie4Package/Sprites/Death.png',\n        frameCount: 12,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n    Spawn: {\n        imagePath: '/images/Zombie4Package/Sprites/Spawn.png',\n        frameCount: 10,\n        frameWidth: 62,\n        frameHeight: 62,\n    } as SpriteAnimation,\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/sprites/Sprite.tsx","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":26,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":26,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[752,768],"text":"this.frameWidth === 0"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[752,768],"text":"Number.isNaN(this.frameWidth)"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[752,768],"text":"!Boolean(this.frameWidth)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":29,"column":18,"nodeType":"MemberExpression","messageId":"conditionErrorNumber","endLine":29,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[872,889],"text":"this.frameHeight === 0"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[872,889],"text":"Number.isNaN(this.frameHeight)"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[872,889],"text":"!Boolean(this.frameHeight)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":36,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":36,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":36,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":36,"endColumn":88},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":42,"column":27,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":42,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1400,1410],"text":"(frameWidth != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1400,1410],"text":"(frameWidth ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1400,1410],"text":"(Boolean(frameWidth))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":43,"column":28,"nodeType":"Identifier","messageId":"conditionErrorNullableNumber","endLine":43,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1488,1499],"text":"(frameHeight != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[1488,1499],"text":"(frameHeight ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1488,1499],"text":"(Boolean(frameHeight))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":58,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":19},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":66,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":66,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2374,2392],"text":"this.frameSequence != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":69,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":69,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2525,2536],"text":"frameCoords != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":75,"column":54,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":75,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":75,"column":72,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":75,"endColumn":92}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type FramePostion } from \"../types/Position\";\n\nfunction assert(condition: boolean, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(`Assertion failed: ${message}`);\n  }\n}\n\nexport class Sprite {\n    public image: HTMLImageElement;\n    public frameCount: number;\n    private frameWidth: number;\n    private frameHeight: number;\n    private frameSequence?: FramePostion[];\n\n    constructor(\n        imagePath: string,\n        frameCount: number,\n        frameWidth?: number,\n        frameHeight?: number,\n        frameSequence?: FramePostion[]\n    ) {\n        this.image = new Image();\n        this.image.onload = () => {\n            assert(this.image.complete, 'Image failed to load: ' + imagePath);\n            if (!this.frameWidth) {\n                this.frameWidth = this.image.width / this.frameCount;\n            }\n            if (!this.frameHeight) {\n                this.frameHeight = this.image.height;\n            }\n        };\n        this.image.onerror = () => {\n            // Log error without using console.error\n            const errorMessage = 'Image failed to load: ' + imagePath;\n            if (typeof window !== 'undefined' && window.console && window.console.error) {\n                window.console.error(errorMessage);\n            }\n        }\n        this.image.src = imagePath;\n        this.frameCount = frameCount;\n        this.frameWidth = frameWidth || 0; // Set when the image loads if not provided\n        this.frameHeight = frameHeight || 0; // Set when the image loads if not provided\n        this.frameSequence = frameSequence;\n    }\n\n    public updateFrameIndex(currentFrameIndex: number, timestamp: number, lastFrameTime: number, frameDelay: number): number {\n        // Calculate if enough time has passed since the last frame update\n        if (timestamp - lastFrameTime > frameDelay) {\n            // Increment frameIndex and loop back to 0 if it exceeds frameCount\n            return (currentFrameIndex + 1) % this.frameCount;\n        } else {\n            // Return the last frame index if not enough time has passed\n            return currentFrameIndex;\n        }\n    }\n\n    public draw = (\n        context: CanvasRenderingContext2D,\n        frameIndex: number,\n        leftX: number,\n        topY: number,\n        scale: number = 1.5\n    ) => {\n        let frameLeftX = 0, frameTopY = 0;\n        if (this.frameSequence) {\n            // Use the frame sequence if provided\n            const frameCoords = this.frameSequence[frameIndex];\n            if(frameCoords){\n                frameLeftX = frameCoords.leftX;\n                frameTopY = frameCoords.topY;\n            } else {\n                // Log error without using console.error\n                const errorMessage = `No frameCoords found for frameIndex: ${frameIndex}`;\n                if (typeof window !== 'undefined' && window.console && window.console.error) {\n                    window.console.error(errorMessage);\n                }\n            }\n        } else {\n            // Calculate frame position for strip-style sprites\n            frameLeftX = this.frameWidth * frameIndex;\n            frameTopY = 0;\n        }\n        context.drawImage(\n            this.image,\n            frameLeftX, frameTopY, // source x, y\n            this.frameWidth, this.frameHeight, // source width, height\n            leftX, topY, // destination x, y\n            this.frameWidth * scale, this.frameHeight * scale // destination width, height (scaled)\n        );\n    }\n\n    // ... rest of the Sprite class methods\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/sprites/SpriteManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/types/ActionTypes.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":7,"column":1,"nodeType":"ExportNamedDeclaration","endLine":12,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Run` must match one of the following formats: camelCase, UPPER_CASE","line":15,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":15,"endColumn":6},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Idle` must match one of the following formats: camelCase, UPPER_CASE","line":16,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Walk` must match one of the following formats: camelCase, UPPER_CASE","line":17,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":17,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Jump` must match one of the following formats: camelCase, UPPER_CASE","line":18,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":18,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Attack` must match one of the following formats: camelCase, UPPER_CASE","line":19,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":19,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Summersault` must match one of the following formats: camelCase, UPPER_CASE","line":20,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":20,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Death` must match one of the following formats: camelCase, UPPER_CASE","line":21,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":21,"endColumn":8},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Hurt` must match one of the following formats: camelCase, UPPER_CASE","line":22,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":22,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Run` must match one of the following formats: camelCase, UPPER_CASE","line":28,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":28,"endColumn":6},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Idle` must match one of the following formats: camelCase, UPPER_CASE","line":34,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":34,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Walk` must match one of the following formats: camelCase, UPPER_CASE","line":40,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":40,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Jump` must match one of the following formats: camelCase, UPPER_CASE","line":46,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":46,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Attack` must match one of the following formats: camelCase, UPPER_CASE","line":52,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":52,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Summersault` must match one of the following formats: camelCase, UPPER_CASE","line":58,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":58,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Death` must match one of the following formats: camelCase, UPPER_CASE","line":64,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":64,"endColumn":8},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Hurt` must match one of the following formats: camelCase, UPPER_CASE","line":70,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":70,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Attack` must match one of the following formats: camelCase, UPPER_CASE","line":79,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":79,"endColumn":9},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Idle` must match one of the following formats: camelCase, UPPER_CASE","line":85,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":85,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Walk` must match one of the following formats: camelCase, UPPER_CASE","line":91,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":91,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Hurt` must match one of the following formats: camelCase, UPPER_CASE","line":97,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":97,"endColumn":7},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Death` must match one of the following formats: camelCase, UPPER_CASE","line":103,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":103,"endColumn":8}],"suppressedMessages":[],"errorCount":22,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ActionTypes.ts\nimport { HeroAnimations } from '../characters/hero/HeroAnimations';\nimport { Zombie4Animations } from '../characters/zombie4/Zombie4Animations';\n\nimport { type SpriteAnimation } from './SpriteTypes';\n\nexport interface Action {\n  animation: SpriteAnimation;\n  dx: number;\n  dy: number;\n  continueous: boolean;\n}\n\nconst ActionType = {\n  Run: 'Run',\n  Idle: 'Idle',\n  Walk: 'Walk',\n  Jump: 'Jump',\n  Attack: 'Attack',\n  Summersault: 'Summersault',\n  Death: 'Death',\n  Hurt: 'Hurt',\n} as const;\n\nexport type ActionType = typeof ActionType[keyof typeof ActionType];\n\nexport const HeroActions: Record<ActionType, Action> = {\n  Run: {\n    animation: HeroAnimations.Run, // HeroRunAnimation is imported from HeroAnimations.ts\n    dx: 2,\n    dy: 0,\n    continueous: true,\n  },\n  Idle: {\n    animation: HeroAnimations.Idle, // HeroIdleAnimation is imported from HeroAnimations.ts\n    dx: 0,\n    dy: 0,\n    continueous: true,\n  },\n  Walk: {\n    animation: HeroAnimations.Walk, // HeroWalkAnimation is imported from HeroAnimations.ts\n    dx: 1,\n    dy: 0,\n    continueous: true,\n  },\n  Jump: {\n    animation: HeroAnimations.Jump,\n    dx: 0,\n    dy: 0,\n    continueous: false\n  },\n  Attack: {\n    animation: HeroAnimations.Attack,\n    dx: 0,\n    dy: 0,\n    continueous: false\n  },\n  Summersault: {\n    animation: HeroAnimations.Summersault,\n    dx: 3,\n    dy: 1,\n    continueous: false\n  },\n  Death: {\n    animation: HeroAnimations.Death,\n    dx: 0,\n    dy: 0,\n    continueous: false\n  },\n  Hurt: {\n    animation: HeroAnimations.Hurt,\n    dx: 0,\n    dy: 0,\n    continueous: false\n  }\n};\n\nexport const Zombie4Actions: Record<string, Action> = {\n  Attack: {\n    animation: Zombie4Animations.Attack, // HeroRunAnimation is imported from HeroAnimations.ts\n    dx: 2,\n    dy: 0,\n    continueous: false,\n  },\n  Idle: {\n    animation: Zombie4Animations.Idle, // HeroIdleAnimation is imported from HeroAnimations.ts\n    dx: 0,\n    dy: 0,\n    continueous: true,\n  },\n  Walk: {\n    animation: Zombie4Animations.Walk, // HeroWalkAnimation is imported from HeroAnimations.ts\n    dx: 1,\n    dy: 0,\n    continueous: true,\n  },\n  Hurt: {\n    animation: Zombie4Animations.Hurt, // HeroWalkAnimation is imported from HeroAnimations.ts\n    dx: 0,\n    dy: 0,\n    continueous: false,\n  },\n  Death: {\n    animation: Zombie4Animations.Death, // HeroWalkAnimation is imported from HeroAnimations.ts\n    dx: 0,\n    dy: 0,\n    continueous: false,\n  }\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/types/Position.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/types/SpriteTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/game/useBaseCharacter.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":3,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":21,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":21,"endColumn":63},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":39,"column":9,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":39,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":55,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":55,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1957,1963],"text":"sprite != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":59,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":67,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2059,2059],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":72,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":72,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2513,2519],"text":"sprite != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":90,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":90,"endColumn":65,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2965,2965],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":113,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":113,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3708,3722],"text":"currentSprite == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":114,"column":7,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":114,"endColumn":89,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3732,3732],"text":"void "},"desc":"Add void operator to ignore."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// useBaseCharacter.tsx\n\nimport type React from 'react';\nimport { useEffect, useRef, useState, useCallback, useMemo } from 'react';\n\nimport { type Sprite } from './sprites/Sprite';\nimport { SpriteManager } from './sprites/SpriteManager';\nimport { type Action, type ActionType } from './types/ActionTypes';\nimport { type SpritePosition } from './types/Position';\nimport { type SpriteAnimation } from './types/SpriteTypes';\n\ninterface BaseCharacterProps {\n  currentActionType: ActionType;\n  actions: Record<ActionType, Action>;\n  name: string;\n  scale: number;\n  xOffset: number;\n  positionRef: React.RefObject<SpritePosition>;\n}\n\nexport const useBaseCharacter = (props: BaseCharacterProps) => {\n  const [, setSprite] = useState<Sprite | null>(null);\n  const spriteManager = useMemo(() => new SpriteManager(), []);\n  const frameIndexRef = useRef<number>(0);\n  const currentActionRef = useRef<ActionType>(props.currentActionType);\n\n  // Initialize spritesRef with undefined values for all action types\n  const spritesRef = useRef<Record<ActionType, Sprite | undefined>>(\n    Object.keys(props.actions).reduce((acc, key) => ({\n      ...acc,\n      [key]: undefined\n    }), {} as Record<ActionType, Sprite | undefined>)\n  );\n\n  const { currentActionType, actions } = props;\n\n  const loadSprite = useCallback(async (actionKey: ActionType, animationData: SpriteAnimation) => {\n    const loadedSprite = await spriteManager.loadSprite(animationData);\n    if (loadedSprite) {\n      spritesRef.current[actionKey] = loadedSprite;\n      if (actionKey === currentActionRef.current) {\n        setSprite(loadedSprite);\n      }\n    }\n  }, [spriteManager]);\n\n  const setCurrentActionType = useCallback((newActionType: ActionType) => {\n    if (currentActionRef.current === newActionType) return;\n\n    // Update both the ref and the prop\n    currentActionRef.current = newActionType;\n    frameIndexRef.current = 0;\n\n    const sprite = spritesRef.current[newActionType];\n    if (sprite) {\n      setSprite(sprite);\n    } else {\n      // Try to load the sprite if it's missing\n      loadSprite(newActionType, actions[newActionType].animation);\n    }\n  }, [actions, loadSprite]);\n\n  const draw = (\n    context: CanvasRenderingContext2D,\n    positionRef: React.RefObject<SpritePosition>,\n    scale: number | null\n  ): number => {\n    const sprite = spritesRef.current[currentActionRef.current];\n    const action = actions[currentActionRef.current];\n    const newX = (positionRef?.current?.leftX ?? 0) + props.xOffset + action.dx;\n\n    if (sprite) {\n      const nextFrameIndex = (frameIndexRef.current + 1) % sprite.frameCount;\n      frameIndexRef.current = nextFrameIndex;\n\n      sprite.draw(\n        context,\n        frameIndexRef.current,\n        newX,\n        positionRef?.current?.topY ?? 0,\n        scale ?? props.scale\n      );\n    }\n    return action.dx;\n  }\n\n  // Load all sprites on mount\n  useEffect(() => {\n    Object.entries(actions).forEach(([actionKey, actionData]) => {\n      loadSprite(actionKey as ActionType, actionData.animation);\n    });\n\n    return () => {\n      // Clear sprite references on unmount\n      spritesRef.current = Object.keys(actions).reduce((acc, key) => ({\n        ...acc,\n        [key]: undefined\n      }), {} as Record<ActionType, Sprite | undefined>);\n      setSprite(null);\n    };\n  }, [actions, loadSprite]);\n\n  // Handle prop changes for currentActionType\n  useEffect(() => {\n    if (currentActionType !== currentActionRef.current) {\n      setCurrentActionType(currentActionType);\n    }\n  }, [currentActionType, setCurrentActionType]);\n\n  // Handle initial sprite loading for current action\n  useEffect(() => {\n    const currentSprite = spritesRef.current[currentActionRef.current];\n    if (!currentSprite) {\n      loadSprite(currentActionRef.current, actions[currentActionRef.current].animation);\n    }\n  }, [actions, loadSprite]);\n\n  return {\n    draw,\n    setCurrentActionType  // Export this so parent components can trigger action changes\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/activityMachine.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useAPI.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ENDPOINTS` must match one of the following formats: camelCase","line":5,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `default_branch` must match one of the following formats: camelCase, UPPER_CASE","line":32,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":32,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":40,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":40,"endColumn":23},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":48,"column":18,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":48,"endColumn":30},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":48,"column":66,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":48,"endColumn":83,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1051,1069],"text":"(authResponse.data == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Authorization` must match one of the following formats: camelCase, UPPER_CASE","line":59,"column":21,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":59,"endColumn":36},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Content-Type` must match one of the following formats: camelCase, UPPER_CASE","line":60,"column":21,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":60,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Accept` must match one of the following formats: camelCase, UPPER_CASE","line":61,"column":21,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":61,"endColumn":29},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":68,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":68,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":74,"column":34,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":74,"endColumn":66,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1900,1932],"text":"((apiError.response?.data?.message) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1900,1932],"text":"((apiError.response?.data?.message) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1900,1932],"text":"(Boolean((apiError.response?.data?.message)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":75,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":75,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1969,1985],"text":"(apiError.message.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1969,1985],"text":"(apiError.message !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1969,1985],"text":"(Boolean(apiError.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":78,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":78,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":78,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":78,"endColumn":88},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":83,"column":25,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":83,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2267,2292],"text":"((apiError.response?.status) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[2267,2292],"text":"((apiError.response?.status) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2267,2292],"text":"(Boolean((apiError.response?.status)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":92,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":92,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2593,2597],"text":"(path != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2593,2597],"text":"(path ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2593,2597],"text":"(Boolean(path))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":93,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":93,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2628,2631],"text":"(sha != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2628,2631],"text":"(sha ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2628,2631],"text":"(Boolean(sha))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nimport axios, { type AxiosError } from 'axios';\n\nimport ENDPOINTS from '../shared/endpoints.json';\n\nimport { type IAuthProps } from './useAuth';\n\ninterface APIResponse<T> {\n    status: number;\n    data?: T;\n    error?: string;\n}\n\ninterface FileContentResponse {\n    content: string;\n    encoding?: string;\n    sha?: string;\n}\n\ninterface TreeItemResponse {\n    path: string;\n    type: string;\n    sha?: string;\n    size?: number;\n}\n\ninterface RepoResponse {\n    name: string;\n    description?: string;\n    private: boolean;\n    default_branch: string;\n}\n\ninterface APIError {\n    status: number;\n    message: string;\n}\n\nexport function useAPI(auth: IAuthProps) {\n    const makeAuthenticatedRequest = useCallback(async <T>(\n        endpoint: string,\n        params?: Record<string, string>,\n        method: 'GET' | 'POST' = 'GET'\n    ): Promise<APIResponse<T>> => {\n        try {\n            const authResponse = await auth.validateAndRefreshToken();\n            if (!authResponse || authResponse.status !== 200 || !authResponse.data) {\n                return {\n                    status: 401,\n                    error: 'Authentication failed'\n                };\n            }\n\n            const response = await axios({\n                method,\n                url: `${ENDPOINTS.api.BaseUrl}${endpoint}`,\n                headers: {\n                    'Authorization': `Bearer ${authResponse.data.AccessToken}`,\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json'\n                },\n                params\n            });\n\n            return {\n                status: response.status,\n                data: response.data\n            };\n        } catch (error) {\n            const apiError = error as AxiosError<APIError>;\n\n            // Log error without using console.error\n            const errorMessage = apiError.response?.data?.message ||\n                                 apiError.message ||\n                                 'Request failed';\n\n            if (typeof window !== 'undefined' && window.console && window.console.error) {\n                window.console.error('API request failed:', errorMessage);\n            }\n\n            return {\n                status: apiError.response?.status || 500,\n                error: errorMessage\n            };\n        }\n    }, [auth]);\n\n    const getRepoTree = useCallback(async (repo: string, path?: string, sha?: string) => {\n        return makeAuthenticatedRequest<TreeItemResponse[]>(ENDPOINTS.api.GetRepoTree, {\n            repo,\n            ...(path && { path }),\n            ...(sha && { sha })\n        });\n    }, [makeAuthenticatedRequest]);\n\n    const getFileContent = useCallback(async (repo: string, path: string) => {\n        return makeAuthenticatedRequest<FileContentResponse>('/github/file', {\n            repo,\n            path\n        });\n    }, [makeAuthenticatedRequest]);\n\n    const listRecentRepos = useCallback(async () => {\n        return makeAuthenticatedRequest<RepoResponse[]>(ENDPOINTS.api.ListRecentRepos);\n    }, [makeAuthenticatedRequest]);\n\n    return {\n        getRepoTree,\n        getFileContent,\n        listRecentRepos\n    };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useActivityMediator.d.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_ActivityType` must not have a leading underscore.","line":4,"column":22,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":4,"endColumn":41}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ActionType } from '../game/types/ActionTypes';\nimport { ParsedCommand } from '../types/Types';\n\nexport declare const _ActivityType: null;\n\nexport type IActivityMediatorReturn = {\n  isInGameMode: boolean;\n  isInTutorial: boolean;\n  isInEdit: boolean;\n  isInNormal: boolean;\n  heroAction: ActionType;\n  zombie4Action: ActionType;\n  handleCommandExecuted: (parsedCommand: ParsedCommand) => boolean;\n  setHeroAction: React.Dispatch<React.SetStateAction<ActionType>>,\n  setZombie4Action: React.Dispatch<React.SetStateAction<ActionType>>;\n  checkTutorialProgress: (command: string | null) => void;\n  checkGameProgress: (successPhrase: { key: string; value: string; tutorialGroup?: string }) => void;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useActivityMediator.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `GamePhrases` must match one of the following formats: camelCase","line":21,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":21,"endColumn":19},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":28,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":28,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":41,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1637,1645],"text":"groupKey != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1637,1645],"text":"groupKey ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1637,1645],"text":"Boolean(groupKey)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":67,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":67,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2508,2528],"text":"(tutorialSignal.value != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":67,"column":38,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":67,"endColumn":73,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2532,2568],"text":"((tutorialSignal.value?.tutorialGroup) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2533,2568],"text":"((tutorialSignal.value?.tutorialGroup) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2532,2568],"text":"(!Boolean((tutorialSignal.value?.tutorialGroup)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":71,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":71,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2671,2697],"text":"(currentTutorialRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":71,"column":43,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":71,"endColumn":84,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2701,2742],"text":"((currentTutorialRef.current?.tutorialGroup) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2701,2742],"text":"((currentTutorialRef.current?.tutorialGroup) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2701,2742],"text":"(Boolean((currentTutorialRef.current?.tutorialGroup)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":74,"column":13,"nodeType":"CallExpression","messageId":"conditionErrorNullableObject","endLine":74,"endColumn":30,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2840,2857],"text":"getNextTutorial() != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":83,"column":13,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":83,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3252,3260],"text":"groupKey.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3252,3260],"text":"groupKey !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3252,3260],"text":"Boolean(groupKey)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":85,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":85,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3368,3385],"text":"nextPhraseInGroup != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":95,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":95,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3847,3859],"text":"nextTutorial != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":107,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":107,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4277,4291],"text":"nextGamePhrase != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":2,"message":"React Hook useCallback has a missing dependency: 'decideActivityChange'. Either include it or remove the dependency array.","line":114,"column":8,"nodeType":"ArrayExpression","endLine":117,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [decideActivityChange, getIncompleteTutorialsInGroup, transitionToGame]","fix":{"range":[4562,4633],"text":"[decideActivityChange, getIncompleteTutorialsInGroup, transitionToGame]"}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":128,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":128,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5002,5029],"text":"currentTutorialRef.current == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":136,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":136,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5282,5289],"text":"command != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[5282,5289],"text":"command ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5282,5289],"text":"Boolean(command)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":146,"column":21,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":146,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[5763,5771],"text":"groupKey.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[5763,5771],"text":"groupKey !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[5763,5771],"text":"Boolean(groupKey)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":148,"column":25,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":148,"endColumn":49,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[5902,5926],"text":"incompletePhrasesInGroup != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":168,"column":13,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":168,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[6690,6710],"text":"(nextTutorial?.phrase) != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[6690,6710],"text":"(nextTutorial?.phrase) ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[6690,6710],"text":"Boolean((nextTutorial?.phrase))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":179,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":179,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7116,7130],"text":"nextGamePhrase != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":2,"message":"React Hook useCallback has a missing dependency: 'decideActivityChange'. Either include it or remove the dependency array.","line":183,"column":8,"nodeType":"ArrayExpression","endLine":186,"endColumn":6,"suggestions":[{"desc":"Update the dependencies array to be: [canUnlockTutorial, decideActivityChange, transitionToGame]","fix":{"range":[7228,7287],"text":"[canUnlockTutorial, decideActivityChange, transitionToGame]"}}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":194,"column":71,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":194,"endColumn":97,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7675,7701],"text":"(parseLocation().contentKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7675,7701],"text":"(parseLocation().contentKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7675,7701],"text":"(Boolean(parseLocation().contentKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":195,"column":63,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":195,"endColumn":89,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[7767,7793],"text":"(parseLocation().contentKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[7767,7793],"text":"(parseLocation().contentKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[7767,7793],"text":"(Boolean(parseLocation().contentKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":196,"column":17,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":196,"endColumn":27}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback, useEffect, useRef } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { activitySignal, setNotification, bypassTutorialSignal } from 'src/signals/appSignals'\nimport {\n    getIncompletePhrasesByTutorialGroup, initializeGame,\n    setCompletedGamePhrase,\n    getNextGamePhrase,\n    setGamePhrase,\n} from 'src/signals/gameSignals';\nimport {\n    setNextTutorial, resetCompletedTutorials,\n    tutorialSignal, getNextTutorial, setCompletedTutorial\n} from 'src/signals/tutorialSignals';\nimport { createLogger } from 'src/utils/Logger';\nimport { navigate, parseLocation } from 'src/utils/navigationUtils';\n\nimport { type ActionType } from '../game/types/ActionTypes';\nimport { ActivityType, type ParsedCommand, type GamePhrase, type Tutorial } from '../types/Types';\nimport GamePhrases from '../utils/GamePhrases';\n\nimport { useTutorial } from './useTutorials';\n\n\nconst logger = createLogger({ prefix: 'ActivityMediator' });\n\nexport function useActivityMediator() {\n    const [heroAction, setHeroAction] = useState<ActionType>('Idle');\n    const [zombie4Action, setZombie4Action] = useState<ActionType>('Walk');\n    const {\n        getIncompleteTutorialsInGroup,\n        canUnlockTutorial\n    } = useTutorial();\n    const activity = useComputed(() => activitySignal.value).value;\n    const bypassTutorial = useComputed(() => bypassTutorialSignal.value);\n    const currentTutorialRef = useRef<Tutorial | null>(null);\n\n    const transitionToGame = useCallback((contentKey?: string | null, groupKey?: string | null) => {\n        // First initialize game if group key is provided\n        if (groupKey) {\n            initializeGame(groupKey);\n        } else {\n            initializeGame();\n        }\n        // Then update activity and navigate\n        activitySignal.value = ActivityType.GAME;\n        navigate({\n            activityKey: ActivityType.GAME,\n            contentKey: contentKey ?? null,\n            groupKey: groupKey ?? null\n        });\n    }, []);\n\n    const decideActivityChange = useCallback((commandActivity: ActivityType | null = null): ActivityType => {\n        logger.debug('Deciding activity change:', {\n            commandActivity,\n            currentActivity: activity,\n            bypassTutorial: bypassTutorial.value,\n            currentTutorial: tutorialSignal.value\n        });\n\n        const bypassTutorialValue = bypassTutorial.value;\n        if (bypassTutorialValue) {\n            return ActivityType.NORMAL;\n        }\n        if (tutorialSignal.value && !tutorialSignal.value?.tutorialGroup && activity !== ActivityType.GAME) {\n            return ActivityType.TUTORIAL;\n        }\n\n        if (currentTutorialRef.current && currentTutorialRef.current?.tutorialGroup && activity !== ActivityType.GAME) {\n            return ActivityType.GAME;\n        }\n        if (getNextTutorial()) commandActivity = ActivityType.TUTORIAL;\n\n        return commandActivity ?? ActivityType.NORMAL;\n    }, [activity, bypassTutorial]);\n\n    const checkGameProgress = useCallback((successPhrase: GamePhrase) => {\n        logger.debug('Checking game progress:', successPhrase);\n        const groupKey = parseLocation().groupKey ?? '';\n        setCompletedGamePhrase(successPhrase.key);\n        if (groupKey) {\n            const nextPhraseInGroup = getIncompletePhrasesByTutorialGroup(groupKey)[0];\n            if (nextPhraseInGroup) {\n                setGamePhrase(getNextGamePhrase());\n                transitionToGame(nextPhraseInGroup.key, nextPhraseInGroup.tutorialGroup);\n                return;\n            }\n            const incompleteTutorialInGroup = getIncompleteTutorialsInGroup(groupKey);\n            incompleteTutorialInGroup.forEach(itig => {\n                setCompletedTutorial(itig.phrase);\n            });\n            const nextTutorial = getNextTutorial();\n            if (nextTutorial) {\n                const resultActivity = decideActivityChange(ActivityType.TUTORIAL);\n                navigate({\n                    activityKey: resultActivity,\n                    contentKey: nextTutorial.phrase ?? '',\n                    groupKey: nextTutorial.tutorialGroup ?? ''\n                })\n                return;\n            }\n        }\n\n        const nextGamePhrase = getNextGamePhrase();\n        if (nextGamePhrase) {\n            setGamePhrase(nextGamePhrase);\n            transitionToGame(nextGamePhrase.key, nextGamePhrase.tutorialGroup);\n            return;\n        }\n        activitySignal.value = ActivityType.NORMAL;\n        navigate({ activityKey: ActivityType.NORMAL })\n    }, [\n        getIncompleteTutorialsInGroup,\n        transitionToGame\n    ]);\n\n    const checkTutorialProgress = useCallback((command: string | null) => {\n        logger.debug('Checking tutorial progress:', {\n            command,\n            currentTutorial: tutorialSignal.value,\n            activity: activitySignal.value,\n            location: parseLocation()\n        });\n\n        currentTutorialRef.current = getNextTutorial();\n        if (!currentTutorialRef.current) {\n            logger.debug('No current tutorial found');\n            return;\n        }\n\n        const groupKey = parseLocation().groupKey ?? '';\n        // Normalize command for Enter key\n        command = command === '' ? '\\r' : command;\n        if (command) {\n            logger.debug('Checking if can unlock tutorial:', {\n                command,\n                currentPhrase: currentTutorialRef.current.phrase,\n                charCodesCommand: [...command].map(c => c.charCodeAt(0)),\n                charCodesPhrase: [...currentTutorialRef.current.phrase].map(c => c.charCodeAt(0))\n            });\n\n            if (canUnlockTutorial(command)) {\n                logger.debug('Tutorial unlocked:', command);\n                if (groupKey) {\n                    const incompletePhrasesInGroup = getIncompletePhrasesByTutorialGroup(groupKey)[0];\n                    if (incompletePhrasesInGroup) {\n                        transitionToGame(incompletePhrasesInGroup.key, incompletePhrasesInGroup.tutorialGroup);\n                    }\n                    return;\n                }\n                setCompletedTutorial(currentTutorialRef.current.phrase);\n            } else {\n                logger.debug('Tutorial not unlocked:', {\n                    expected: currentTutorialRef.current.phrase,\n                    received: command\n                });\n                setNotification(\n                    `Tutorial ${tutorialSignal.value?.phrase} not unlocked with ${command}`\n                )\n                return;\n            }\n        }\n\n        const nextTutorial = getNextTutorial();\n        logger.debug('Next tutorial:', nextTutorial);\n        if (nextTutorial?.phrase) {\n            const resultActivity = decideActivityChange(ActivityType.TUTORIAL);\n            setNextTutorial(nextTutorial);\n            navigate({\n                activityKey: resultActivity,\n                contentKey: nextTutorial.phrase,\n                groupKey: nextTutorial.tutorialGroup\n            })\n            return;\n        }\n        const nextGamePhrase = getNextGamePhrase();\n        if (nextGamePhrase) {\n            transitionToGame(nextGamePhrase?.key, groupKey);\n        }\n        return;\n    }, [\n        canUnlockTutorial,\n        transitionToGame\n    ]);\n\n    const handleCommandExecuted = useCallback((parsedCommand: ParsedCommand): boolean => {\n        logger.debug('Handling command:', parsedCommand);\n        let result = false;\n        if (parseLocation().activityKey === ActivityType.TUTORIAL) {\n            checkTutorialProgress(parsedCommand.command);\n        }\n        else if (parseLocation().activityKey === ActivityType.GAME && parseLocation().contentKey) {\n            const gamePhrase = GamePhrases.getGamePhraseByKey(parseLocation().contentKey || '')\n            if (gamePhrase) checkGameProgress(gamePhrase);\n        }\n        switch (parsedCommand.command) {\n            case 'play': {\n                const nextGamePhrase = getNextGamePhrase();\n                transitionToGame(nextGamePhrase?.key);\n                result = true;\n                break;\n            }\n            case 'tut': {\n                if ('r' in parsedCommand.switches) {\n                    resetCompletedTutorials();\n                }\n                const nextTutorial = getNextTutorial();\n                navigate({\n                    activityKey: ActivityType.TUTORIAL,\n                    contentKey: nextTutorial?.phrase,\n                    groupKey: nextTutorial?.tutorialGroup\n                })\n                result = true;\n                break;\n            }\n            default:\n                result = false;\n        }\n\n        return result;\n    }, [checkGameProgress, checkTutorialProgress, transitionToGame]);\n\n    useEffect(() => {\n        const resultActivity = decideActivityChange(null);\n        if (resultActivity === ActivityType.TUTORIAL) {\n            checkTutorialProgress(null);\n        }\n    }, [decideActivityChange, checkTutorialProgress]);\n\n    return {\n        isInGameMode: activity === ActivityType.GAME,\n        isInTutorial: activity === ActivityType.TUTORIAL,\n        isInEdit: activity === ActivityType.EDIT,\n        isInNormal: activity === ActivityType.NORMAL,\n        checkTutorialProgress,\n        heroAction,\n        zombie4Action,\n        handleCommandExecuted,\n        setHeroAction,\n        setZombie4Action,\n        checkGameProgress,\n    };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useAuth.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":71,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":71,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[1968,1981],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":83,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":83,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2338,2347],"text":"data.data != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":88,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":88,"endColumn":74,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[2550,2550],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":12,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":106,"endColumn":23,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3306,3318],"text":"(accessToken == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3307,3318],"text":"(accessToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3306,3318],"text":"(!Boolean(accessToken))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":28,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":106,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3322,3335],"text":"(refreshToken == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3323,3335],"text":"(refreshToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3322,3335],"text":"(!Boolean(refreshToken))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":45,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":106,"endColumn":54,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3339,3349],"text":"(expiresAt == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3340,3349],"text":"(expiresAt ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3339,3349],"text":"(!Boolean(expiresAt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":106,"column":59,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":106,"endColumn":68,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3353,3363],"text":"(expiresIn == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3354,3363],"text":"(expiresIn ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3353,3363],"text":"(!Boolean(expiresIn))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":117,"column":30,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":117,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3665,3674],"text":"(expiresAt.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3665,3674],"text":"(expiresAt !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3665,3674],"text":"(Boolean(expiresAt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":122,"column":13,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":122,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3878,3904],"text":"(response.data?.accessToken) != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3878,3904],"text":"(response.data?.accessToken) ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3878,3904],"text":"Boolean((response.data?.accessToken))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":139,"column":18,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":139,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[4473,4482],"text":"(expiresAt.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[4473,4482],"text":"(expiresAt !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4473,4482],"text":"(Boolean(expiresAt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":148,"column":22,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":148,"endColumn":29,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4768,4775],"text":"(idToken != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4768,4775],"text":"(idToken ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4768,4775],"text":"(Boolean(idToken))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":150,"column":29,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":150,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4851,4865],"text":"(githubUsername != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4851,4865],"text":"(githubUsername ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4851,4865],"text":"(Boolean(githubUsername))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":187,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":187,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":201,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":201,"endColumn":26,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[6462,6475],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":246,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":246,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[8403,8416],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":258,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":258,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[8766,8775],"text":"(data.data != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":258,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":258,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[8779,8798],"text":"(data.data.expiresIn.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[8779,8798],"text":"(data.data.expiresIn !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[8779,8798],"text":"(Boolean(data.data.expiresIn))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":271,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":271,"endColumn":74,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[9386,9386],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":282,"column":9,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":282,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[9694,9703],"text":"(expiresIn.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[9694,9703],"text":"(expiresIn !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9694,9703],"text":"(Boolean(expiresIn))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected number value in conditional. An explicit zero/NaN check is required.","line":283,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNumber","endLine":283,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareZero","fix":{"range":[9779,9788],"text":"(expiresAt !== 0)"},"desc":"Change condition to check for 0 (`value !== 0`)"},{"messageId":"conditionFixCompareNaN","fix":{"range":[9779,9788],"text":"(!Number.isNaN(expiresAt))"},"desc":"Change condition to check for NaN (`!Number.isNaN(value)`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[9779,9788],"text":"(Boolean(expiresAt))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":295,"column":11,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":295,"endColumn":24,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10169,10182],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":321,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorAny","endLine":321,"endColumn":23,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[10867,10880],"text":"(Boolean(response.data))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":352,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":352,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[11777,11784],"text":"(session != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":366,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":366,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[12528,12547],"text":"(loginMutation.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":382,"column":14,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":382,"endColumn":33,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[13245,13264],"text":"(loginMutation.error != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useAuth.ts\nimport { useEffect, useCallback } from 'react';\n\nimport axios from 'axios';\n\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\n\nimport endpoints from 'src/shared/endpoints.json';\nimport { createLogger, LogLevel } from 'src/utils/Logger';\n\nimport {\n  setIsLoggedIn,\n  setUserName,\n  setIsInLoginProcess,\n  isLoggedInSignal\n} from '../signals/appSignals';\nimport { type MyResponse } from '../types/Types';\n\nconst logger = createLogger({\n  prefix: 'Auth',\n  level: LogLevel.ERROR\n});\n\nconst API_URL = endpoints.api.BaseUrl;\n\ninterface LoginCredentials {\n  username: string;\n  password: string;\n}\n\ninterface SignUpCredentials extends LoginCredentials {\n  email: string;\n}\n\ninterface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  idToken: string;\n  expiresAt: string;\n  expiresIn: string;\n  githubUsername?: string | undefined; // Explicitly define githubUsername as string | undefined\n}\n\nexport interface IAuthProps {\n  login: (username: string, password: string) => Promise<MyResponse<AuthResponse>>;\n  signup: (credentials: SignUpCredentials) => Promise<MyResponse<unknown>>;\n  verify: (username: string, code: string) => Promise<unknown>;\n  refreshToken: () => Promise<MyResponse<AuthResponse>>;\n  validateAndRefreshToken: () => Promise<MyResponse<AuthResponse>>;\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n  isPending: boolean;\n}\n\nexport function useAuth(): IAuthProps {\n  const queryClient = useQueryClient();\n\n  // Token refresh mutation\n  const refreshMutation = useMutation({\n    mutationFn: async (): Promise<MyResponse<AuthResponse>> => {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (typeof refreshToken !== 'string' || refreshToken === '') throw new Error('No refresh token');\n\n      const response = await axios.post(\n        `${API_URL}${endpoints.api.RefreshToken}`,\n        { refreshToken }\n      );\n\n      if (response.data && typeof response.data === 'object' && 'accessToken' in response.data) {\n        return {\n          status: 200,\n          data: response.data as AuthResponse,\n          message: 'Token refreshed',\n          error: []\n        };\n      } else {\n        throw new Error('Invalid refresh token response');\n      }\n    },\n    onSuccess: (data) => {\n      if (data.data) {\n        setExpiresAtLocalStorage(data.data.expiresIn);\n        setIsLoggedIn(true);\n        isLoggedInSignal.value = true;\n        localStorage.setItem('accessToken', data.data.accessToken);\n        queryClient.invalidateQueries({ queryKey: ['auth', 'session'] });\n      }\n    },\n    retry: 3,\n    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),\n  });\n\n  // Token validation and refresh function\n  const validateAndRefreshToken = useCallback(async (): Promise<MyResponse<AuthResponse>> => {\n    try {\n      const accessToken = localStorage.getItem('accessToken');\n      const expiresAt = localStorage.getItem('expiresAt');\n      const expiresIn = localStorage.getItem('expiresIn');\n      const refreshToken = localStorage.getItem('refreshToken');\n      const idToken = localStorage.getItem('idToken');\n      const githubUsername = localStorage.getItem('githubUsername');\n\n      // Exit early if any of these are missing\n      if (!accessToken || !refreshToken || !expiresAt || !expiresIn) {\n        setIsLoggedIn(false);\n        isLoggedInSignal.value = false;\n        return {\n          status: 401,\n          message: \"You are not logged in.\",\n          error: []\n        };\n      }\n\n      // Check if token is expired or will expire soon (within 5 minutes)\n      const isExpiringSoon = expiresAt ? parseInt(expiresAt) - Date.now() < 5 * 60 * 1000 : false;\n\n      if (isExpiringSoon) {\n        // Attempt to refresh the token\n        const response = await refreshMutation.mutateAsync();\n        if (response.data?.accessToken) {\n          // Token refresh successful\n          setIsLoggedIn(true);\n          return {\n            status: 200,\n            data: {\n              accessToken: response.data.accessToken,\n              expiresAt: response.data.expiresAt,\n              expiresIn: response.data.expiresIn,\n              idToken: response.data.idToken,\n              refreshToken: response.data.refreshToken,\n              githubUsername: response.data.githubUsername\n            },\n            message: \"Token refreshed\",\n            error: []\n          };\n        }\n      } else if (expiresAt && parseInt(expiresAt) > Date.now()) {\n        // Token is still valid\n        setIsLoggedIn(true);\n        return {\n          status: 200,\n          data: {\n            accessToken: accessToken,\n            expiresAt: expiresAt,\n            expiresIn: expiresIn,\n            idToken: idToken || '',\n            refreshToken: refreshToken,\n            githubUsername: githubUsername || ''\n          },\n          message: \"Token refreshed\",\n          error: []\n        };\n      }\n\n      // If we get here, either token refresh failed or token is expired\n      setIsLoggedIn(false);\n      isLoggedInSignal.value = false;\n      return {\n        status: 401,\n        message: \"Token refresh failed.\",\n        error: []\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.error('Token validation failed:', error.message);\n      } else {\n        logger.error('An unexpected error occurred during token validation');\n      }\n      setIsLoggedIn(false);\n      isLoggedInSignal.value = false;\n      return {\n        status: 401,\n        message: \"Token validation failed\",\n        error: []\n      };\n    }\n  }, [refreshMutation]);\n\n  // Session management with automatic token validation\n  const { data: session, isPending } = useQuery<MyResponse<AuthResponse>>({\n    queryKey: ['auth', 'session'],\n    queryFn: async (): Promise<MyResponse<AuthResponse>> => {\n      try {\n        const isValid = await validateAndRefreshToken();\n        if (!isValid) {\n          throw new Error('Token validation failed');\n        }\n\n        const accessToken = localStorage.getItem('accessToken');\n        if (typeof accessToken !== 'string' || accessToken === '') throw new Error('No access token');\n        const config = {\n          headers: {\n            'AUTHORIZATION': `Bearer ${accessToken}`,\n            'CONTENT_TYPE': 'application/json'\n          }\n        };\n\n        const response = await axios.get(`${API_URL}${endpoints.api.GetUser}`, config);\n        if (response.data && typeof response.data === 'object' && 'accessToken' in response.data) {\n          return {\n            status: 200,\n            data: response.data as AuthResponse,\n            message: 'Session valid',\n            error: []\n          };\n        } else {\n          throw new Error('Invalid session response');\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          logger.error('Session validation failed:', error.message);\n        } else {\n          logger.error('An unexpected error occurred during session validation');\n        }\n        if (typeof localStorage.getItem('accessToken') === 'string') localStorage.removeItem('accessToken');\n        if (typeof localStorage.getItem('refreshToken') === 'string') localStorage.removeItem('refreshToken');\n        if (typeof localStorage.getItem('expiresAt') === 'string') localStorage.removeItem('expiresAt');\n        if (typeof localStorage.getItem('expiresIn') === 'string') localStorage.removeItem('expiresIn');\n        if (typeof localStorage.getItem('idToken') === 'string') localStorage.removeItem('idToken');\n        if (typeof localStorage.getItem('githubUsername') === 'string') localStorage.removeItem('githubUsername');\n        setIsLoggedIn(false);\n        isLoggedInSignal.value = false;\n        setUserName(null);\n        return {\n          status: 401,\n          data: undefined,\n          message: 'Session invalid',\n          error: ['Session expired or invalid']\n        };\n      }\n    },\n    enabled: typeof localStorage.getItem('accessToken') === 'string',\n    retry: false,\n    staleTime: 5 * 60 * 1000 // Consider session stale after 5 minutes\n  });\n\n  // Login mutation\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginCredentials): Promise<MyResponse<AuthResponse>> => {\n      const response = await axios.post(\n        `${API_URL}${endpoints.api.SignIn}`,\n        credentials\n      );\n      if (response.data && typeof response.data === 'object' && 'accessToken' in response.data) {\n        return {\n          status: 200,\n          data: response.data as AuthResponse,\n          message: 'Login successful',\n          error: []\n        };\n      } else {\n        throw new Error('Invalid login response');\n      }\n    },\n    onSuccess: (data) => {\n      if (data.data && data.data.expiresIn && typeof data.data.expiresIn === 'string') {\n        setExpiresAtLocalStorage(data.data.expiresIn);\n        setIsLoggedIn(true);\n        isLoggedInSignal.value = true;\n        localStorage.setItem('accessToken', data.data.accessToken);\n        localStorage.setItem('refreshToken', data.data.refreshToken);\n        localStorage.setItem('idToken', data.data.idToken);\n\n        if (typeof data.data.githubUsername === 'string') {\n          localStorage.setItem('githubUsername', data.data.githubUsername);\n        }\n        setIsLoggedIn(true);\n        setIsInLoginProcess(false);\n        queryClient.invalidateQueries({ queryKey: ['auth', 'session'] });\n      }\n    },\n    onError: () => {\n      setIsLoggedIn(false);\n      setIsInLoginProcess(false);\n    }\n  });\n\n  const setExpiresAtLocalStorage = (expiresIn: string) => {\n    const expiresAt = Date.now() + parseInt(expiresIn) * 1000;\n    if (expiresIn && expiresIn !== \"\") localStorage.setItem('expiresIn', expiresIn);\n    if (expiresAt && !Number.isNaN(expiresAt)) {\n      localStorage.setItem('expiresAt', expiresAt.toString());\n    }\n  }\n\n  // Signup mutation\n  const signupMutation = useMutation({\n    mutationFn: async (credentials: SignUpCredentials): Promise<MyResponse<unknown>> => {\n      const response = await axios.post(\n        `${API_URL}${endpoints.api.SignUp}`,\n        credentials\n      );\n      if (response.data && typeof response.data === 'object') {\n        return {\n          status: 200,\n          data: response.data,\n          message: 'Signup successful',\n          error: []\n        };\n      } else {\n        throw new Error('Invalid signup response');\n      }\n    },\n    onSuccess: () => {\n      setIsInLoginProcess(false);\n    },\n    onError: () => {\n      setIsInLoginProcess(false);\n    }\n  });\n\n  // Verify email mutation\n  const verifyMutation = useMutation({\n    mutationFn: async ({ username, code }: { username: string; code: string }) => {\n      const response = await axios.post(\n        `${API_URL}${endpoints.api.ConfirmSignUp}`,\n        { username, code }\n      );\n      if(response.data && typeof response.data === 'object') {\n        return response.data as unknown;\n      } else {\n        throw new Error('Invalid verify response');\n      }\n    }\n  });\n\n  // Add a side effect to synchronize login state and validate token\n  useEffect(() => {\n    const syncLoginState = async () => {\n      const myResponse = await validateAndRefreshToken();\n      if (myResponse.status === 200) {\n        isLoggedInSignal.value = true;\n        setIsLoggedIn(true);\n      } else {\n        isLoggedInSignal.value = false;\n        setIsLoggedIn(false);\n      }\n    };\n\n    // Sync on initial load and when storage changes\n    void syncLoginState();\n    const onStorageChange = (): void => {void syncLoginState()};\n    window.addEventListener('storage', onStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', onStorageChange);\n    };\n  }, [validateAndRefreshToken]);\n\n  if (session && typeof session === 'object' && session.data !== undefined && session.data !== null) {\n    return {\n      isLoggedIn: true,\n      isPending,\n      login: async (username: string, password: string) =>\n        await loginMutation.mutateAsync({ username, password }),\n      signup: async (credentials: SignUpCredentials) =>\n        await signupMutation.mutateAsync(credentials),\n      verify: async (username: string, code: string) =>\n        await verifyMutation.mutateAsync({ username, code }),\n      refreshToken: async () => await refreshMutation.mutateAsync(),\n      validateAndRefreshToken,\n      isLoading: loginMutation.isPending || signupMutation.isPending,\n      isError: loginMutation.isError || signupMutation.isError,\n      error: loginMutation.error || signupMutation.error,\n    }\n  } else {\n    return {\n      isLoggedIn: false,\n      isPending,\n      login: async (username: string, password: string) =>\n        await loginMutation.mutateAsync({ username, password }),\n      signup: async (credentials: SignUpCredentials) =>\n        await signupMutation.mutateAsync(credentials),\n      verify: async (username: string, code: string) =>\n        await verifyMutation.mutateAsync({ username, code }),\n      refreshToken: async () => await refreshMutation.mutateAsync(),\n      validateAndRefreshToken,\n      isLoading: loginMutation.isPending || signupMutation.isPending,\n      isError: loginMutation.isError || signupMutation.isError,\n      error: loginMutation.error || signupMutation.error,\n    };\n  }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useCharacterHandler.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":18,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":18,"endColumn":33}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\n\nimport { isInLoginProcessSignal, isInSignUpProcessSignal } from 'src/signals/appSignals';\n\ninterface IUseCharacterHandlerProps {\n  setLastTypedCharacter: (value:string|null) => void;\n  isInSvgMode: boolean;\n  isInLoginProcess: boolean;\n  writeOutputInternal: (output: string) => void;\n}\n\nexport type { IUseCharacterHandlerProps };\n\nexport const useCharacterHandler = ({\n  setLastTypedCharacter,\n  isInSvgMode,\n  writeOutputInternal,\n}: IUseCharacterHandlerProps) => {\n\n  const handleCharacter = useCallback((character: string) => {\n    localStorage.setItem('currentCharacter', character);\n\n    if (isInSvgMode) {\n      setLastTypedCharacter(character);\n    } else {\n      setLastTypedCharacter(null);\n    }\n\n    if (isInSignUpProcessSignal.value || isInLoginProcessSignal.value) {\n      writeOutputInternal('*');\n    }\n\n    return;\n  }, [\n    setLastTypedCharacter,\n    isInSvgMode,\n    writeOutputInternal,\n  ]);\n\n  return { handleCharacter };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useCommand.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":23,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":23,"endColumn":32},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_commandHistoryFilter` must not have a leading underscore.","line":27,"column":12,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":27,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_setCommandHistoryFilter` must not have a leading underscore.","line":27,"column":35,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":27,"endColumn":59},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":43,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":43,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":76,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableBoolean","endLine":76,"endColumn":55,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[3095,3133],"text":"(key?.startsWith(LogKeys.Command + '_')) ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[3095,3133],"text":"(key?.startsWith(LogKeys.Command + '_')) === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":83,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":83,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3323,3334],"text":"historyJSON != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3323,3334],"text":"historyJSON ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3323,3334],"text":"Boolean(historyJSON)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":132,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":132,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4962,4969],"text":"(command != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":132,"column":24,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":132,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4973,4980],"text":"(context != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useCommand.ts\nimport type React from 'react';\nimport { useContext, useState, useCallback, useEffect } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { activitySignal, appendToOutput } from 'src/signals/appSignals';\nimport { setCommandTime } from 'src/signals/commandLineSignals';\nimport { createLogger } from 'src/utils/Logger';\n\nimport { commandRegistry } from '../commands/commandRegistry';\nimport { CommandContext, type ICommandResponse } from '../contexts/CommandContext';\nimport { LogKeys } from '../types/TerminalTypes';\nimport { ActivityType, type OutputElement, type ParsedCommand } from '../types/Types';\nimport { parsedCommandToString, loadCommandHistory, saveCommandHistory } from '../utils/commandUtils';\n\nimport { useActivityMediator } from './useActivityMediator';\nimport { useWPMCalculator } from './useWPMCaculator';\n\n\nconst logger = createLogger({ prefix: 'useCommand' });\n\nexport const useCommand = () => {\n    const [output, setOutput] = useState<OutputElement[]>([]);\n    const [commandHistory, setCommandHistory] = useState<string[]>([]);\n    const [commandHistoryIndex, setCommandHistoryIndex] = useState(-1);\n    const [_commandHistoryFilter, _setCommandHistoryFilter] = useState<string | null>(null);\n    const currentActivity = useComputed(() => activitySignal.value);\n    const {\n        handleCommandExecuted,\n        checkTutorialProgress\n    } = useActivityMediator();\n    const wpmCalculator = useWPMCalculator();\n    const context = useContext(CommandContext);\n\n    if (context === undefined) {\n        throw new Error('useCommand must be used within a CommandProvider');\n    }\n\n    // Load command history from localStorage on mount\n    useEffect(() => {\n        const savedHistory = loadCommandHistory();\n        if (savedHistory && savedHistory.length > 0) {\n            logger.debug('Loaded command history:', savedHistory);\n            setCommandHistory(savedHistory);\n        }\n    }, []);\n\n    const resetOutput = useCallback(() => {\n        logger.debug('Resetting output');\n        setOutput([]);\n    }, []);\n\n    const addToCommandHistory = useCallback((command: ParsedCommand | string) => {\n        const commandString = typeof command === 'string'\n            ? command\n            : parsedCommandToString(command);\n\n        logger.debug('Adding to command history:', commandString);\n        setCommandHistory(prev => {\n            // Don't add if it's identical to the previous command\n            if (prev.length > 0 && prev[prev.length - 1] === commandString) {\n                return prev;\n            }\n            const newHistory = [...prev, commandString].slice(-120); // Keep last 120 commands\n            saveCommandHistory(newHistory); // Save to localStorage whenever history changes\n            return newHistory;\n        });\n    }, []);\n\n    const getCommandResponseHistory = useCallback((): string[] => {\n        const keys: string[] = [];\n        const history: string[] = [];\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key?.startsWith(LogKeys.Command + '_')) {\n                keys.push(key);\n            }\n        }\n        keys.sort();\n        for (const key of keys) {\n            const historyJSON = localStorage.getItem(key);\n            if (historyJSON) {\n                history.push(historyJSON);\n            }\n        }\n        logger.debug('Retrieved command response history:', history);\n        return history;\n    }, []);\n\n    const createCommandRecord = useCallback((\n        command: ParsedCommand,\n        response: React.ReactNode,\n        status: number,\n        commandTime: Date,\n        sensitive?: boolean\n    ): OutputElement => {\n        const wpms = wpmCalculator.getWPMs();\n        logger.debug('Creating command record:', { command, response, status });\n        return {\n            command,\n            response,\n            status,\n            wpmAverage: wpms.wpmAverage,\n            characterAverages: wpms.charWpms,\n            commandTime,\n            sensitive\n        };\n    }, [wpmCalculator]);\n\n    const processCommandOutput = useCallback((\n        command: ParsedCommand,\n        response: ICommandResponse,\n    ): void => {\n        logger.debug('Processing command output:', { command, response });\n        const commandTime = new Date();\n        const outputElement = createCommandRecord(\n            command,\n            response.message,\n            response.status,\n            commandTime,\n            response.sensitive\n        );\n        appendToOutput(outputElement);\n        addToCommandHistory(command);\n    }, [createCommandRecord, addToCommandHistory]);\n\n    const executeCommand = useCallback(async (parsedCommand: ParsedCommand) => {\n        // Breakpoint 5: Start of command execution\n        logger.debug('Executing command:', parsedCommand);\n        const command = commandRegistry.getCommand(parsedCommand.command);\n        if (command && context) {\n            try {\n                const response = await command.execute(context, parsedCommand);\n                logger.debug('Command executed successfully:', response);\n                processCommandOutput(parsedCommand, response);\n                handleCommandExecuted(parsedCommand);\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';\n                logger.error('Command execution failed:', error);\n                processCommandOutput(parsedCommand, {\n                    status: 500,\n                    message: errorMessage\n                });\n                handleCommandExecuted(parsedCommand);\n            }\n        } else {\n            // Breakpoint 6: Tutorial command handling\n            const response = currentActivity.value === ActivityType.TUTORIAL ? `Tutorial attempt: ${parsedCommand.command}` : `Command not found: ${parsedCommand.command}`;\n            logger.debug('Command not found:', { command: parsedCommand.command, activity: currentActivity.value });\n            processCommandOutput(parsedCommand, {\n                status: 404,\n                message: response\n            });\n            handleCommandExecuted(parsedCommand);\n        }\n    }, [context, processCommandOutput, handleCommandExecuted, currentActivity]);\n\n    const handleCommand = useCallback(async (parsedCommand: ParsedCommand) => {\n        // Breakpoint 7: Start of command handling\n        logger.debug('Handling command:', { parsedCommand, activity: currentActivity.value });\n        setCommandTime(new Date());\n        if (currentActivity.value === ActivityType.TUTORIAL) {\n            // Breakpoint 8: Tutorial progress check\n            logger.debug('Processing tutorial command:', parsedCommand.command);\n            checkTutorialProgress(parsedCommand.command);\n        }\n\n        await executeCommand(parsedCommand);\n    }, [currentActivity.value, executeCommand, checkTutorialProgress]);\n\n    return {\n        output,\n        resetOutput,\n        commandHistory,\n        addToCommandHistory,\n        getCommandResponseHistory,\n        handleCommand,\n        commandHistoryIndex,\n        setCommandHistoryIndex,\n        commandHistoryFilter: _commandHistoryFilter,\n        setCommandHistoryFilter: _setCommandHistoryFilter,\n        appendToOutput,\n        executeCommand\n    };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useReactiveLocation.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":7,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":7,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\n\nimport { useLocation, useSearchParams } from 'react-router-dom';\n\nimport { useSignal, useComputed } from '@preact/signals-react';\n\nexport function useReactiveLocation() {\n  const location = useLocation();\n  useSearchParams();\n\n  const pathSignal = useSignal(location.pathname);\n  const searchSignal = useSignal(location.search);\n  const isInitialized = useSignal(false);\n\n  useEffect(() => {\n    if (!isInitialized.value) {\n      pathSignal.value = location.pathname;\n      searchSignal.value = location.search;\n      isInitialized.value = true;\n    } else {\n      // Only update if the location has actually changed\n      if (pathSignal.value !== location.pathname || searchSignal.value !== location.search) {\n        pathSignal.value = location.pathname;\n        searchSignal.value = location.search;\n      }\n    }\n  }, [location, pathSignal, searchSignal, isInitialized]);\n\n\n  return {\n    pathname: pathSignal,\n    search: searchSignal,\n    isInitialized: useComputed(() => isInitialized.value)\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useResizeCanvasAndFont.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":4,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":4,"endColumn":39},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":5,"column":38,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":5,"endColumn":70,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[189,221],"text":"(localStorage.getItem(\"fontSize\") != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[189,221],"text":"(localStorage.getItem(\"fontSize\") ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[189,221],"text":"(Boolean(localStorage.getItem(\"fontSize\")))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":6,"column":42,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":6,"endColumn":79,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[273,310],"text":"(localStorage.getItem('canvas-height') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[273,310],"text":"(localStorage.getItem('canvas-height') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[273,310],"text":"(Boolean(localStorage.getItem('canvas-height')))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":17,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableNumber","endLine":17,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[777,805],"text":"(lastTouchDistanceRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[777,805],"text":"(lastTouchDistanceRef.current ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[777,805],"text":"(Boolean(lastTouchDistanceRef.current))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":21,"column":21,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":21,"endColumn":32}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// useResizeCanvasAndFont.ts\nimport { useState, useCallback, type TouchEventHandler, useRef } from 'react';\n\nexport function useResizeCanvasAndFont() {\n    const initialFontSize = parseInt(localStorage.getItem(\"fontSize\") || '17');\n    const initialCanvasHeight = parseInt(localStorage.getItem('canvas-height') || '100');\n    const [fontSize, setFontSize] = useState(initialFontSize);\n    const [canvasHeight, setCanvasHeight] = useState(initialCanvasHeight);\n    const lastTouchDistanceRef = useRef<number | null>(null);\n\n    const handleTouchMove = useCallback((event: TouchEvent) => {\n        if (event.touches.length === 2) {\n            event.preventDefault();\n\n            const currentDistance =\n                getDistanceBetweenTouches(event.touches);\n            if (lastTouchDistanceRef.current && lastTouchDistanceRef.current > 0) {\n                const eventTarget = event.target as HTMLElement;\n                const scaleFactor = currentDistance /\n                    lastTouchDistanceRef.current;\n                if (eventTarget && eventTarget.nodeName ===\n                    'CANVAS') {\n                    setCanvasHeight(prevCanvasHeight => prevCanvasHeight * scaleFactor);\n                } else {\n                    setFontSize(prevFontSize => prevFontSize *\n                        scaleFactor);\n                    document.documentElement.style.setProperty('--rminal-font-size', `${fontSize}px`);\n                }\n                lastTouchDistanceRef.current = currentDistance;\n            }\n        }\n    }, [fontSize]);\n\n    const handleTouchStart: TouchEventHandler<HTMLElement> = (event: React.TouchEvent<HTMLElement>) => {\n        setTimeout(() => {\n            // this.terminalElement.focus();\n        }, 500)\n        if (event.touches.length === 2) {\n            // event.preventDefault();\n            lastTouchDistanceRef.current = getDistanceBetweenTouches(event.touches as unknown as TouchList);\n        }\n    }\n\n    const handleTouchEnd: TouchEventHandler<HTMLDivElement> = () => {\n        localStorage.setItem('terminalFontSize', `${fontSize}`);\n        lastTouchDistanceRef.current = null;\n    }\n\n    const getDistanceBetweenTouches = (touches: TouchList): number => {\n        const touch1 = touches[0];\n        const touch2 = touches[1];\n        return Math.sqrt(\n            Math.pow(touch2.pageX - touch1.pageX, 2) +\n            Math.pow(touch2.pageY - touch1.pageY, 2),\n        );\n    }\n\n    // Return the state and handlers\n    return {\n        fontSize,\n        canvasHeight,\n        handleTouchMove,\n        handleTouchStart,\n        handleTouchEnd,\n    };\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useStateLogger.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":3,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":3,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":11,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":11,"endColumn":87},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":11,"column":27,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":11,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[315,335],"text":"(prevStateRef.current != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[315,335],"text":"(prevStateRef.current ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[315,335],"text":"(Boolean(prevStateRef.current))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":13,"column":11,"nodeType":"Property","messageId":"anyAssignment","endLine":13,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":19,"column":46,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":19,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":19,"column":64,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":19,"endColumn":82},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":28,"column":44,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":28,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":28,"column":62,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":28,"endColumn":82}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useRef, useEffect } from 'react';\n\nexport function useStateLogger<T>(state: T, name: string) {\n  const prevStateRef = useRef<string | null>(null);\n\n  useEffect(() => {\n    try {\n      const currentState = JSON.stringify(state);\n\n      if (prevStateRef.current !== currentState) {\n        const prevState = prevStateRef.current ? JSON.parse(prevStateRef.current) : {};\n        const stateChangeLog = {\n          from: prevState,\n          to: state\n        };\n\n        // Log error without using console.log\n        const logMessage = `[${name}] State changed: ${JSON.stringify(stateChangeLog, null, 2)}`;\n        if (typeof window !== 'undefined' && window.console && window.console.log) {\n          window.console.log(logMessage);\n        }\n\n        prevStateRef.current = currentState;\n      }\n    } catch (error) {\n      // Silent error handling to prevent breaking the application\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error in state logging';\n      if (typeof window !== 'undefined' && window.console && window.console.error) {\n        window.console.error(`[${name}] State logging error:`, errorMessage);\n      }\n    }\n  }, [state, name]);\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useTerminal.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":2,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":2,"endColumn":13},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":36,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":33},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_commandLineState` must not have a leading underscore.","line":42,"column":10,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":42,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Variable name `_setCommandLineState` must not have a leading underscore.","line":42,"column":29,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":42,"endColumn":49},{"ruleId":"import/no-named-as-default-member","severity":1,"message":"Caution: `React` also has a named export `useState`. Check if you meant to write `import {useState} from 'react'` instead.","line":42,"column":53,"nodeType":"MemberExpression","endLine":42,"endColumn":67},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":52,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":52,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1753,1762],"text":"instance == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":76,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":76,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2420,2429],"text":"instance == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":81,"column":11,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":81,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2603,2607],"text":"line != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":92,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":92,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3017,3026],"text":"instance == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":99,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":99,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3300,3309],"text":"(instance == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":106,"column":13,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":106,"endColumn":27,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3517,3531],"text":"currentCommand.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3517,3531],"text":"currentCommand !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3517,3531],"text":"Boolean(currentCommand)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":117,"column":13,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":117,"endColumn":25,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[3954,3966],"text":"savedCommand.length > 0"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[3954,3966],"text":"savedCommand !== \"\""},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3954,3966],"text":"Boolean(savedCommand)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":128,"column":31,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":128,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4233,4257],"text":"(commandHistory[newIndex] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[4233,4257],"text":"(commandHistory[newIndex] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[4233,4257],"text":"(Boolean(commandHistory[newIndex]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":145,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":145,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4643,4652],"text":"instance == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":152,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":152,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[4811,4820],"text":"instance == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":200,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":200,"endColumn":37,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6093,6093],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":211,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":211,"endColumn":38,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6465,6465],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":224,"column":9,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":224,"endColumn":38,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[6994,6994],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":247,"column":12,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":247,"endColumn":20},{"ruleId":"consistent-return","severity":2,"message":"Arrow function expected no return value.","line":277,"column":5,"nodeType":"ReturnStatement","messageId":"unexpectedReturnValue","endLine":280,"endColumn":7}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// hooks/useTerminal.ts\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { FitAddon } from '@xterm/addon-fit';\nimport { useXTerm } from 'react-xtermjs';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { TERMINAL_CONSTANTS } from 'src/constants/terminal';\nimport {\n  isInLoginProcessSignal,\n  isInSignUpProcessSignal,\n  setActivity,\n  setIsInLoginProcess,\n  setIsInSignUpProcess,\n  setTempEmail,\n  setTempPassword,\n  setTempUserName,\n  tempEmailSignal,\n  tempPasswordSignal,\n  tempUserNameSignal\n} from 'src/signals/appSignals';\nimport { addKeystroke, commandLineSignal , setCommandLine } from 'src/signals/commandLineSignals';\nimport { ActivityType } from 'src/types/Types';\nimport { parseCommand } from 'src/utils/commandUtils';\nimport { createLogger } from 'src/utils/Logger';\n\nimport { XtermAdapterConfig } from '../components/XtermAdapterConfig';\n\nimport { useCharacterHandler } from './useCharacterHandler';\nimport { useCommand } from './useCommand';\nimport { useWPMCalculator } from './useWPMCaculator';\n\nconst logger = createLogger({ prefix: 'useTerminal' });\n\nexport const useTerminal = () => {\n  const { instance, ref: xtermRef } = useXTerm({ options: XtermAdapterConfig });\n  const { handleCommand, commandHistory, commandHistoryIndex, setCommandHistoryIndex } = useCommand();\n  const wpmCalculator = useWPMCalculator();\n  const commandLine = useComputed(() => commandLineSignal.value);\n\n  const [_commandLineState, _setCommandLineState] = React.useState('');\n\n  const fitAddon = useRef(new FitAddon());\n\n  const writeToTerminal = useCallback((data: string) => {\n    logger.debug('Writing to terminal:', data);\n    instance?.write(data);\n  }, [instance]);\n\n  const resetPrompt = useCallback(() => {\n    if (!instance) return;\n    logger.debug('Resetting prompt');\n    instance.reset();\n    setCommandLine('');\n    _setCommandLineState('');\n    instance.write(TERMINAL_CONSTANTS.PROMPT);\n    instance.scrollToBottom();\n  }, [instance]);\n\n  const lastTypedCharacterRef = useRef<string | null>(null);\n  const setLastTypedCharacter = (value: string | null) => {\n    lastTypedCharacterRef.current = value;\n  };\n\n  const {\n    handleCharacter,\n  } = useCharacterHandler({\n    setLastTypedCharacter,\n    isInSvgMode: false,\n    isInLoginProcess: isInLoginProcessSignal.value,\n    writeOutputInternal: writeToTerminal,\n  });\n\n  const getCurrentCommand = useCallback(() => {\n    if (!instance) return '';\n    const buffer = instance.buffer.active;\n    let command = '';\n    for (let i = 0; i <= buffer.cursorY; i++) {\n      const line = buffer.getLine(i);\n      if (line) {\n        command += line.translateToString(true);\n      }\n    }\n    const promptEndIndex = command.indexOf(TERMINAL_CONSTANTS.PROMPT) + TERMINAL_CONSTANTS.PROMPT_LENGTH;\n    const currentCommand = command.substring(promptEndIndex).trimStart();\n    logger.debug('Getting current command:', currentCommand);\n    return currentCommand;\n  }, [instance]);\n\n  const clearCurrentLine = useCallback(() => {\n    if (!instance) return;\n    logger.debug('Clearing current line');\n    instance.write('\\x1b[2K\\r'); // Clear the current line\n    instance.write(TERMINAL_CONSTANTS.PROMPT); // Rewrite prompt\n  }, [instance]);\n\n  const navigateHistory = useCallback((direction: 'up' | 'down') => {\n    if (!instance || (commandHistory.length === 0)) return;\n\n    let newIndex = commandHistoryIndex;\n\n    if (direction === 'up') {\n      if (newIndex === -1) {\n        const currentCommand = getCurrentCommand();\n        if (currentCommand) {\n          setCommandLine(currentCommand);\n          _setCommandLineState(currentCommand);\n        }\n      }\n      newIndex = newIndex === -1 ? commandHistory.length - 1 : Math.max(0, newIndex - 1);\n    } else {\n      newIndex = newIndex === -1 ? -1 : Math.min(commandHistory.length - 1, newIndex + 1);\n      if (newIndex === -1) {\n        clearCurrentLine();\n        const savedCommand = commandLine.value;\n        if (savedCommand) {\n          instance.write(savedCommand);\n          setCommandLine(savedCommand);\n          _setCommandLineState(savedCommand);\n        }\n        setCommandHistoryIndex(newIndex);\n        return;\n      }\n    }\n\n    clearCurrentLine();\n    const historicalCommand = commandHistory[newIndex] || '';\n    instance.write(historicalCommand);\n    setCommandLine(historicalCommand);\n    _setCommandLineState(historicalCommand);\n    setCommandHistoryIndex(newIndex);\n  }, [\n    instance,\n    commandHistory,\n    commandHistoryIndex,\n    getCurrentCommand,\n    clearCurrentLine,\n    setCommandHistoryIndex,\n    commandLine,\n    _setCommandLineState,\n  ]);\n\n  useEffect(() => {\n    if (!instance) return;\n    instance.loadAddon(fitAddon.current);\n    fitAddon.current.fit();\n    resetPrompt();\n  }, [instance, resetPrompt]);\n\n  useEffect(() => {\n    if (!instance) return;\n\n    const handleControlCharacters = (data: string, cursorX: number) => {\n      logger.debug('Handling control character:', { data, cursorX });\n      switch (data) {\n        case '\\x03': // Ctrl+C\n          setCommandLine('');\n          _setCommandLineState('');\n          setActivity(ActivityType.NORMAL);\n          instance?.write('^C');\n          resetPrompt();\n          return true;\n\n        case '\\r': // Enter key\n          handleEnterKey();\n          return true;\n\n        case '\\x7F': // Backspace\n          handleBackspace(cursorX);\n          return true;\n\n        case '\\x1b[D': // Left arrow\n          if (cursorX > TERMINAL_CONSTANTS.PROMPT_LENGTH) {\n            instance?.write(data);\n          }\n          return true;\n\n        case '\\x1b[A': // Up arrow\n          navigateHistory('up');\n          return true;\n\n        case '\\x1b[B': // Down arrow\n          navigateHistory('down');\n          return true;\n\n        default:\n          return false;\n      }\n    };\n\n    const handleEnterKey = () => {\n      logger.debug('Handling Enter key');\n      if (isInLoginProcessSignal.value) {\n        const loginCommand = parseCommand([\n          'login',\n          tempUserNameSignal.value,\n          tempPasswordSignal.value\n        ].join(' '));\n        handleCommand(loginCommand);\n        setIsInLoginProcess(false);\n        setTempPassword('');\n        setTempUserName('');\n      } else if (isInSignUpProcessSignal.value) {\n        const signupCommand = parseCommand([\n          'signup',\n          tempUserNameSignal.value,\n          tempEmailSignal.value,\n          tempPasswordSignal.value\n        ].join(' '));\n        handleCommand(signupCommand);\n        setIsInSignUpProcess(false);\n        setTempPassword('');\n        setTempUserName('');\n        setTempEmail('');\n      } else {\n        const currentCommand = getCurrentCommand();\n        logger.debug('Processing command:', currentCommand);\n        const parsedCommand = parseCommand(currentCommand === '' ? '\\r' : currentCommand);\n        logger.debug('Parsed command:', parsedCommand);\n        instance?.write('\\r\\n');\n        setCommandLine('');\n        _setCommandLineState('');\n        handleCommand(parsedCommand);\n        wpmCalculator.clearKeystrokes();\n      }\n      setCommandHistoryIndex(-1); // Reset history index after command execution\n      resetPrompt();\n    };\n\n    const handleBackspace = (cursorX: number) => {\n      logger.debug('Handling backspace:', { cursorX });\n      if (isInLoginProcessSignal.value || isInSignUpProcessSignal.value) {\n        if (tempPasswordSignal.value.length > 0) {\n          tempPasswordSignal.value = tempPasswordSignal.value.slice(0, -1);\n          instance?.write('\\b \\b');\n        }\n      } else if (cursorX > TERMINAL_CONSTANTS.PROMPT_LENGTH) {\n        instance?.write('\\b \\b');\n        const newCommandLine = _commandLineState.slice(0, -1);\n        setCommandLine(newCommandLine);\n        _setCommandLineState(newCommandLine);\n      }\n    };\n\n    const handleData = (data: string) => {\n      if (!instance) return;\n      logger.debug('Handling terminal data:', data);\n      const cursorX = instance.buffer.active.cursorX;\n\n      if (handleControlCharacters(data, cursorX)) {\n        return;\n      }\n\n      // Handle regular character input\n      if (isInLoginProcessSignal.value || isInSignUpProcessSignal.value) {\n        tempPasswordSignal.value += data;\n        handleCharacter(data); // This will handle masking\n      } else {\n        const newCommandLine = _commandLineState + data;\n        instance.write(data);\n        setCommandLine(newCommandLine);\n        _setCommandLineState(newCommandLine);\n        addKeystroke(data);\n      }\n      return;\n    };\n\n    const resizeHandler = () => {\n      fitAddon.current.fit();\n      instance.scrollToBottom();\n    };\n    window.addEventListener('resize', resizeHandler);\n\n    const dataHandler = instance.onData(handleData);\n\n    return () => {\n      window.removeEventListener('resize', resizeHandler);\n      dataHandler.dispose();\n    };\n  }, [\n    instance,\n    getCurrentCommand,\n    resetPrompt,\n    wpmCalculator,\n    commandLine,\n    navigateHistory,\n    handleCharacter,\n    _commandLineState,\n    handleCommand,\n    setCommandHistoryIndex,\n  ]);\n\n  return {\n    xtermRef,\n    writeToTerminal,\n    resetPrompt,\n  };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useTutorials.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":17,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":17,"endColumn":33},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":66,"column":14,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":66,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2534,2558],"text":"(currentTutorial?.phrase) == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2535,2558],"text":"((currentTutorial?.phrase) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2534,2558],"text":"!Boolean((currentTutorial?.phrase))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useTutorial.ts\nimport { useState, useCallback, useEffect } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport {\n    completedTutorialsSignal,\n    getNextTutorial,\n} from 'src/signals/tutorialSignals';\nimport { createLogger } from 'src/utils/Logger';\nimport { parseLocation } from 'src/utils/navigationUtils';\n\nimport { type Tutorial, Tutorials } from \"../types/Types\";\n\nconst logger = createLogger({ prefix: 'useTutorials' });\n\nexport const useTutorial = () => {\n    const [, setCurrentTutorial] = useState<Tutorial | null>(null);\n    const completedTutorials = useComputed(() => completedTutorialsSignal.value);\n\n    // Get all completed tutorials as an array if needed\n    const completedTutorialsArray = () => {\n        const completed = [...completedTutorialsSignal.value];\n        logger.debug('Completed tutorials:', completed);\n        return completed;\n    }\n\n    const getIncompleteTutorials = useCallback((): Tutorial[] => {\n        // Breakpoint 9: Getting incomplete tutorials\n        const incomplete = Tutorials.filter(tut => !completedTutorialsArray().includes(tut.phrase));\n        logger.debug('Incomplete tutorials:', incomplete);\n        return incomplete;\n    }, [])\n\n    const getTutorialsInGroup = (groupName: string) => {\n        // Breakpoint 10: Getting tutorials in group\n        const result = Tutorials.filter(t => t.tutorialGroup === groupName);\n        logger.debug('Tutorials in group:', { groupName, result });\n        return result;\n    }\n\n    const getTutorialByPhrasekey = (phraseKey: string) => {\n        // Breakpoint 11: Getting tutorial by phrase key\n        const currentTutorial = Tutorials.find(t => t.phrase === phraseKey?.replace('_r', '\\r'));\n        logger.debug('Getting tutorial by phrase key:', {\n            phraseKey,\n            currentTutorial,\n            normalizedKey: phraseKey?.replace('_r', '\\r'),\n            allTutorials: Tutorials.map(t => ({ phrase: t.phrase, prompt: t.prompt }))\n        });\n        return currentTutorial;\n    }\n\n    const canUnlockTutorial = (command: string): boolean => {\n        // Breakpoint 12: Checking if can unlock tutorial\n        const phraseKey = parseLocation().contentKey ?? '';\n        const currentTutorial = getTutorialByPhrasekey(phraseKey);\n        logger.debug('Checking if can unlock tutorial:', {\n            command,\n            phraseKey,\n            currentTutorial,\n            location: parseLocation(),\n            completedTutorials: completedTutorialsArray()\n        });\n\n        if (!currentTutorial?.phrase) {\n            logger.debug('No current tutorial found');\n            return false;\n        }\n\n        // Breakpoint 13: Tutorial phrase comparison\n        if (currentTutorial.phrase === command) {\n            logger.debug('Tutorial unlocked:', command);\n            return true;\n        }\n        logger.debug('Tutorial not unlocked:', {\n            expected: currentTutorial.phrase,\n            received: command,\n            charCodesExpected: [...currentTutorial.phrase].map(c => c.charCodeAt(0)),\n            charCodesReceived: [...command].map(c => c.charCodeAt(0))\n        });\n        return false;\n    };\n\n    const getIncompleteTutorialsInGroup = (groupName: string) => {\n        // Breakpoint 14: Getting incomplete tutorials in group\n        const incompleteTutorials = getIncompleteTutorials();\n        const tutorialsInGroup = getTutorialsInGroup(groupName);\n\n        const result = tutorialsInGroup\n            .filter(tig => incompleteTutorials.includes(tig));\n        logger.debug('Incomplete tutorials in group:', {\n            groupName,\n            result,\n            allIncomplete: incompleteTutorials,\n            groupTutorials: tutorialsInGroup\n        });\n        return result;\n    }\n\n    useEffect(() => {\n        const nextTutorial = getNextTutorial();\n        logger.debug('Setting current tutorial:', nextTutorial);\n        setCurrentTutorial(nextTutorial);\n    }, [completedTutorials]);\n\n    return {\n        getTutorialByPhrasekey,\n        canUnlockTutorial,\n        getTutorialsInGroup,\n        getIncompleteTutorialsInGroup\n    };\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/hooks/useWPMCaculator.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":36,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/hooks/useWPMCalculator.ts\n\nimport { useCallback } from 'react';\n\nimport { useComputed } from '@preact/signals-react';\n\nimport { keystrokesSignal, addKeystroke, clearKeystrokes } from 'src/signals/commandLineSignals';\n\nimport { type WPM, type WPMs } from '../types/Types';\n\n\nexport const useWPMCalculator = () => {\n  const keystrokes = useComputed(() => keystrokesSignal.value);\n\n\n  const getWPMs = useCallback((): WPMs => {\n    if (keystrokes.value.length < 2) return { wpmAverage: 0, charWpms: [] };\n\n    const charWpms: WPM[] = [];\n    let totalWPM = 0;\n\n    for (let i = 1; i < keystrokes.value.length; i++) {\n      const duration = keystrokes.value[i].timestamp - keystrokes.value[i-1].timestamp;\n      const minutes = duration / 60000; // Convert to minutes\n      const cpm = 1 / minutes; // 1 character per minute.\n      const wpm = cpm / 5; // five character words per minute.\n\n      charWpms.push({\n        character: keystrokes.value[i].char,\n        wpm,\n        durationMilliseconds: duration\n      });\n\n      totalWPM += wpm;\n    }\n\n    const wpmAverage = totalWPM / (keystrokes.value.length - 1);\n\n    return {\n      wpmAverage,\n      charWpms: Object.freeze(charWpms) // Make charWpms immutable\n    };\n  }, [keystrokes]);\n\n  return {\n    addKeystroke,\n    getWPMs, // Return the memoized value\n    clearKeystrokes,\n    keystrokeCount: keystrokes.value.length // Add this for debugging\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/main.tsx","messages":[{"ruleId":"import/order","severity":2,"message":"`react` import should occur before import of `buffer`","line":4,"column":1,"nodeType":"ImportDeclaration","endLine":4,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":4,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":4,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `App` must match one of the following formats: camelCase","line":8,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":8,"endColumn":11},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":5,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[527,546],"text":"(import.meta.env.DEV != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[527,546],"text":"(import.meta.env.DEV ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[527,546],"text":"(Boolean(import.meta.env.DEV))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":20,"column":28,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":20,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[550,570],"text":"(import.meta.env.TEST != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[550,570],"text":"(import.meta.env.TEST ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[550,570],"text":"(Boolean(import.meta.env.TEST))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":24,"column":1,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":59,"endColumn":6,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[596,596],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_fetcherPersist` must match one of the following formats: camelCase, UPPER_CASE","line":39,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":39,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_normalizeFormMethod` must match one of the following formats: camelCase, UPPER_CASE","line":40,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":40,"endColumn":29},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_partialHydration` must match one of the following formats: camelCase, UPPER_CASE","line":41,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":41,"endColumn":26},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_relativeSplatPath` must match one of the following formats: camelCase, UPPER_CASE","line":42,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":42,"endColumn":27},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_skipActionErrorRevalidation` must match one of the following formats: camelCase, UPPER_CASE","line":43,"column":7,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":43,"endColumn":37},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":2,"message":"Forbidden non-null assertion.","line":49,"column":17,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":49,"endColumn":49},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `v7_startTransition` must match one of the following formats: camelCase, UPPER_CASE","line":55,"column":22,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":55,"endColumn":40}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Buffer } from 'buffer';\n\nimport './commands';\nimport React from 'react';\n\nimport { createBrowserRouter, RouterProvider } from 'react-router-dom';\n\nimport App from './App'\nimport { exposeSignals } from './e2e/helpers/exposeSignals';\nimport { QueryProvider } from './providers/QueryProvider';\n\nwindow.Buffer = Buffer;\n\n// Define 'global' if it's undefined (for browser environments)\nif (typeof global === 'undefined') {\n  window.global = window;\n}\n\n// Expose signals for e2e testing in development/test environments\nif (import.meta.env.DEV || import.meta.env.TEST) {\n  exposeSignals();\n}\n\n(async () => {\n  const ReactDOM = await import('react-dom/client');\n  const router = createBrowserRouter([\n    {\n      path: '/*',\n      element: <App />,\n      children: [\n        { path: 'game/:phraseId', element: <App /> },\n        { path: 'tutorial/:tutorialId', element: <App /> },\n        { path: 'edit', element: <App /> },\n      ]\n    }\n  ],\n  {\n    future: {\n      v7_fetcherPersist: true,\n      v7_normalizeFormMethod: true,\n      v7_partialHydration: true,\n      v7_relativeSplatPath: true,\n      v7_skipActionErrorRevalidation: true,\n    }\n  }\n)\n\n  ReactDOM\n    .createRoot(document.getElementById('root')!)\n    .render(\n      <React.StrictMode>\n        <QueryProvider>\n          <RouterProvider\n            router={router}\n            future={{v7_startTransition:true}} />\n        </QueryProvider>\n      </React.StrictMode>\n    );\n})();\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/providers/QueryProvider.tsx","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":18,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":18,"endColumn":30}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ReactNode } from 'react';\n\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000, // 5 minutes\n      retry: 1,\n    },\n  },\n});\n\ninterface QueryProviderProps {\n  children: ReactNode;\n}\n\nexport function QueryProvider({ children }: QueryProviderProps) {\n  return (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/signals/appSignals.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":14,"column":1,"nodeType":"ExportNamedDeclaration","endLine":14,"endColumn":73},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":15,"column":1,"nodeType":"ExportNamedDeclaration","endLine":15,"endColumn":62},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":16,"column":1,"nodeType":"ExportNamedDeclaration","endLine":16,"endColumn":56},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":17,"column":1,"nodeType":"ExportNamedDeclaration","endLine":17,"endColumn":57},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":18,"column":1,"nodeType":"ExportNamedDeclaration","endLine":18,"endColumn":62},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":19,"column":1,"nodeType":"ExportNamedDeclaration","endLine":19,"endColumn":63},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":20,"column":1,"nodeType":"ExportNamedDeclaration","endLine":20,"endColumn":54},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":21,"column":1,"nodeType":"ExportNamedDeclaration","endLine":21,"endColumn":54},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":22,"column":1,"nodeType":"ExportNamedDeclaration","endLine":22,"endColumn":51},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":24,"column":1,"nodeType":"ExportNamedDeclaration","endLine":26,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":24,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":56},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":27,"column":1,"nodeType":"ExportNamedDeclaration","endLine":29,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":27,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":27,"endColumn":47},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":31,"column":1,"nodeType":"ExportNamedDeclaration","endLine":34,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":31,"column":31,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":33},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":36,"column":1,"nodeType":"ExportNamedDeclaration","endLine":38,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":36,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":36,"endColumn":55},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":40,"column":1,"nodeType":"ExportNamedDeclaration","endLine":42,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":40,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":40,"endColumn":50},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":44,"column":1,"nodeType":"ExportNamedDeclaration","endLine":46,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":44,"column":48,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":44,"endColumn":50},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":49,"column":1,"nodeType":"ExportNamedDeclaration","endLine":57,"endColumn":4},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":56,"column":29,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":56,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":66,"column":29,"nodeType":"CallExpression","messageId":"unsafeReturn","endLine":66,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":74,"column":53,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":74,"endColumn":55},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":79,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":79,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":82,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":82,"endColumn":30,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[2748,2765],"text":"(element.sensitive ?? false)"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[2748,2765],"text":"(element.sensitive === true)"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":82,"column":34,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":82,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":96,"column":55,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":96,"endColumn":57},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":103,"column":47,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":103,"endColumn":49},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":107,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":107,"endColumn":52}],"suppressedMessages":[],"errorCount":31,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/signals/appSignals.ts\nimport { computed, signal } from '@preact/signals-react';\n\nimport { ActivityType, type OutputElement } from 'src/types/Types';\nimport { createLogger, LogLevel } from 'src/utils/Logger';\nimport { createPersistentSignal } from 'src/utils/signalPersistence';\n\nconst logger = createLogger({\n  prefix: 'AppSignals',\n  level: LogLevel.DEBUG\n});\n\nconst currentOutputKey = 'current-output';\nexport const activitySignal = signal<ActivityType>(ActivityType.NORMAL);\nexport const notificationSignal = signal<string | null>(null)\nexport const isEditModeSignal = signal<boolean>(false);\nexport const isShowVideoSignal = signal<boolean>(false);\nexport const isInLoginProcessSignal = signal<boolean>(false);\nexport const isInSignUpProcessSignal = signal<boolean>(false);\nexport const tempUserNameSignal = signal<string>('');\nexport const tempPasswordSignal = signal<string>('');\nexport const tempEmailSignal = signal<string>('');\n\nexport const setIsInSignUpProcess = (value: boolean) => {\n    isInSignUpProcessSignal.value = value;\n}\nexport const setTempEmail = (value: string) => {\n    tempEmailSignal.value = value;\n}\n\nexport const toggleVideo = () => {\n    isShowVideoSignal.value = !isShowVideoSignal.value;\n    return isShowVideoSignal.value;\n}\n\nexport const setIsInLoginProcess = (value: boolean) => {\n    isInLoginProcessSignal.value = value;\n};\n\nexport const setTempUserName = (value: string) => {\n    tempUserNameSignal.value = value;\n};\n\nexport const setTempPassword = (value: string) => {\n    tempPasswordSignal.value = value;\n};\n\n// Create a persistent signal for bypassTutorial\nexport const {\n    signal: bypassTutorialSignal,\n    update: setBypassTutorial\n} = createPersistentSignal({\n    key: 'bypassTutorialKey', // Unique key for localStorage\n    signal: signal<boolean>(false),\n    serialize: (value) => JSON.stringify(value),\n    deserialize: (value) => JSON.parse(value)\n});\n\nconst {\n    signal: outputElementsSignal,\n    update: updateOutput\n} = createPersistentSignal({\n    key: currentOutputKey,\n    signal: signal<OutputElement[]>([]),\n    serialize: (value) => JSON.stringify(value),\n    deserialize: (value) => JSON.parse(value)\n});\n\nexport { outputElementsSignal };\n\nexport const isInGameModeSignal = computed(() => activitySignal.value === ActivityType.GAME);\nexport const isInTutorialModeSignal = computed(() => activitySignal.value === ActivityType.TUTORIAL);\n\nexport const setActivity = (activity: ActivityType) => {\n    activitySignal.value = activity;\n    logger.debug(ActivityType[activitySignal.value]);\n};\n\nexport const appendToOutput = (element: OutputElement) => {\n    updateOutput(prevOutput => {\n        // If the command is sensitive, mask the args except the first one (username)\n        if (element.sensitive && element.command) {\n            const maskedCommand = {\n                ...element.command,\n                args: element.command.args.map((arg, index) =>\n                    index === 0 ? arg : '*'.repeat(arg.length)\n                )\n            };\n            element = { ...element, command: maskedCommand };\n        }\n        const newOutput = [...prevOutput, element].slice(-3);\n        return newOutput;\n    });\n};\n\nexport const setNotification = (notification: string) => {\n    notificationSignal.value = notification;\n}\n\nexport const isLoggedInSignal = signal<boolean>(false);\nexport const userNameSignal = signal<string | null>(null);\n\nexport const setIsLoggedIn = (value: boolean) => {\n    isLoggedInSignal.value = value;\n};\n\nexport const setUserName = (name: string | null) => {\n    userNameSignal.value = name;\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/signals/commandLineSignals.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":12,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":12,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":16,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":16,"endColumn":46},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":20,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":24,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":53},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":28,"column":52,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":54},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":32,"column":50,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":32,"endColumn":52}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/signals/wpmSignals.ts\nimport { signal } from \"@preact/signals-react\";\n\nimport { type Keystroke, type ParsedCommand } from \"../types/Types\"; // Assuming you have this type defined\n\nexport const keystrokesSignal = signal<Keystroke[]>([]);\nexport const commandSignal = signal<ParsedCommand>();\nexport const commandLineSignal = signal<string>('');\nexport const commandTimeSignal = signal<Date>(new Date);\nexport const promptInfoSignal = signal<string>('');\n\nexport const setPromptInfo = (info:string) => {\n  promptInfoSignal.value = info;\n}\n\nexport const addKeystroke = (char: string) => {\n  keystrokesSignal.value = [...keystrokesSignal.value, { char, timestamp: performance.now() }];\n};\n\nexport const clearKeystrokes = () => {\n  keystrokesSignal.value = [];\n};\n\nexport const setCommand = (command:ParsedCommand) => {\n  commandSignal.value = command;\n}\n\nexport const setCommandLine = (commandLine:string) => {\n  commandLineSignal.value = commandLine;\n}\n\nexport const setCommandTime = (commandTime:Date) => {\n  commandTimeSignal.value = commandTime;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/signals/gameSignals.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":9,"column":1,"nodeType":"ExportNamedDeclaration","endLine":9,"endColumn":70},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":10,"column":1,"nodeType":"ExportNamedDeclaration","endLine":10,"endColumn":65},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":11,"column":1,"nodeType":"ExportNamedDeclaration","endLine":11,"endColumn":54},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":12,"column":1,"nodeType":"ExportNamedDeclaration","endLine":12,"endColumn":58},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":13,"column":1,"nodeType":"ExportNamedDeclaration","endLine":13,"endColumn":72},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":14,"column":1,"nodeType":"ExportNamedDeclaration","endLine":14,"endColumn":60},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":15,"column":1,"nodeType":"ExportNamedDeclaration","endLine":15,"endColumn":60},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":16,"column":1,"nodeType":"ExportNamedDeclaration","endLine":16,"endColumn":63},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":20,"column":1,"nodeType":"ExportNamedDeclaration","endLine":22,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":20,"column":51,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":20,"endColumn":53},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":24,"column":1,"nodeType":"ExportNamedDeclaration","endLine":26,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":24,"column":54,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":24,"endColumn":56},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":28,"column":1,"nodeType":"ExportNamedDeclaration","endLine":30,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":28,"column":45,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":28,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Iterable<string> | null | undefined`.","line":36,"column":35,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":36,"endColumn":52},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":39,"column":1,"nodeType":"ExportNamedDeclaration","endLine":39,"endColumn":39},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":41,"column":1,"nodeType":"ExportNamedDeclaration","endLine":43,"endColumn":2},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":41,"column":61,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":41,"endColumn":63},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":45,"column":1,"nodeType":"ExportNamedDeclaration","endLine":50,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":52,"column":1,"nodeType":"ExportNamedDeclaration","endLine":56,"endColumn":3},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":58,"column":1,"nodeType":"ExportNamedDeclaration","endLine":67,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":58,"column":56,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":58,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":61,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":61,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2235,2248],"text":"tutorialGroup != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2235,2248],"text":"tutorialGroup ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2235,2248],"text":"Boolean(tutorialGroup)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":69,"column":1,"nodeType":"ExportNamedDeclaration","endLine":71,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":69,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":60},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":76,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":76,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2694,2709],"text":"storedTutorials != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2694,2709],"text":"storedTutorials ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2694,2709],"text":"Boolean(storedTutorials)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Iterable<string> | null | undefined`.","line":77,"column":48,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":77,"endColumn":75}],"suppressedMessages":[],"errorCount":27,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\n// gameSignals.ts\nimport { signal } from \"@preact/signals-react\";\n\nimport { type ActionType } from \"src/game/types/ActionTypes\";\nimport { type GamePhrase, Phrases } from \"src/types/Types\";\nimport { createPersistentSignal } from \"src/utils/signalPersistence\";\n\nexport const startGameSignal = signal<string | undefined>(undefined);\nexport const gamePhraseSignal = signal<GamePhrase | null>(null);\nexport const gameInitSignal = signal<boolean>(false);\nexport const isInGameModeSignal = signal<boolean>(false);\nexport const currentGamePhraseSignal = signal<GamePhrase | null>(null);\nexport const gameLevelSignal = signal<number | null>(null);\nexport const heroActionSignal = signal<ActionType>('Idle');\nexport const zombie4ActionSignal = signal<ActionType>('Walk');\n\nconst completedGamePhrasesKey = 'completed-game-phrases';\n\nexport const setHeroAction = (action: ActionType) => {\n  heroActionSignal.value = action;\n};\n\nexport const setZombie4Action = (action: ActionType) => {\n  zombie4ActionSignal.value = action;\n};\n\nexport const setGameLevel = (level: number) => {\n  gameLevelSignal.value = level;\n};\n\nconst { signal: completedGamePhrasesSignal, update: updateCompletedGamePhrases } = createPersistentSignal({\n  key: completedGamePhrasesKey,\n  signal: signal<Set<string>>(new Set()),\n  serialize: (value) => JSON.stringify([...value]),\n  deserialize: (value) => new Set(JSON.parse(value)),\n});\n\nexport { completedGamePhrasesSignal };\n\nexport const setCompletedGamePhrase = (gamePhraseId:string) => {\n  updateCompletedGamePhrases(prev => prev.add(gamePhraseId))\n}\n\nexport const getIncompletePhrasesByTutorialGroup = (tutorialGroup: string):GamePhrase[] => {\n  const phrasesInGroup = Phrases.filter(p => p.tutorialGroup === tutorialGroup);\n  const incompletePhrasesInGroup = phrasesInGroup\n    .filter(pig => !Array.from(completedGamePhrasesSignal.value).includes(pig.key) )\n  return incompletePhrasesInGroup;\n}\n\nexport const getNextGamePhrase = ():GamePhrase | null => {\n  const nextGamePhrase = Phrases\n    .find(t => !completedGamePhrasesSignal.value.has(t.key));\n  return nextGamePhrase ?? null;\n};\n\nexport const initializeGame = (tutorialGroup?: string) => {\n  gameInitSignal.value = true;\n  isInGameModeSignal.value = true;\n  if (tutorialGroup) {\n    const tutorialGroupGamePhrase = getIncompletePhrasesByTutorialGroup(tutorialGroup);\n    if (tutorialGroupGamePhrase.length > 0) {\n      gamePhraseSignal.value = tutorialGroupGamePhrase[0];\n    }\n  }\n};\n\nexport const setGamePhrase = (phrase: GamePhrase | null) => {\n  gamePhraseSignal.value = phrase;\n};\n\n// Load initial state\nconst loadInitialState = () => {\n  const storedTutorials = localStorage.getItem(completedGamePhrasesKey);\n  if (storedTutorials) {\n    completedGamePhrasesSignal.value = new Set(JSON.parse(storedTutorials));\n  }\n  setGamePhrase(getNextGamePhrase());\n};\n\nloadInitialState();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/signals/treeViewSignals.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/signals/tutorialSignals.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Iterable<string> | null | undefined`.","line":17,"column":35,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":17,"endColumn":52},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":20,"column":1,"nodeType":"ExportNamedDeclaration","endLine":20,"endColumn":37},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":22,"column":1,"nodeType":"ExportNamedDeclaration","endLine":22,"endColumn":61},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":24,"column":1,"nodeType":"ExportNamedDeclaration","endLine":29,"endColumn":3},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":31,"column":1,"nodeType":"ExportNamedDeclaration","endLine":34,"endColumn":3},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":31,"column":64,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":31,"endColumn":66},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":39,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":39,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1378,1393],"text":"storedTutorials != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1378,1393],"text":"storedTutorials ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1378,1393],"text":"Boolean(storedTutorials)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `Iterable<string> | null | undefined`.","line":41,"column":46,"nodeType":"CallExpression","messageId":"unsafeArgument","endLine":41,"endColumn":73},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":54,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":54,"endColumn":60},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":63,"column":43,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":63,"endColumn":45}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/signals/tutorialSignals.ts\nimport { computed, signal } from \"@preact/signals-react\";\n\nimport { type Tutorial, Tutorials } from \"src/types/Types\";\nimport { createLogger } from \"src/utils/Logger\";\n\nimport { createPersistentSignal } from \"../utils/signalPersistence\";\n\nconst logger = createLogger({ prefix: 'tutorialSignals' });\n\nconst completedTutorialsKey = \"completed-tutorials\";\n\nconst { signal: completedTutorialsSignal, update: updateCompletedTutorials } = createPersistentSignal({\n  key: completedTutorialsKey,\n  signal: signal<Set<string>>(new Set()),\n  serialize: (value) => JSON.stringify([...value]),\n  deserialize: (value) => new Set(JSON.parse(value)),\n});\n\nexport { completedTutorialsSignal };\n\nexport const tutorialSignal = signal<Tutorial | null>(null);\n\nexport const getNextTutorial = (): Tutorial | null => {\n  const nextTutorial = Tutorials\n    .find(t => !completedTutorialsSignal.value.has(t.phrase));\n  logger.debug('Getting next tutorial:', { nextTutorial, completedTutorials: [...completedTutorialsSignal.value] });\n  return nextTutorial ?? null;\n};\n\nexport const setNextTutorial = (nextTutorial: Tutorial | null) => {\n  logger.debug('Setting next tutorial:', nextTutorial);\n  tutorialSignal.value = nextTutorial;\n};\n\n// Load initial state\nconst loadInitialState = () => {\n  const storedTutorials = localStorage.getItem(completedTutorialsKey);\n  if (storedTutorials) {\n    logger.debug('Loading stored tutorials:', storedTutorials);\n    completedTutorialsSignal.value = new Set(JSON.parse(storedTutorials));\n  }\n  const nextTutorial = getNextTutorial();\n  logger.debug('Initial tutorial:', nextTutorial);\n  setNextTutorial(nextTutorial);\n};\n\nloadInitialState();\n\n// Computed signals\nexport const completedTutorialsArray = computed(() => [...completedTutorialsSignal.value]);\n\n// Exported functions\nexport const setCompletedTutorial = (tutorialId: string) => {\n  logger.debug('Setting completed tutorial:', { tutorialId, currentTutorial: tutorialSignal.value });\n  updateCompletedTutorials(prev => new Set(prev).add(tutorialId));\n  // After marking a tutorial as complete, get and set the next one\n  const nextTutorial = getNextTutorial();\n  logger.debug('Next tutorial after completion:', nextTutorial);\n  setNextTutorial(nextTutorial);\n};\n\nexport const resetCompletedTutorials = () => {\n  logger.debug('Resetting completed tutorials');\n  updateCompletedTutorials(new Set());\n  const nextTutorial = getNextTutorial();\n  logger.debug('First tutorial after reset:', nextTutorial);\n  setNextTutorial(nextTutorial);\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/terminal-data.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":8,"column":1,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":8,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":32,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":32,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[910,916],"text":"(target != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createLogger, LogLevel } from './utils/Logger';\n\nconst logger = createLogger({\n  prefix: 'TerminalData',\n  level: LogLevel.DEBUG\n});\n\nfunction openDatabase() {\n  const request = indexedDB.open('HandTermDatabase', 1);\n\n  request.onupgradeneeded = function() {\n    const db = request.result;\n    if (!db.objectStoreNames.contains('terminalData')) {\n      db.createObjectStore('terminalData', { keyPath: 'id' });\n    }\n  };\n\n  request.onsuccess = function() {\n    const db = request.result;\n    const transaction = db.transaction(['terminalData'], 'readwrite');\n    const store = transaction.objectStore('terminalData');\n\n    const result = store.get('someKey');\n    result.onsuccess = function() {\n      logger.debug('Retrieved data:', result.result);\n    };\n  };\n\n  const openDb = request;\n  openDb.onerror = function(event: Event) {\n    const target = event.target as IDBOpenDBRequest | null;\n    if (target && 'error' in target) {\n      logger.error('IndexedDB error:', (target).error);\n    } else {\n      logger.error('Unknown IndexedDB error occurred');\n    }\n  };\n\n  return openDb;\n}\n\nexport { openDatabase };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/test-utils/canvasMock.d.ts","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/src/test-utils/canvasMock.d.ts` using `parserOptions.project`: \n- <tsconfigRootDir>/tsconfig.json\n- <tsconfigRootDir>/tsconfig.test.json\n- <tsconfigRootDir>/tsconfig.node.json\nHowever, none of those TSConfigs include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change one of those TSConfigs to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/troubleshooting/typed-linting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Mock } from 'vitest';\n\nexport interface MockCanvasContext {\n  fillRect: Mock;\n  clearRect: Mock;\n  drawImage: Mock;\n  beginPath: Mock;\n  closePath: Mock;\n  stroke: Mock;\n  fill: Mock;\n}\n\nexport interface CanvasMock {\n  mockGetContext: Mock;\n  restoreOriginalGetContext: () => void;\n}\n\nexport function createMockCanvasContext(): MockCanvasContext;\nexport function setupCanvasMock(): CanvasMock;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/test-utils/canvasMock.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":30,"column":35,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/unbound-method","severity":2,"message":"Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","line":31,"column":30,"nodeType":"MemberExpression","messageId":"unboundWithoutThisAnnotation","endLine":31,"endColumn":68},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":44,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":44,"endColumn":29}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\n\n// Define an interface for the mock canvas context methods\ninterface MockCanvasContext {\n  fillRect: ReturnType<typeof vi.fn>;\n  clearRect: ReturnType<typeof vi.fn>;\n  drawImage: ReturnType<typeof vi.fn>;\n  beginPath: ReturnType<typeof vi.fn>;\n  closePath: ReturnType<typeof vi.fn>;\n  stroke: ReturnType<typeof vi.fn>;\n  fill: ReturnType<typeof vi.fn>;\n}\n\n// Create a reusable canvas context mock\nexport const createMockCanvasContext = (): MockCanvasContext => {\n  const mockContext: MockCanvasContext = {\n    fillRect: vi.fn(),\n    clearRect: vi.fn(),\n    drawImage: vi.fn(),\n    beginPath: vi.fn(),\n    closePath: vi.fn(),\n    stroke: vi.fn(),\n    fill: vi.fn(),\n  };\n\n  return mockContext;\n};\n\n// Global mock for canvas context\nexport const setupCanvasMock = () => {\n  const originalGetContext = HTMLCanvasElement.prototype.getContext;\n  const mockGetContext = vi.fn(() => createMockCanvasContext());\n\n  Object.defineProperty(HTMLCanvasElement.prototype, 'getContext', {\n    value: mockGetContext,\n    configurable: true,\n    writable: true\n  });\n\n  return {\n    mockGetContext,\n    restoreOriginalGetContext: () => {\n      // Safely restore original implementation\n      if (originalGetContext) {\n        Object.defineProperty(HTMLCanvasElement.prototype, 'getContext', {\n          value: originalGetContext,\n          configurable: true,\n          writable: true\n        });\n      } else {\n        // If no original method existed, remove the property\n        const canvasProto = HTMLCanvasElement.prototype as { getContext?: unknown };\n        delete canvasProto.getContext;\n      }\n    }\n  };\n};\n\n// Export the type for CanvasMock\nexport type CanvasMock = ReturnType<typeof setupCanvasMock>;\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/test-utils/setup.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Terminal` must match one of the following formats: camelCase, UPPER_CASE","line":100,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":100,"endColumn":11},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `FitAddon` must match one of the following formats: camelCase, UPPER_CASE","line":104,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":104,"endColumn":11},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Method name `__xtermDataCallback` must not have a leading underscore.","line":113,"column":3,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":113,"endColumn":22},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":121,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":121,"endColumn":24,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2788,2805],"text":"xtermDataCallback != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { vi } from 'vitest';\n\n// Mock localStorage\nconst localStorageMock = {\n  getItem: vi.fn(),\n  setItem: vi.fn(),\n  clear: vi.fn(),\n  removeItem: vi.fn(),\n  length: 0,\n  key: vi.fn(),\n};\nglobal.localStorage = localStorageMock as typeof localStorage;\n\n// Mock matchMedia\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation((query: string) => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(), // Deprecated\n    removeListener: vi.fn(), // Deprecated\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock ResizeObserver\nclass ResizeObserverMock {\n  observe = vi.fn();\n  unobserve = vi.fn();\n  disconnect = vi.fn();\n}\n\nwindow.ResizeObserver = ResizeObserverMock as unknown as typeof ResizeObserver;\n\n// Mock requestAnimationFrame\nwindow.requestAnimationFrame = vi.fn((callback) => {\n  return setTimeout(callback, 0);\n});\n\n// Mock canvas context\nHTMLCanvasElement.prototype.getContext = vi.fn(() => ({\n  fillRect: vi.fn(),\n  clearRect: vi.fn(),\n  getImageData: vi.fn(() => ({\n    data: new Array(4),\n  })),\n  putImageData: vi.fn(),\n  createImageData: vi.fn(),\n  setTransform: vi.fn(),\n  drawImage: vi.fn(),\n  save: vi.fn(),\n  restore: vi.fn(),\n  scale: vi.fn(),\n  rotate: vi.fn(),\n  translate: vi.fn(),\n  transform: vi.fn(),\n  beginPath: vi.fn(),\n  moveTo: vi.fn(),\n  lineTo: vi.fn(),\n  stroke: vi.fn(),\n  fill: vi.fn(),\n  arc: vi.fn(),\n})) as unknown as typeof HTMLCanvasElement.prototype.getContext;\n\n// Mock xterm.js\nconst mockTerminal = {\n  loadAddon: vi.fn(),\n  open: vi.fn(),\n  write: vi.fn(),\n  onData: vi.fn((callback) => {\n    (window as WindowWithXtermCallback).__xtermDataCallback = (data: string) => {\n      callback(data);\n    };\n    return { dispose: vi.fn() };\n  }),\n  onKey: vi.fn(),\n  clear: vi.fn(),\n  focus: vi.fn(),\n  dispose: vi.fn(),\n  reset: vi.fn(() => {\n  }),\n  scrollToBottom: vi.fn(),\n  buffer: {\n    active: {\n      cursorX: 2,\n      cursorY: 0,\n      getLine: () => ({\n        translateToString: () => {\n          return '> ';\n        }\n      })\n    }\n  }\n};\n\nvi.mock('xterm', () => ({\n  Terminal: vi.fn().mockImplementation(() => mockTerminal)\n}));\n\nvi.mock('@xterm/addon-fit', () => ({\n  FitAddon: vi.fn().mockImplementation(() => ({\n    fit: vi.fn(),\n    activate: vi.fn(),\n    dispose: vi.fn()\n  }))\n}));\n\n// Define types for window extensions\ninterface WindowWithXtermCallback extends Window {\n  __xtermDataCallback?: (data: string) => void;\n  mockTerminal?: typeof mockTerminal;\n  triggerTerminalInput?: (data: string) => void;\n}\n\n// Helper to trigger terminal input\nfunction createTriggerTerminalInput(data: string) {\n  const xtermDataCallback = (window as WindowWithXtermCallback).__xtermDataCallback;\n  if (xtermDataCallback) {\n    // For Enter key, ensure we send just \\r\n    if (data === '\\r\\n') {\n      xtermDataCallback('\\r');\n    } else {\n      xtermDataCallback(data);\n    }\n  }\n}\n\n// Initialize window extensions\n(window as WindowWithXtermCallback).__xtermDataCallback = undefined;\n(window as WindowWithXtermCallback).triggerTerminalInput = createTriggerTerminalInput;\n(window as WindowWithXtermCallback).mockTerminal = mockTerminal;\n\n// Set up callback handler\n(window as WindowWithXtermCallback).__xtermDataCallback = (data: string) => {\n  (window as WindowWithXtermCallback).__xtermDataCallback?.(data);\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/test-utils/test-utils.tsx","messages":[{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":33,"column":10,"nodeType":"Identifier","messageId":"noDebug","endLine":33,"endColumn":15},{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":38,"column":16,"nodeType":"Identifier","messageId":"noDebug","endLine":38,"endColumn":21},{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":41,"column":16,"nodeType":"Identifier","messageId":"noDebug","endLine":41,"endColumn":21},{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":46,"column":16,"nodeType":"Identifier","messageId":"noDebug","endLine":46,"endColumn":21},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":69,"column":3,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":69,"endColumn":5},{"ruleId":"testing-library/no-debugging-utils","severity":1,"message":"Unexpected debug statement","line":70,"column":10,"nodeType":"Identifier","messageId":"noDebug","endLine":70,"endColumn":15},{"ruleId":"import/export","severity":2,"message":"Multiple exports of name 'render'.","line":75,"column":1,"nodeType":"ExportAllDeclaration","endLine":75,"endColumn":40},{"ruleId":"import/export","severity":2,"message":"Multiple exports of name 'render'.","line":78,"column":26,"nodeType":"Identifier","endLine":78,"endColumn":32}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ReactElement } from 'react';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { vi } from 'vitest';\n\nimport { render, type RenderOptions } from '@testing-library/react';\n\nimport { createLogger } from 'src/utils/Logger';\n\nimport { CommandProvider } from '../contexts/CommandProvider';\nimport { QueryProvider } from '../providers/QueryProvider';\n\nconst logger = createLogger({ prefix: 'test-utils' });\n\nconst mockAuth = {\n  isAuthenticated: false,\n  isLoading: false,\n  user: null,\n  error: null,\n  login: vi.fn(),\n  logout: vi.fn(),\n  signup: vi.fn(),\n  refreshToken: vi.fn(),\n  getAccessToken: vi.fn(),\n  verify: vi.fn(),\n  validateAndRefreshToken: vi.fn(),\n  isLoggedIn: false,\n  isError: false,\n  isPending: false\n};\n\nfunction AllTheProviders({ children }: { children: React.ReactNode }) {\n  logger.debug('Setting up test providers');\n\n  const handTermRef = {\n    current: {\n      writeOutput: vi.fn((output: string) => {\n        logger.debug('Mock writeOutput:', output);\n      }),\n      prompt: vi.fn(() => {\n        logger.debug('Mock prompt called');\n      }),\n      saveCommandResponseHistory: vi.fn().mockReturnValue(''),\n      focusTerminal: vi.fn(),\n      handleCharacter: vi.fn((char: string) => {\n        logger.debug('Mock handleCharacter:', char);\n      }),\n      refreshComponent: vi.fn(),\n      setHeroSummersaultAction: vi.fn(),\n      setEditMode: vi.fn(),\n      handleEditSave: vi.fn(),\n    }\n  };\n\n  return (\n    <BrowserRouter>\n      <QueryProvider>\n        <CommandProvider handTermRef={handTermRef} auth={mockAuth}>\n          {children}\n        </CommandProvider>\n      </QueryProvider>\n    </BrowserRouter>\n  );\n}\n\nconst customRender = (\n  ui: ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>,\n) => {\n  logger.debug('Rendering component with test providers');\n  return render(ui, { wrapper: AllTheProviders, ...options });\n};\n\n// re-export everything\nexport * from '@testing-library/react';\n\n// override render method\nexport { customRender as render };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/HandTerm.d.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `AccessToken` must match one of the following formats: camelCase, UPPER_CASE","line":65,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":65,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `RefreshToken` must match one of the following formats: camelCase, UPPER_CASE","line":66,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":66,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `IdToken` must match one of the following formats: camelCase, UPPER_CASE","line":67,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":67,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `ExpiresAt` must match one of the following formats: camelCase, UPPER_CASE","line":68,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":68,"endColumn":12},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `ExpiresIn` must match one of the following formats: camelCase, UPPER_CASE","line":69,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":69,"endColumn":12}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\n\n// Existing types from Types.ts that are important for broader context\nexport type ActivityType = 'NORMAL' | 'TUTORIAL' | 'GAME' | 'EDIT' | 'TREE';\n\nexport type MyResponse<T> = {\n  status: 200 | 400 | 401 | 403 | 404 | 500;\n  data?: T | undefined;\n  message: string | undefined;\n  error: string[];\n};\n\nexport interface ParsedCommand {\n  command: string;\n  args: readonly string[];\n  switches: Readonly<Record<string, boolean | string>>;\n}\n\nexport interface OutputElement {\n  command: ParsedCommand;\n  response?: ReactNode;\n  status: number;\n  wpmAverage?: number;\n  commandTime: Date;\n  component?: ReactNode;\n  sensitive?: boolean;\n}\n\nexport interface ParsedLocation {\n  activityKey: ActivityType;\n  contentKey?: string | null;\n  groupKey?: string | null;\n}\n\n// HandTerm-specific interfaces\nexport interface IHandTermWrapperMethods {\n  writeOutput: (output: string) => void;\n  prompt: () => void;\n  saveCommandResponseHistory: (command: string, response: string, status: number) => string;\n  focusTerminal: () => void;\n  handleCharacter: (character: string) => void;\n  refreshComponent: () => void;\n  setHeroSummersaultAction: () => void;\n  setEditMode: (isEditMode: boolean) => void;\n  handleEditSave: (content: string) => void;\n}\n\nexport interface HandTermWrapperProps {\n  terminalWidth: number;\n  auth: IAuthProps;\n  onOutputUpdate: (output: OutputElement) => void;\n}\n\n// Authentication-related interfaces\nexport interface LoginCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface SignUpCredentials extends LoginCredentials {\n  email: string;\n}\n\nexport interface AuthResponse {\n  AccessToken: string;\n  RefreshToken: string;\n  IdToken: string;\n  ExpiresAt?: string;\n  ExpiresIn: string;\n  githubUsername?: string;\n}\n\nexport interface IAuthProps {\n  login: (username: string, password: string) => Promise<MyResponse<AuthResponse>>;\n  signup: (credentials: SignUpCredentials) => Promise<MyResponse<unknown>>;\n  verify: (username: string, code: string) => Promise<unknown>;\n  refreshToken: () => Promise<MyResponse<AuthResponse>>;\n  validateAndRefreshToken: () => Promise<MyResponse<AuthResponse>>;\n  isLoggedIn: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n  isPending: boolean;\n}\n\n// Command-related interfaces\nexport interface ICommandContext {\n  executeCommand: (command: string) => Promise<void>;\n  commandHistory: string[];\n  addToCommandHistory: (command: string) => void;\n  output: OutputElement[];\n  appendToOutput: (output: OutputElement) => void;\n  handTermRef: React.RefObject<IHandTermWrapperMethods>;\n  auth: IAuthProps;\n  updateLocation: (options: ParsedLocation) => void;\n}\n\nexport interface ICommandResponse {\n  status: number;\n  message: string;\n  body?: string | null;\n  sensitive?: boolean;\n}\n\nexport interface ICommand {\n  name: string;\n  description: string;\n  switches?: Record<string, string>;\n  execute: (\n    context: ICommandContext,\n    parsedCommand: ParsedCommand,\n  ) => Promise<ICommandResponse>;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/Signals.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/TerminalTypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/Types.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `full_name` must match one of the following formats: camelCase, UPPER_CASE","line":103,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":103,"endColumn":12},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `html_url` must match one of the following formats: camelCase, UPPER_CASE","line":106,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":106,"endColumn":11},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `created_at` must match one of the following formats: camelCase, UPPER_CASE","line":107,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":107,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `updated_at` must match one of the following formats: camelCase, UPPER_CASE","line":108,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":108,"endColumn":13},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `stargazers_count` must match one of the following formats: camelCase, UPPER_CASE","line":109,"column":3,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":109,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type ReactNode } from \"react\";\n\nexport const spaceDisplayChar = \"&#x2581;\";\nexport const tabDisplayChar = \"&#x2B7E;\";\nexport interface CharTime {\n  char: string;\n  duration: number;\n  time: number;\n}\n\nexport interface Keystroke {\n  char: string;\n  timestamp: number;\n}\n\nexport const ActivityType = {\n  NORMAL: 'NORMAL',\n  TUTORIAL: 'TUTORIAL',\n  GAME: 'GAME',\n  EDIT: 'EDIT',\n  TREE: 'TREE'\n} as const;\n\nexport type ActivityType = typeof ActivityType[keyof typeof ActivityType];\n\nexport type ParsedCommand = Readonly<{\n  command: string;\n  args: readonly string[];\n  switches: Readonly<Record<string, boolean | string>>;\n}>;\n\nexport function createCharTime(char: string, duration: number, time: number): CharTime {\n  return { char, duration, time }\n}\n\nexport type CancelCallback = () => void;\n\nexport type InputEventCallback = (event: InputEvent) => void;\nexport interface ChordRow {\n  char: string;\n  chord: number;\n  strokes: string;\n}\n\nexport interface IChord {\n  key: string;\n  chordCode: string;\n  index: number;\n  alias?: string;\n}\n\nexport class Chord implements IChord {\n  key: string;\n  chordCode: string;\n  index: number;\n  alias?: string;\n  constructor(key: string, chordCode: string, index: number) {\n    this.key = key;\n    this.chordCode = chordCode;\n    this.index = index;\n  }\n}\n\nexport interface WPM {\n  readonly wpm: number;\n  readonly character: string;\n  readonly durationMilliseconds: number;\n}\n\nexport type WPMs = Readonly<{\n  wpmAverage: number;\n  charWpms: ReadonlyArray<WPM>;\n}>\n\nexport interface OutputElement {\n  command: ParsedCommand;\n  response?: ReactNode;\n  status: number;\n  wpmAverage?: number;\n  characterAverages?: ReadonlyArray<WPM>;\n  commandTime: Date;\n  component?: ReactNode; // New field for React components\n  sensitive?: boolean; // Flag to indicate if the command contains sensitive data\n}\n\nexport interface MyResponse<T> {\n  status: 200 | 400 | 401 | 403 | 404 | 500;\n  data?: T | undefined;\n  message: string | undefined;\n  error: string[];\n}\n\nexport const VALID_ACTIVITIES = ['normal', 'game', 'tutorial', 'edit', 'tree'] as const;\nexport type Activity = typeof VALID_ACTIVITIES[number];\n\nexport interface ParsedLocation {\n  activityKey: ActivityType;\n  contentKey?: string | null;\n  groupKey?: string | null;\n}\n\nexport interface GitHubRepository {\n  full_name: string;\n  language?: string;\n  description?: string;\n  html_url: string;\n  created_at: string;\n  updated_at: string;\n  stargazers_count: number;\n}\n\nexport interface Tutorial {\n  phrase: string;\n  prompt: string;\n  command?: string;\n  unlocked?: boolean;\n  tutorialGroup?: string;\n  display?: string;\n}\n\nexport interface GamePhrase {\n  key: string,\n  value: string,\n  tutorialGroup?: string,\n  isComplete?: boolean\n}\n\nexport const TutorialPhrases: GamePhrase[] = [\n  {\n    value: 'The most important key is the Return (ENTER) key. Press the thumb tip and release. You\\'ll use this key to enter every command.\\n\\nNOTE: Press enter to reset and redo any tutorial steps.',\n    key: '\\r',\n  },\n  {\n    value: 'Type `fdsa` & Enter. Notice that it requires only a finger-pinch and release for each character.',\n    key: 'fdsa',\n  },\n  {\n    value: 'Do it again, but this time put a space in between the letters. Grasp the thumb and release to enter a space.',\n    key: 'fdsa'\n  },\n  {\n    value: 'Type `jkl;`. Notice that it requires only a finger-grasp followed by a release.',\n    key: 'jkl;', tutorialGroup: 'single-click'\n  },\n  {\n    value: 'Press the thumb tip followed by a finger tip to type numbers 0-4',\n    key: '01234'\n  },\n  {\n    value: 'Press the thumb tip followed by a finger tip to type numbers 5-9',\n    key: '56789', tutorialGroup: 'numbers'\n  },\n  {\n    value: 'Characters are only entered when the keys are released. For example, when you grasp the thumb and release it a space is entered.\\n\\nHowever, when you HOLD a grasp of your thumb it activates the shift key. Use Shift to type FDSA in uppercase letters. Remember to release your grip after each character.',\n    key: 'FDSA'\n  },\n  { value: 'These two characters complete the traditional home-row keys, but require two finger keystrokes similar to numbers. \\n\\nNotice that both actions start from the middle finger and end on the index finger. G uses 2 pinches. H uses 2 grasps, like their home-row counterparts.', key: 'gh', tutorialGroup: 'home-row' },\n  { value: 'These characters are all triggered by a single finger. Pinch first, then grasp to enter them.', key: 'nm,.' },\n  { value: 'These characters are also triggered by a single finger. Grasp first, then pinch to enter them.', key: 'uiop' },\n  { value: 'Many characters require combinations followed by releasing all keys. Type `zxcv` and we\\'ll show corrections as you type.', key: 'zxcv' },\n  { value: 'Remember this one so that you can restart this tutorial', key: 'tut' },\n  { value: 'Type `play` to play a guided typing game with chord-hints.', key: 'play' },\n]\n\nexport const Tutorials: Tutorial[] = [\n  {\n    prompt: 'The most important key is the Return (ENTER) key. Press the thumb tip and release. You\\'ll use this key to enter every command.\\n\\nNOTE: Press enter to reset and redo any tutorial steps.',\n    display: 'Return (ENTER)', phrase: '\\r'\n  },\n  {\n    prompt: 'Type `fdsa` & Enter. Notice that it requires only a finger-pinch and release for each character.', phrase: 'fdsa'\n  },\n  { prompt: 'Do it again, but this time put a space in between the letters. Grasp the thumb and release to enter a space.', phrase: 'fdsa' },\n  { prompt: 'Type `jkl;`. Notice that it requires only a finger-grasp followed by a release.', phrase: 'jkl;', tutorialGroup: 'single-click' },\n  { prompt: 'Press the thumb tip followed by a finger tip to type numbers 0-4', phrase: '01234' },\n  { prompt: 'Press the thumb tip followed by a finger tip to type numbers 5-9', phrase: '56789', tutorialGroup: 'numbers' },\n  { prompt: 'Characters are only entered when the keys are released. For example, when you grasp the thumb and release it a space is entered.\\n\\nHowever, when you HOLD a grasp of your thumb it activates the shift key. Use Shift to type FDSA in uppercase letters. Remember to release your grip after each character.', phrase: 'FDSA' },\n  { prompt: 'These two characters complete the traditional home-row keys, but require two finger keystrokes similar to numbers. \\n\\nNotice that both actions start from the middle finger and end on the index finger. G uses 2 pinches. H uses 2 grasps, like their home-row counterparts.', phrase: 'gh', tutorialGroup: 'home-row' },\n  { prompt: 'These characters are all triggered by a single finger. Pinch first, then grasp to enter them.', phrase: 'nm,.' },\n  { prompt: 'These characters are also triggered by a single finger. Grasp first, then pinch to enter them.', phrase: 'uiop' },\n  { prompt: 'Many characters require combinations followed by releasing all keys. Type `zxcv` and we\\'ll show corrections as you type.', phrase: 'zxcv' },\n  { prompt: 'Remember this one so that you can restart this tutorial', phrase: 'tut' },\n  { prompt: 'Type `play` to play a guided typing game with chord-hints.', phrase: 'play' },\n]\n\nexport const Phrases: GamePhrase[] = [\n  { key: \"first-eight\", value: \"all sad lads ask dad; alas fads fall\", tutorialGroup: \"single-click\" },\n  { key: \"numbers\", value: \"0123 4567 8901 2345 6789 0987\", tutorialGroup: \"numbers\" },\n  { key: \"ask\", value: \"All lads had flasks as glad gals ask halls; all had a glass\", tutorialGroup: \"home-row\" },\n  { key: \"gallant\", value: \"A gallant lad; a glass\", tutorialGroup: \"home-row\" },\n  { key: \"alas\", value: \"Alas, Khal's flask has a crack.\" },\n  { key: \"lads\", value: \"Lads' flags fall as gaffs sag.\" },\n  { key: \"hello\", value: \"Hello, World!\" },\n  { key: \"pack\", value: \"Pack my box with five dozen liquor jugs.\" },\n  { key: \"sphinx\", value: \"Sphinx of black quartz, judge my vow.\" },\n  { key: \"waltz\", value: \"Waltz, bad nymph, for quick jigs vex.\" },\n  { key: \"list\", value: \"List.map(fun i -> i + 1)[1;2;3]\" },\n  { key: \"mr\", value: \"Mr. Jock, TV quiz PhD., bags few lynx.\" },\n  { key: \"watch\", value: \"Watch \\\"Jeopardy!\\\", Alex Trebek's fun TV\" },\n  { key: \"h1\", value: \"Type anywhere with this one-handed keyboard. Stop sitting down to type. Stop looking down to send messages.\" },\n  { key: \"h2\", value: \"Built to the shape of your finger actions, this device will eliminate your need to reposition your fingers while typeing.\" },\n  { key: \"h3\", value: \"Use the same keyboard, designed for your hand, everywhere. You never have to learn a new one. The natural motions of your fingers compose the characters.\" },\n  { key: \"h4\", value: \"It's built around your hand, so you don't have to reorient your finger placement on a board. Repositioning your fingers on a board is the biggest hurdle of typing-training, so don't do it.\" },\n  { key: \"h5\", value: \"Handex is built around your finger movements, so you'll never have to reposition your fingers to find a key. Even unusual keys, such `\\\\`, `~`, `|`, `^`, `&` are easy to type.\" },\n  { key: \"h6\", value: \"Handex liberates you from the key-board-shackle problem. 151 keys are currently available and more are coming.\" },\n  { key: \"k=7\", value: \"k=7; l=8; m=$((k + l)); n=$((k > l ? k : l)); echo \\\"Max: $n\\\"; grep 'Max' <<< \\\"Max: $n\\\" || echo \\\"No match found\\\" > /dev/null; echo \\\"Sum: $(($m))\\\"\" },\n  { key: \"x=4\", value: \"x=4; y=$((x + 5)); z=$((x > 5 ? x : 5)); echo \\\"Max: $z\\\"; grep 'Max' <<< \\\"Max: $z\\\" || echo \\\"No match found\\\" > /dev/null; echo \\\"Sum: $(($y))\\\"\" },\n  { key: \"arr\", value: \"arr=(1 2 3); sum=0; for i in \\\"${arr[@]}\\\"; do sum=$(($sum + i)); done; echo \\\"Sum: $sum\\\"; [[ $sum -lt 10 ]] && echo \\\"$sum < 10\\\" || echo \\\"$sum >= 10\\\"\" },\n  { key: \"f()\", value: \"f() { return $(($1 & $2)); }; f 4 5; echo \\\"Bitwise AND: $?\\\"\" },\n  { key: \"a=5\", value: \"a=5; b=3; c=$((a / b)); d=$((a - b)); echo $c $d; [ $a -gt $b ] && echo \\\"$a>$b\\\" || echo \\\"$a<$b\\\"; e=$(($a % $b)); echo \\\"Result: $e\\\"\" }\n];\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/elements.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/importMeta.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/monaco-vim.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/types/testing-library__jest-dom.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/GamePhrases.ts","messages":[{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":10,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":10,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":13,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":13,"endColumn":19,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[369,375],"text":"phrase != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":22,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":22,"endColumn":83,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[714,729],"text":"(p.tutorialGroup != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[714,729],"text":"(p.tutorialGroup ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[714,729],"text":"(Boolean(p.tutorialGroup))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":53,"column":16,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":53,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1767,1773],"text":"(result != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":71,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":71,"endColumn":76},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":71,"column":46,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":71,"endColumn":67,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2343,2364],"text":"(storedPhrasesAchieved != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2343,2364],"text":"(storedPhrasesAchieved ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2343,2364],"text":"(Boolean(storedPhrasesAchieved))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":72,"column":13,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":75,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":72,"column":20,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":72,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":72,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":72,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":79,"column":50,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":79,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":79,"column":68,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":79,"endColumn":88},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":86,"column":5,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":86,"endColumn":46}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type GamePhrase, type MyResponse, Phrases } from \"../types/Types\";\n\ninterface PhraseAchievement {\n    wpm: string;\n    phraseName: string;\n}\n\nconst standardChars = /^[a-zA-Z0-9\\s'\";:.!,?]+$/;\n\nexport default class GamePhrases {\n    public static getGamePhraseByKey(key: string): GamePhrase {\n        const phrase = Phrases.find(x => x.key == key);\n        if (phrase) {\n            // Return specified phrase, if it exists.\n            return phrase;\n        }\n        // Else, return first phrase.\n        return this.getGamePhraseByIndex(0);\n    }\n\n    public static getGamePhrasesByTutorialGroup(tutorialGroup: string): GamePhrase[] {\n        const phrases = Phrases.filter(p => tutorialGroup.includes(p.tutorialGroup || 'exclude'))\n        return phrases;\n    }\n\n    public checkGamePhrases = (): MyResponse<string[]> => {\n        const response: MyResponse<string[]> = {\n            status: 200,\n            message: '',\n            data: [],\n            error: []\n        };\n        Phrases.forEach((phrase, index) => {\n            if (!standardChars.test(phrase.value)) {\n                response.error.push(`Phrase at index ${index} contains non-standard characters: ${phrase.value}`);\n                response.status = 400;\n            }\n        });\n        return response;\n    };\n\n    public static getGamePhraseByIndex(index: number): GamePhrase {\n        if (index >= 0 && index < Phrases.length) {\n            return Phrases[index];\n        }\n        if (index < 0) return Phrases[0];\n        if (index >= Phrases.length) return Phrases[Phrases.length - 1];\n        return Phrases[0];\n    }\n\n    public static getGamePhraseByValue(phrase: string): GamePhrase | null {\n        const result = Phrases.find(p => p.value === phrase)\n        return result || null;\n    }\n\n    public static getGamePhraseNames(): string[] {\n        return Phrases.map(x => x.key);\n    }\n\n    public static getRandomGamePhrase(): string {\n        const phrasesLength = Phrases.length;\n        const randomKey = Math.floor(Math.random() * phrasesLength);\n        const result = Phrases[randomKey].value;\n        return result;\n    }\n\n    public static getGamePhrasesAchieved = (): PhraseAchievement[] => {\n        const storedPhrasesAchieved = localStorage.getItem('phrasesAchieved');\n\n        try {\n            const parsedPhrases = JSON.parse(storedPhrasesAchieved || '[]');\n            return parsedPhrases.map((phrase: string) => {\n                const [wpm, phraseName] = phrase.split(':');\n                return { wpm, phraseName };\n            });\n        } catch (error) {\n            // Log error without using console.error\n            const errorMessage = error instanceof Error ? error.message : 'Unknown parsing error';\n            if (typeof window !== 'undefined' && window.console && window.console.error) {\n                window.console.error('Error parsing phrases achieved:', errorMessage);\n            }\n            return [];\n        }\n    }\n\n    public static resetGamePhrasesAchieved = () => {\n        localStorage.removeItem('phrasesAchieved');\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/Logger.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":34,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":34,"endColumn":33,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[837,861],"text":"this.config.logToConsole ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[837,861],"text":"this.config.logToConsole === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","line":38,"column":9,"nodeType":"MemberExpression","messageId":"conditionErrorNullableBoolean","endLine":38,"endColumn":30,"suggestions":[{"messageId":"conditionFixDefaultFalse","fix":{"range":[941,962],"text":"this.config.logToFile ?? false"},"desc":"Explicitly treat nullish value the same as false (`value ?? false`)"},{"messageId":"conditionFixCompareTrue","fix":{"range":[941,962],"text":"this.config.logToFile === true"},"desc":"Change condition to check if true (`value === true`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":44,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":44,"endColumn":56},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used. Allowed unused args must match /^_[a-zA-Z][a-zA-Z0-9]*$/u.","line":62,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used. Allowed unused args must match /^_[a-zA-Z][a-zA-Z0-9]*$/u.","line":62,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":71}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4\n}\n\ninterface LoggerConfig {\n  level?: LogLevel;\n  prefix?: string;\n  logToConsole?: boolean;\n  logToFile?: boolean;\n}\n\nclass Logger {\n  private config: LoggerConfig;\n\n  constructor(config: Partial<LoggerConfig> = {}) {\n    this.config = {\n      level: config.level ?? LogLevel.INFO,\n      prefix: config.prefix ?? 'HandTerm',\n      logToConsole: config.logToConsole ?? true,\n      logToFile: config.logToFile ?? false\n    };\n  }\n\n  private log<T extends unknown[]>(level: LogLevel, message: string, ...args: T): void {\n    if (this.config.level !== undefined && level < this.config.level) return;\n\n    const timestamp = new Date().toISOString();\n    const formattedMessage = `[${timestamp}] [${this.config.prefix}] [${LogLevel[level]}] ${message}`;\n\n    if (this.config.logToConsole) {\n      this.safeConsoleLog(level, formattedMessage, ...args);\n    }\n\n    if (this.config.logToFile) {\n      this.writeToLogFile(formattedMessage, ...args);\n    }\n  }\n\n  private safeConsoleLog<T extends unknown[]>(level: LogLevel, formattedMessage: string, ...args: T): void {\n    if (typeof window !== 'undefined' && window.console) {\n      switch (level) {\n        case LogLevel.DEBUG:\n          window.console.log(formattedMessage, ...args);\n          break;\n        case LogLevel.INFO:\n          window.console.info(formattedMessage, ...args);\n          break;\n        case LogLevel.WARN:\n          window.console.warn(formattedMessage, ...args);\n          break;\n        case LogLevel.ERROR:\n          window.console.error(formattedMessage, ...args);\n          break;\n      }\n    }\n  }\n\n  private writeToLogFile<T extends unknown[]>(message: string, ...args: T): void {\n    // Implement file logging logic if needed\n    // This could write to a log file in the application's data directory\n    // Placeholder for future implementation\n  }\n\n  public debug(message: string, ...args: unknown[]): void {\n    this.log(LogLevel.DEBUG, message, ...args);\n  }\n\n  public info(message: string, ...args: unknown[]): void {\n    this.log(LogLevel.INFO, message, ...args);\n  }\n\n  public warn(message: string, ...args: unknown[]): void {\n    this.log(LogLevel.WARN, message, ...args);\n  }\n\n  public error(message: string, ...args: unknown[]): void {\n    this.log(LogLevel.ERROR, message, ...args);\n  }\n}\n\nfunction createLogger(config?: Partial<LoggerConfig>): Logger {\n  return new Logger(config);\n}\n\nexport { Logger, LogLevel, createLogger };\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/Phrase.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Property name `_value` must not have a leading underscore.","line":7,"column":13,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":7,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Property name `_chords` must not have a leading underscore.","line":8,"column":13,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":8,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Class Property name `_chordsHTML` must not have a leading underscore.","line":9,"column":13,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":9,"endColumn":24},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":12,"column":13,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":12,"endColumn":18},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":16,"column":13,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":16,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[512,521],"text":"value[0] == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[513,521],"text":"(value[0] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[512,521],"text":"!Boolean(value[0])"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":37,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":37,"endColumn":31,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[980,994],"text":"foundChordHTML != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":41,"column":17,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":41,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1144,1149],"text":"chord != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { allChords } from \"../allChords\";\nimport { type Chord } from \"../types/Types\";\n\nimport { createHTMLElementFromHTML } from \"./dom\";\n\nexport class Phrase {\n    private _value: string[];\n    private _chords: Chord[] = [];\n    private _chordsHTML: HTMLElement[] = [];\n\n    constructor(value: string[]) {\n        if(!value || !Array.isArray(value) || value.length == 0){\n            throw new Error('Phrase value must be an array with at least one element');\n        }\n        this._value = value;\n        if(!value[0]) return;\n        if (Array.isArray(value)) {\n            this.setChords(value);\n        }\n    }\n\n    get value(): string[] {\n        return this._value;\n    }\n\n    get chordsHTML(): HTMLElement[] {\n        return this._chordsHTML;\n    }\n\n    get chords(): Chord[] {\n        return this._chords;\n    }\n\n    private setChords(keys: string[]): void {\n        keys.forEach((key) => {\n            const foundChordHTML = Phrase.findChordHTML(key);\n            if (foundChordHTML) {\n                this._chordsHTML.push(foundChordHTML);\n            }\n            const chord = allChords.find(x => x.key == key);\n            if (chord) {\n                this._chords.push(chord);\n            }\n        })\n    }\n\n    public static createChordHTML(foundChord: Chord): HTMLElement {\n        return createHTMLElementFromHTML(\n            `<div class=\"col-sm-2 row generated\" id=\"chord2\">\n                <span id=\"char${foundChord.index}\">${foundChord.key}</span>\n                <img loading=\"lazy\" alt=\"2\" src=\"/images/svgs/${foundChord.chordCode}.svg\" width=\"100\" class=\"hand\">\n            </div>`\n        )\n    }\n\n    public static findChordHTML(chordChar: string): HTMLElement | null {\n        let inChord: HTMLElement | null = null;\n        const foundChords\n            = Array.from(allChords)\n                .filter(x => {\n                    return x.key\n                        .replace('&#x2581;', ' ')\n                        .replace('(underscore)', '_')\n                        // .replace('Return (ENTER)', '\\r')\n                        == chordChar;\n                });\n        // Load the clone in Chord order into the wholePhraseChords div.\n        if (foundChords.length > 0) {\n            const foundChord = foundChords[0];\n            inChord = this.createChordHTML(foundChord);\n            inChord.setAttribute(\"name\", foundChord.key.replace('(', '').replace(')', '').replace(' ', '-'));\n        }\n        // Removed console.error statement\n        return inChord;\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/WebCam.tsx","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `React` must match one of the following formats: camelCase","line":1,"column":13,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":1,"endColumn":18},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":4,"column":1,"nodeType":"ExportNamedDeclaration","endLine":6,"endColumn":2},{"ruleId":"react/function-component-definition","severity":2,"message":"Function component is not a function declaration","line":8,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"function-declaration","endLine":54,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":13,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":13,"endColumn":26,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[338,351],"text":"videoElement == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":23,"column":13,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":33,"endColumn":20,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[695,695],"text":"void "},"desc":"Add void operator to ignore."}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":30,"column":25,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":30,"endColumn":37},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":35,"column":17,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":35,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1088,1110],"text":"videoElement.srcObject != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"consistent-return","severity":2,"message":"Arrow function expected no return value.","line":44,"column":9,"nodeType":"ReturnStatement","messageId":"unexpectedReturnValue","endLine":50,"endColumn":11},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":45,"column":17,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":45,"endColumn":29},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":45,"column":33,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":45,"endColumn":55,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1429,1451],"text":"(videoElement.srcObject != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"jsx-a11y/media-has-caption","severity":2,"message":"Media elements such as <audio> and <video> must have a <track> for captions.","line":53,"column":12,"nodeType":"JSXOpeningElement","endLine":53,"endColumn":78},{"ruleId":"import/no-default-export","severity":2,"message":"Prefer named exports.","line":56,"column":8,"nodeType":"ExportDefaultDeclaration","endLine":56,"endColumn":15}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type React from 'react';\nimport { useRef, useEffect } from 'react';\r\n\r\nexport interface WebCamProps {\r\n    setOn: boolean;\r\n}\r\n\r\nconst WebCam: React.FC<WebCamProps> = ({ setOn }) => {\r\n    const videoRef = useRef<HTMLVideoElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        const videoElement = videoRef.current;\r\n        if (!videoElement) return;\r\n\r\n        videoElement.autoplay = true;\r\n        videoElement.muted = true;\r\n        videoElement.id = 'terminal-video';\r\n        videoElement.setAttribute('playsinline', '');\r\n        videoElement.setAttribute('webkit-playsinline', '');\r\n        videoElement.setAttribute('x5-playsinline', '');\r\n\r\n        if (setOn) {\r\n            navigator.mediaDevices\r\n                .getUserMedia({\r\n                    video: {\r\n                        facingMode: 'environment'\r\n                    }\r\n                })\r\n                .then(stream => {\r\n                    if (videoElement) {\r\n                        videoElement.srcObject = stream;\r\n                    }\r\n                });\r\n        } else {\r\n            if (videoElement.srcObject) {\r\n                const tracks = (videoElement.srcObject as MediaStream).getTracks();\r\n                tracks.forEach(track => track.stop());\r\n                videoElement.srcObject = null;\r\n            }\r\n        }\r\n\r\n        videoElement.hidden = !setOn;\r\n\r\n        return () => {\r\n            if (videoElement && videoElement.srcObject) {\r\n                const tracks = (videoElement.srcObject as MediaStream).getTracks();\r\n                tracks.forEach(track => track.stop());\r\n                videoElement.srcObject = null;\r\n            }\r\n        };\r\n    }, [setOn]);\r\n\r\n    return <video ref={videoRef} style={{ width: '100%', height: 'auto' }} />;\r\n};\r\n\r\nexport default WebCam;\r\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/apiClient.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ENDPOINTS` must match one of the following formats: camelCase","line":4,"column":8,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":4,"endColumn":17},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":8,"column":1,"nodeType":"ExportNamedDeclaration","endLine":12,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":14,"column":1,"nodeType":"ExportNamedDeclaration","endLine":19,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":21,"column":1,"nodeType":"ExportNamedDeclaration","endLine":26,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":28,"column":1,"nodeType":"ExportNamedDeclaration","endLine":33,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `default_branch` must match one of the following formats: camelCase, UPPER_CASE","line":32,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":32,"endColumn":19},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":35,"column":1,"nodeType":"ExportNamedDeclaration","endLine":43,"endColumn":2},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":45,"column":1,"nodeType":"ExportNamedDeclaration","endLine":51,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `device_code` must match one of the following formats: camelCase, UPPER_CASE","line":46,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":46,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `user_code` must match one of the following formats: camelCase, UPPER_CASE","line":47,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":47,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `verification_uri` must match one of the following formats: camelCase, UPPER_CASE","line":48,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":48,"endColumn":21},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `expires_in` must match one of the following formats: camelCase, UPPER_CASE","line":49,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":49,"endColumn":15},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":53,"column":1,"nodeType":"ExportNamedDeclaration","endLine":61,"endColumn":2},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `access_token` must match one of the following formats: camelCase, UPPER_CASE","line":55,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":55,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `token_type` must match one of the following formats: camelCase, UPPER_CASE","line":56,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":56,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Type Property name `error_description` must match one of the following formats: camelCase, UPPER_CASE","line":60,"column":5,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":60,"endColumn":22},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Content-Type` must match one of the following formats: camelCase, UPPER_CASE","line":67,"column":9,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":67,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Accept` must match one of the following formats: camelCase, UPPER_CASE","line":68,"column":9,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":68,"endColumn":17},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":81,"column":14,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":81,"endColumn":26},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":81,"column":62,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":81,"endColumn":79,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1741,1759],"text":"(authResponse.data == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an error typed value.","line":89,"column":15,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":89,"endColumn":58},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":90,"column":14,"nodeType":"Identifier","messageId":"conditionErrorAny","endLine":90,"endColumn":25,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2005,2016],"text":"(Boolean(accessToken))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Authorization` must match one of the following formats: camelCase, UPPER_CASE","line":101,"column":17,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":101,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":109,"column":13,"nodeType":"Property","messageId":"anyAssignment","endLine":109,"endColumn":32},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `error` type typed value.","line":112,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":112,"endColumn":21},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":114,"column":42,"nodeType":"MemberExpression","messageId":"conditionErrorNullableObject","endLine":114,"endColumn":56,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2595,2609],"text":"(error.response != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":117,"column":17,"nodeType":"Property","messageId":"anyAssignment","endLine":117,"endColumn":109},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":117,"column":24,"nodeType":"ChainExpression","messageId":"conditionErrorAny","endLine":117,"endColumn":52,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[2704,2732],"text":"(Boolean((error.response.data?.message)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .message on an `any` value.","line":117,"column":45,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":122,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":122,"endColumn":37,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[2923,2936],"text":"(error.message.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[2923,2936],"text":"(error.message !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2923,2936],"text":"(Boolean(error.message))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":133,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":133,"endColumn":34},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":136,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":136,"endColumn":17,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3338,3342],"text":"(path != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3338,3342],"text":"(path ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3338,3342],"text":"(Boolean(path))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":137,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":137,"endColumn":16,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3369,3372],"text":"(sha != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3369,3372],"text":"(sha ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3369,3372],"text":"(Boolean(sha))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":141,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":141,"endColumn":37},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":149,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":149,"endColumn":35},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":165,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":165,"endColumn":38},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":169,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":169,"endColumn":35},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `device_code` must match one of the following formats: camelCase, UPPER_CASE","line":198,"column":11,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":198,"endColumn":22}],"suppressedMessages":[],"errorCount":38,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from 'axios';\n\nimport { type IAuthProps } from '../hooks/useAuth';\nimport ENDPOINTS from '../shared/endpoints.json';\n\nimport { Logger } from './Logger';\n\nexport interface APIResponse<T> {\n    status: number;\n    data?: T;\n    error?: string;\n}\n\nexport interface FileContentResponse {\n    content: string;\n    encoding?: string;\n    sha?: string;\n    size?: number;\n}\n\nexport interface TreeItemResponse {\n    path: string;\n    type: string;\n    sha?: string;\n    size?: number;\n}\n\nexport interface RepoResponse {\n    name: string;\n    description?: string;\n    private: boolean;\n    default_branch: string;\n}\n\nexport interface SaveRepoFileResponse {\n    commit: {\n        sha: string;\n        url: string;\n    };\n    content: {\n        sha: string;\n    };\n}\n\nexport interface DeviceCodeResponse {\n    device_code: string;\n    user_code: string;\n    verification_uri: string;\n    expires_in: number;\n    interval: number;\n}\n\nexport interface DevicePollResponse {\n    status: 'pending' | 'complete' | 'error';\n    access_token?: string;\n    token_type?: string;\n    scope?: string;\n    message?: string;\n    error?: string;\n    error_description?: string;\n}\n\n// Create axios instance with base configuration\nconst api = axios.create({\n    baseURL: ENDPOINTS.api.BaseUrl,\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    }\n});\n\nexport async function makeAuthenticatedRequest<T>(\n    auth: IAuthProps,\n    endpoint: string,\n    params?: Record<string, string>,\n    method: 'GET' | 'POST' = 'GET',\n    data?: unknown\n): Promise<APIResponse<T>> {\n    try {\n        const authResponse = await auth.validateAndRefreshToken();\n        if (!authResponse || authResponse.status !== 200 || !authResponse.data) {\n            return {\n                status: 401,\n                error: 'Authentication failed'\n            };\n        }\n\n        // Get access token from auth response\n        const accessToken = authResponse.data.AccessToken;\n        if (!accessToken) {\n            return {\n                status: 401,\n                error: 'Access token not found'\n            };\n        }\n\n        const response = await api({\n            method,\n            url: endpoint,\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            },\n            params,\n            data\n        });\n\n        return {\n            status: response.status,\n            data: response.data\n        };\n    } catch (error: unknown) {\n        Logger.error('API request failed:', error);\n\n        if (axios.isAxiosError(error) && error.response) {\n            return {\n                status: error.response.status,\n                error: error.response.data?.message || 'Request failed with status ' + error.response.status\n            };\n        } else if (error instanceof Error) {\n            return {\n                status: 500,\n                error: error.message || 'Request failed'\n            };\n        } else {\n            return {\n                status: 500,\n                error: 'An unknown error occurred'\n            };\n        }\n    }\n}\n\nexport async function getRepoTree(auth: IAuthProps, repo: string, path?: string, sha?: string) {\n    return makeAuthenticatedRequest<TreeItemResponse[]>(auth, ENDPOINTS.api.GetRepoTree, {\n        repo,\n        ...(path && { path }),\n        ...(sha && { sha })\n    });\n}\n\nexport async function getFileContent(auth: IAuthProps, repo: string, path: string) {\n    // Use the same getRepoTree endpoint - it handles both tree and file content\n    return makeAuthenticatedRequest<FileContentResponse>(auth, ENDPOINTS.api.GetRepoTree, {\n        repo,\n        path\n    });\n}\n\nexport async function saveRepoFile(\n    auth: IAuthProps,\n    repo: string,\n    path: string,\n    content: string,\n    message: string\n) {\n    return makeAuthenticatedRequest<SaveRepoFileResponse>(\n        auth,\n        ENDPOINTS.api.SaveRepoFile,\n        { repo, path, message },\n        'POST',\n        content\n    );\n}\n\nexport async function listRecentRepos(auth: IAuthProps) {\n    return makeAuthenticatedRequest<RepoResponse[]>(auth, ENDPOINTS.api.ListRecentRepos);\n}\n\nexport async function unlinkGitHub(auth: IAuthProps) {\n    return makeAuthenticatedRequest<{ message: string }>(\n        auth,\n        ENDPOINTS.api.UnlinkGitHub,\n        undefined,\n        'POST'\n    );\n}\n\nexport async function getGitHubDeviceCode(\n    auth: IAuthProps\n): Promise<APIResponse<DeviceCodeResponse>> {\n    return makeAuthenticatedRequest<DeviceCodeResponse>(\n        auth,\n        ENDPOINTS.api.GitHubDeviceCode,\n        undefined,\n        'POST'\n    );\n}\n\nexport async function pollGitHubDeviceAuth(\n    auth: IAuthProps,\n    deviceCode: string\n): Promise<APIResponse<DevicePollResponse>> {\n    return makeAuthenticatedRequest<DevicePollResponse>(\n        auth,\n        ENDPOINTS.api.GitHubDevicePoll,\n        undefined,\n        'POST',\n        { device_code: deviceCode }\n    );\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/commandUtils.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":8,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":10,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[336,350],"text":"storedHistory == null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[337,350],"text":"(storedHistory ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[336,350],"text":"!Boolean(storedHistory)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":13,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":13,"endColumn":52},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":15,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":15,"endColumn":73,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[488,552],"text":"Boolean(parsedHistory.every((item: unknown) => typeof item === 'string'))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":15,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .every on an `any` value.","line":15,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":16,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":16,"endColumn":28},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected any value in conditional. An explicit comparison or type cast is required.","line":19,"column":9,"nodeType":"CallExpression","messageId":"conditionErrorAny","endLine":19,"endColumn":111,"suggestions":[{"messageId":"conditionFixCastBoolean","fix":{"range":[659,761],"text":"Boolean(parsedHistory.every((item: unknown) => typeof item === 'object' && item !== null && 'command' in item))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":19,"column":9,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .every on an `any` value.","line":19,"column":23,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":28},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":20,"column":7,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":20,"endColumn":55},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of an `any` typed value.","line":20,"column":14,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .map on an `any` value.","line":20,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":31},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":29,"column":62,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":29,"endColumn":64},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":34,"column":7,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":34,"endColumn":10},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":35,"column":19,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":35,"endColumn":27},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":36,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorObject","endLine":36,"endColumn":36},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":58,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":58,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1865,1872],"text":"command != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1865,1872],"text":"command ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1865,1872],"text":"Boolean(command)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":86,"column":14,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":86,"endColumn":21,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3056,3063],"text":"(command != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3056,3063],"text":"(command ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3056,3063],"text":"(Boolean(command))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":87,"column":11,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":87,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected object value in conditional. The condition is always true.","line":88,"column":15,"nodeType":"Identifier","messageId":"conditionErrorObject","endLine":88,"endColumn":23}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { LogKeys } from \"../types/TerminalTypes\";\nimport { type ParsedCommand } from \"../types/Types\";\n\nexport const commandTextToHTML = (text: string): string => {\n  return text.replace(/\\n/g, '<br/>');\n};\n\nexport const loadCommandHistory = (): string[] => {\n  const storedHistory = localStorage.getItem(LogKeys.CommandHistory);\n  if (!storedHistory) return [];\n\n  try {\n    const parsedHistory = JSON.parse(storedHistory);\n    // If it's an array of strings, return it directly\n    if (parsedHistory.every((item: unknown) => typeof item === 'string')) {\n      return parsedHistory;\n    }\n    // If it's an array of ParsedCommand, convert to strings\n    if (parsedHistory.every((item: unknown) => typeof item === 'object' && item !== null && 'command' in item)) {\n      return parsedHistory.map(parsedCommandToString);\n    }\n    // If parsing fails or is invalid, return an empty array\n    return [];\n  } catch {\n    return [];\n  }\n}\n\nexport const saveCommandHistory = (commandHistory: string[]) => {\n  localStorage.setItem(LogKeys.CommandHistory, JSON.stringify(commandHistory));\n}\n\nexport function parsedCommandToString(cmd: ParsedCommand): string {\n  if(!cmd) return '';\n  const argsStr = cmd.args ? cmd.args.join(' ') : '';\n  const switchesStr = !cmd.switches ? '' : Object.entries(cmd.switches)\n    .map(([key, value]) => {\n      if (typeof value === 'boolean') {\n        return value ? `-${key}` : '';\n      }\n      return `-${key} ${value}`;\n    })\n    .filter(s => s)\n    .join(' ');\n\n  return [cmd.command, argsStr, switchesStr]\n    .filter(s => s)\n    .join(' ')\n    .trim();\n}\n\nexport const parseCommand = (input: string): ParsedCommand => {\n  const parts = input.split(/\\s+/); // Split by whitespace\n  const command = parts.shift(); // The first element is the command\n  const args = [];\n  const switches: Record<string, boolean | string> = {};\n\n  if (command) {\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i];\n      if (part.startsWith('--') || (part.startsWith('-') && part.length === 2)) {\n        const switchAssignmentIndex = part.indexOf('=');\n        if (switchAssignmentIndex > -1) {\n          // It's a switch with an explicit value\n          const switchName = part.substring(2, switchAssignmentIndex);\n          const switchValue = part.substring(switchAssignmentIndex + 1);\n          switches[switchName] = switchValue;\n        } else {\n          // It's a boolean switch or a switch with a value that's the next part\n          const switchName = part.substring(0, 2) === '--' ? part.substring(2) : part.substring(1);\n          // Look ahead to see if the next part is a value for this switch\n          if (i + 1 < parts.length && !parts[i + 1].startsWith('-')) {\n            switches[switchName] = parts[++i]; // Use the next part as the value and increment i\n          } else {\n            switches[switchName] = true; // No value provided, treat it as a boolean switch\n          }\n        }\n      } else {\n        // It's an argument\n        args.push(part);\n      }\n    }\n  }\n\n  return {\n    command: command || '',\n    args: args || [],\n    switches: switches || {}\n  } as const;\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/defaultUtils.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Import name `ENDPOINTS` must match one of the following formats: camelCase","line":3,"column":9,"nodeType":"Identifier","messageId":"doesNotMatchFormat","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":5,"column":58,"nodeType":"ArrowFunctionExpression","messageId":"missingReturnType","endLine":5,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-return","severity":2,"message":"Unsafe return of an `any` typed value.","line":7,"column":5,"nodeType":"ReturnStatement","messageId":"unsafeReturn","endLine":7,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import axios from \"axios\";\n\nimport  ENDPOINTS from \"src/shared/endpoints.json\";\n\nexport const saveDocument = async (documentData: string) => {\n    const response = await axios.post(`${ENDPOINTS.api.BaseUrl}/saveDocument`, documentData);\n    return response.data; // Handle the response accordingly\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/dom.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":4,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":4,"endColumn":18,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[183,192],"text":"className != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[183,192],"text":"className ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[183,192],"text":"Boolean(className)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\nexport function createElement<T extends HTMLElement>(tagName: keyof HTMLElementTagNameMap, className?: string): T {\n    const element = document.createElement(tagName) as T;\n    if (className) {\n        element.id = className;\n        element.classList.add(className);\n    }\n    return element;\n}\n\nexport function createHTMLElementFromHTML(htmlString: string): HTMLElement {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(htmlString, 'text/html');\n    return doc.body.firstChild as HTMLElement;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/fileIcons.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `package.json` must match one of the following formats: camelCase, UPPER_CASE","line":60,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":60,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Cargo.toml` must match one of the following formats: camelCase, UPPER_CASE","line":61,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Gemfile` must match one of the following formats: camelCase, UPPER_CASE","line":62,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":62,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `requirements.txt` must match one of the following formats: camelCase, UPPER_CASE","line":63,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":63,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Makefile` must match one of the following formats: camelCase, UPPER_CASE","line":66,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":66,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Dockerfile` must match one of the following formats: camelCase, UPPER_CASE","line":67,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":67,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `docker-compose.yml` must match one of the following formats: camelCase, UPPER_CASE","line":68,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":68,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `README.md` must match one of the following formats: camelCase, UPPER_CASE","line":75,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":75,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `CHANGELOG.md` must match one of the following formats: camelCase, UPPER_CASE","line":77,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":77,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `package.json` must match one of the following formats: camelCase, UPPER_CASE","line":78,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":78,"endColumn":19},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `package-lock.json` must match one of the following formats: camelCase, UPPER_CASE","line":79,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":79,"endColumn":24},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `yarn.lock` must match one of the following formats: camelCase, UPPER_CASE","line":80,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":80,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Cargo.toml` must match one of the following formats: camelCase, UPPER_CASE","line":81,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":81,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Gemfile` must match one of the following formats: camelCase, UPPER_CASE","line":82,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":82,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `requirements.txt` must match one of the following formats: camelCase, UPPER_CASE","line":83,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":83,"endColumn":23},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Dockerfile` must match one of the following formats: camelCase, UPPER_CASE","line":84,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":84,"endColumn":17},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `docker-compose.yml` must match one of the following formats: camelCase, UPPER_CASE","line":85,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":85,"endColumn":25},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Makefile` must match one of the following formats: camelCase, UPPER_CASE","line":86,"column":5,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":86,"endColumn":15},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":91,"column":22,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":91,"endColumn":43,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1692,1713],"text":"(path.split('/').pop() != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1692,1713],"text":"(path.split('/').pop() ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1692,1713],"text":"(Boolean(path.split('/').pop()))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":97,"column":17,"nodeType":"ChainExpression","messageId":"conditionErrorNullableString","endLine":97,"endColumn":57,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1845,1885],"text":"((filename.split('.').pop()?.toLowerCase()) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1845,1885],"text":"((filename.split('.').pop()?.toLowerCase()) ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1845,1885],"text":"(Boolean((filename.split('.').pop()?.toLowerCase())))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":98,"column":12,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":98,"endColumn":28,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1904,1920],"text":"(fileIconMap[ext] != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1904,1920],"text":"(fileIconMap[ext] ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1904,1920],"text":"(Boolean(fileIconMap[ext]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Map file extensions to appropriate icons\nconst fileIconMap: Record<string, string> = {\n    // Web\n    'html': '🌐',\n    'css': '🎨',\n    'js': '📜',\n    'jsx': '⚛️',\n    'ts': '📘',\n    'tsx': '⚛️',\n\n    // Programming\n    'py': '🐍',\n    'rb': '💎',\n    'java': '☕',\n    'cpp': '⚙️',\n    'c': '⚙️',\n    'go': '🐹',\n    'rs': '🦀',\n    'php': '🐘',\n\n    // Data\n    'json': '📋',\n    'yml': '📋',\n    'yaml': '📋',\n    'xml': '📋',\n    'csv': '📊',\n    'sql': '🗃️',\n\n    // Documents\n    'md': '📝',\n    'txt': '📄',\n    'pdf': '📕',\n    'doc': '📘',\n    'docx': '📘',\n\n    // Images\n    'png': '🖼️',\n    'jpg': '🖼️',\n    'jpeg': '🖼️',\n    'gif': '🖼️',\n    'svg': '🎨',\n\n    // Config\n    'env': '⚙️',\n    'config': '⚙️',\n    'toml': '⚙️',\n    'ini': '⚙️',\n\n    // Shell\n    'sh': '💻',\n    'bash': '💻',\n    'zsh': '💻',\n    'fish': '💻',\n\n    // Git\n    'gitignore': '🔒',\n    'gitmodules': '🔗',\n\n    // Package managers\n    'package.json': '📦',\n    'Cargo.toml': '📦',\n    'Gemfile': '📦',\n    'requirements.txt': '📦',\n\n    // Build\n    'Makefile': '🔨',\n    'Dockerfile': '🐋',\n    'docker-compose.yml': '🐋',\n};\n\n// Special filenames that should use specific icons\nconst specialFiles: Record<string, string> = {\n    'LICENSE': '📜',\n    'README': '📖',\n    'README.md': '📖',\n    'CHANGELOG': '📋',\n    'CHANGELOG.md': '📋',\n    'package.json': '📦',\n    'package-lock.json': '📦',\n    'yarn.lock': '📦',\n    'Cargo.toml': '📦',\n    'Gemfile': '📦',\n    'requirements.txt': '📦',\n    'Dockerfile': '🐋',\n    'docker-compose.yml': '🐋',\n    'Makefile': '🔨',\n};\n\nexport function getFileIcon(path: string): string {\n    // Check for special filenames first\n    const filename = path.split('/').pop() || '';\n    if (filename in specialFiles) {\n        return specialFiles[filename];\n    }\n\n    // Get file extension\n    const ext = filename.split('.').pop()?.toLowerCase() || '';\n    return fileIconMap[ext] || '📄';\n}\n\nexport function getFolderIcon(isExpanded: boolean): string {\n    return isExpanded ? '📂' : '📁';\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/navigationUtils.ts","messages":[{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":10,"column":7,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":10,"endColumn":13,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[385,391],"text":"pParam != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[385,391],"text":"pParam ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[385,391],"text":"Boolean(pParam)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":17,"column":38,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":17,"endColumn":47,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[668,677],"text":"(phraseKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[668,677],"text":"(phraseKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[668,677],"text":"(Boolean(phraseKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":17,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":18,"endColumn":52,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[702,737],"text":"(urlParams.searchParams.get('group') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[702,737],"text":"(urlParams.searchParams.get('group') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[702,737],"text":"(Boolean(urlParams.searchParams.get('group')))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":26,"column":36,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":26,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[966,975],"text":"(phraseKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[966,975],"text":"(phraseKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[966,975],"text":"(Boolean(phraseKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":27,"column":15,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":27,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[998,1033],"text":"(urlParams.searchParams.get('group') != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[998,1033],"text":"(urlParams.searchParams.get('group') ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[998,1033],"text":"(Boolean(urlParams.searchParams.get('group')))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":33,"column":31,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":33,"endColumn":45,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1201,1215],"text":"(activityString.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1201,1215],"text":"(activityString !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1201,1215],"text":"(Boolean(activityString))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":34,"column":10,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":34,"endColumn":71,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1247,1308],"text":"(ActivityType[normalizedActivity as keyof typeof ActivityType].length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1247,1308],"text":"(ActivityType[normalizedActivity as keyof typeof ActivityType] !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1247,1308],"text":"(Boolean(ActivityType[normalizedActivity as keyof typeof ActivityType]))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":38,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":38,"endColumn":25},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":39,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorString","endLine":39,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1485,1504],"text":"(options.activityKey.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1485,1504],"text":"(options.activityKey !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1485,1504],"text":"(Boolean(options.activityKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":40,"column":24,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":40,"endColumn":42,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1552,1570],"text":"(options.contentKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1552,1570],"text":"(options.contentKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1552,1570],"text":"(Boolean(options.contentKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":41,"column":23,"nodeType":"MemberExpression","messageId":"conditionErrorNullableString","endLine":41,"endColumn":39,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1640,1656],"text":"(options.groupKey != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1640,1656],"text":"(options.groupKey ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1640,1656],"text":"(Boolean(options.groupKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":43,"column":28,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":43,"endColumn":40,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1692,1704],"text":"(newPhraseKey.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1692,1704],"text":"(newPhraseKey !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1692,1704],"text":"(Boolean(newPhraseKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":44,"column":23,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":44,"endColumn":34,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1768,1779],"text":"(newGroupKey.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1768,1779],"text":"(newGroupKey !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1768,1779],"text":"(Boolean(newGroupKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":47,"column":35,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":47,"endColumn":51,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[1974,1990],"text":"(encodedPhraseKey.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[1974,1990],"text":"(encodedPhraseKey !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1974,1990],"text":"(Boolean(encodedPhraseKey))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/utils/navigationUtils.ts\nimport { type ParsedLocation, ActivityType } from 'src/types/Types';\n\n// Parse location from either pathname or ?p= parameter\nexport function parseLocation(location: string = window.location.toString()): ParsedLocation {\n  // First, check for ?p= parameter\n  const urlParams = new URL(location);\n  const pParam = urlParams.searchParams.get('p');\n\n  if (pParam) {\n    // Remove leading slash if present\n    const cleanPath = pParam.startsWith('/') ? pParam.slice(1) : pParam;\n    const [activityKey, phraseKey] = cleanPath.split('/');\n\n    return {\n      activityKey: parseActivityType(activityKey),\n      contentKey: decodeURIComponent(phraseKey || ''),\n      groupKey: urlParams.searchParams.get('group') || undefined\n    };\n  }\n\n  // Fallback to pathname parsing\n  const [, activityKey, phraseKey] = window.location.pathname.split('/');\n  return {\n    activityKey: parseActivityType(activityKey),\n    contentKey: decodeURIComponent(phraseKey || ''),\n    groupKey: urlParams.searchParams.get('group') || undefined\n  };\n}\n\n// Helper function to parse activity type\nexport function parseActivityType(activityString: string): ActivityType {\n  const normalizedActivity = (activityString || '').toUpperCase();\n  return ActivityType[normalizedActivity as keyof typeof ActivityType] || ActivityType.NORMAL;\n}\n\n// Global navigation function that can be used outside of React components\nexport function navigate(options: ParsedLocation) {\n  const newActivity = options.activityKey || ActivityType.NORMAL;\n  const newPhraseKey = options.contentKey ? options.contentKey.replace('\\r', '_r') : '';\n  const newGroupKey = options.groupKey || '';\n\n  const encodedPhraseKey = newPhraseKey ? encodeURIComponent(newPhraseKey) : '';\n  const queryString = newGroupKey ? `?group=${encodeURIComponent(newGroupKey)}` : '';\n\n  const activityPath = newActivity === ActivityType.NORMAL ? '' : ActivityType[newActivity].toLowerCase();\n  const path = `/${activityPath}${encodedPhraseKey ? `/${encodedPhraseKey}` : ''}${queryString}`;\n\n  // Use browser's history API directly\n  window.history.pushState(null, '', path);\n\n  // Dispatch a custom event to notify React router or other components about the navigation\n  window.dispatchEvent(new CustomEvent('locationchange', { detail: { path } }));\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/signalPersistence.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":2,"message":"Missing return type on function.","line":10,"column":8,"nodeType":"FunctionDeclaration","messageId":"missingReturnType","endLine":10,"endColumn":42},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":18,"column":9,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":18,"endColumn":20,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[447,458],"text":"storedValue != null"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[447,458],"text":"storedValue ?? \"\""},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[447,458],"text":"Boolean(storedValue)"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { type Signal } from \"@preact/signals-react\";\n\nexport interface PersistenceConfig<T> {\n  key: string;\n  signal: Signal<T>;\n  serialize?: (value: T) => string;\n  deserialize?: (value: string) => T;\n}\n\nexport function createPersistentSignal<T>({\n  key,\n  signal,\n  serialize = JSON.stringify,\n  deserialize = JSON.parse,\n}: PersistenceConfig<T>) {\n  const loadInitialState = () => {\n    const storedValue = localStorage.getItem(key);\n    if (storedValue) {\n      signal.value = deserialize(storedValue);\n    }\n  };\n\n  const persistToLocalStorage = (value: T) => {\n    queueMicrotask(() => {\n      localStorage.setItem(key, serialize(value));\n    });\n  };\n\n  // Load initial state\n  loadInitialState();\n\n  const updateSignal = (newValue: T | ((prev: T) => T)) => {\n    if (typeof newValue === 'function') {\n      signal.value = (newValue as (prev: T) => T)(signal.value);\n    } else {\n      signal.value = newValue;\n    }\n    persistToLocalStorage(signal.value);\n  };\n\n  return { signal, update: updateSignal };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/timeUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/src/utils/treeFormatter.ts","messages":[{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":10,"column":1,"nodeType":"ExportNamedDeclaration","endLine":79,"endColumn":2},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pathParts' is assigned a value but never used.","line":19,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":20},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected string value in conditional. An explicit empty string check is required.","line":28,"column":27,"nodeType":"Identifier","messageId":"conditionErrorString","endLine":28,"endColumn":38,"suggestions":[{"messageId":"conditionFixCompareStringLength","fix":{"range":[886,897],"text":"(currentPath.length > 0)"},"desc":"Change condition to check string's length (`value.length !== 0`)"},{"messageId":"conditionFixCompareEmptyString","fix":{"range":[886,897],"text":"(currentPath !== \"\")"},"desc":"Change condition to check for empty string (`value !== \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[886,897],"text":"(Boolean(currentPath))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":49,"column":26,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":49,"endColumn":46,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[1699,1719],"text":"(dir.split('/').pop() != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[1699,1719],"text":"(dir.split('/').pop() ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[1699,1719],"text":"(Boolean(dir.split('/').pop()))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":60,"column":30,"nodeType":"CallExpression","messageId":"conditionErrorNullableString","endLine":60,"endColumn":41,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[2132,2143],"text":"(parts.pop() != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[2132,2143],"text":"(parts.pop() ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[2132,2143],"text":"(Boolean(parts.pop()))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"import/exports-last","severity":2,"message":"Export statements should appear at the end of the file","line":82,"column":1,"nodeType":"ExportNamedDeclaration","endLine":129,"endColumn":2},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","line":91,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableString","endLine":91,"endColumn":14,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3078,3083],"text":"(line == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultEmptyString","fix":{"range":[3079,3083],"text":"(line ?? \"\")"},"desc":"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3078,3083],"text":"(!Boolean(line))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":91,"column":19,"nodeType":"CallExpression","messageId":"conditionErrorNullableObject","endLine":91,"endColumn":48,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3087,3117],"text":"(line.match(/[▼▶]?\\s*[📁📄]/u) == null)"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":97,"column":10,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":97,"endColumn":15,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3255,3261],"text":"match == null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":100,"column":20,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":100,"endColumn":50,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3323,3353],"text":"((line.match(/^\\s*/)?.[0].length) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3323,3353],"text":"((line.match(/^\\s*/)?.[0].length) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3323,3353],"text":"(Boolean((line.match(/^\\s*/)?.[0].length)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable object value in conditional. An explicit null check is required.","line":110,"column":13,"nodeType":"Identifier","messageId":"conditionErrorNullableObject","endLine":110,"endColumn":22,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3723,3732],"text":"prevMatch != null"},"desc":"Change condition to check for null/undefined (`value != null`)"}]},{"ruleId":"@typescript-eslint/strict-boolean-expressions","severity":2,"message":"Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.","line":111,"column":32,"nodeType":"ChainExpression","messageId":"conditionErrorNullableNumber","endLine":111,"endColumn":66,"suggestions":[{"messageId":"conditionFixCompareNullish","fix":{"range":[3767,3801],"text":"((prevLine.match(/^\\s*/)?.[0].length) != null)"},"desc":"Change condition to check for null/undefined (`value != null`)"},{"messageId":"conditionFixDefaultZero","fix":{"range":[3767,3801],"text":"((prevLine.match(/^\\s*/)?.[0].length) ?? 0)"},"desc":"Explicitly treat nullish value the same as 0 (`value ?? 0`)"},{"messageId":"conditionFixCastBoolean","fix":{"range":[3767,3801],"text":"(Boolean((prevLine.match(/^\\s*/)?.[0].length)))"},"desc":"Explicitly cast value to a boolean (`Boolean(value)`)"}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"interface TreeItem {\n    path: string;\n    type: string;\n}\n\ninterface TreeState {\n    expandedFolders: Set<string>;\n}\n\nexport function formatTreeContent(items: TreeItem[], treeState: TreeState): string {\n    const sortedItems = [...items].sort((a, b) => {\n        // Directories come first\n        if (a.type === 'tree' && b.type !== 'tree') return -1;\n        if (a.type !== 'tree' && b.type === 'tree') return 1;\n        return a.path.localeCompare(b.path);\n    });\n\n    const lines: string[] = ['Repository Files', ''];\n    const pathParts = new Map<string, number>();\n\n    // First pass: collect all directories\n    const directories = new Set<string>();\n    sortedItems.forEach(item => {\n        const parts = item.path.split('/');\n        parts.pop(); // Remove the last part (file/dir name)\n        let currentPath = '';\n        parts.forEach(part => {\n            currentPath = currentPath ? `${currentPath}/${part}` : part;\n            directories.add(currentPath);\n        });\n    });\n\n    // Convert directories to array and sort\n    const sortedDirs = Array.from(directories).sort();\n\n    // Helper to check if path should be visible based on parent expansion state\n    const isVisible = (path: string): boolean => {\n        if (!path.includes('/')) return true;\n        const parentPath = path.split('/').slice(0, -1).join('/');\n        return treeState.expandedFolders.has(parentPath) &&\n               (parentPath.includes('/') ? isVisible(parentPath) : true);\n    };\n\n    // Build tree structure\n    sortedDirs.forEach(dir => {\n        if (isVisible(dir)) {\n            const depth = dir.split('/').length;\n            const indent = '  '.repeat(depth - 1);\n            const name = dir.split('/').pop() || '';\n            const isExpanded = treeState.expandedFolders.has(dir);\n            const arrow = isExpanded ? '▼' : '▶';\n            lines.push(`${indent}${arrow} 📁 ${name}/`);\n        }\n    });\n\n    // Add files under their directories\n    sortedItems.forEach(item => {\n        if (item.type !== 'tree' && isVisible(item.path)) {\n            const parts = item.path.split('/');\n            const fileName = parts.pop() || '';\n            const depth = parts.length;\n            const indent = '  '.repeat(depth);\n            const prefix = parts.length > 0 ? '  ' : '';\n            const icon = getFileIcon(fileName);\n            lines.push(`${indent}${prefix}${icon} ${fileName}`);\n        }\n    });\n\n    // Add navigation help\n    lines.push('');\n    lines.push('Navigation:');\n    lines.push('j: move down');\n    lines.push('k: move up');\n    lines.push('Enter: open file or toggle folder');\n    lines.push('e: close tree view');\n    lines.push('');\n\n    return lines.join('\\n');\n}\n\n// Helper function to get the item at a specific line\nexport function getItemAtLine(\n    items: TreeItem[],\n    treeState: TreeState,\n    lineNumber: number\n): { path: string; type: string; isDirectory: boolean } | null {\n    const content = formatTreeContent(items, treeState);\n    const lines = content.split('\\n');\n    const line = lines[lineNumber - 1];\n\n    if (!line || !line.match(/[▼▶]?\\s*[📁📄]/u)) {\n        return null;\n    }\n\n    // Extract path from the line\n    const match = line.match(/[▼▶]?\\s*[^\\s]+\\s+(.+?)\\/?\\s*$/u);\n    if (!match) return null;\n\n    const name = match[1];\n    const indent = line.match(/^\\s*/)?.[0].length || 0;\n    const depth = Math.floor(indent / 2);\n\n    // Reconstruct full path based on previous directory lines\n    const pathParts: string[] = [];\n    let currentDepth = 0;\n\n    for (let i = lineNumber - 2; i >= 0 && currentDepth < depth; i--) {\n        const prevLine = lines[i];\n        const prevMatch = prevLine.match(/[▼▶]?\\s*[^\\s]+\\s+(.+?)\\/\\s*$/u);\n        if (prevMatch) {\n            const prevIndent = prevLine.match(/^\\s*/)?.[0].length || 0;\n            const prevDepth = Math.floor(prevIndent / 2);\n            if (prevDepth === currentDepth) {\n                pathParts.unshift(prevMatch[1]);\n                currentDepth++;\n            }\n        }\n    }\n\n    pathParts.push(name);\n    const fullPath = pathParts.join('/');\n\n    const isDirectory = line.includes('📁');\n    return {\n        path: fullPath,\n        type: isDirectory ? 'tree' : 'blob',\n        isDirectory\n    };\n}\n\n// Helper function to get file icon based on extension\nfunction getFileIcon(fileName: string): string {\n    const ext = fileName.split('.').pop()?.toLowerCase();\n    switch (ext) {\n        case 'js':\n        case 'jsx':\n            return '📜';\n        case 'ts':\n        case 'tsx':\n            return '📘';\n        case 'json':\n            return '📋';\n        case 'md':\n            return '📝';\n        case 'html':\n            return '🌐';\n        case 'css':\n        case 'scss':\n        case 'sass':\n            return '🎨';\n        case 'py':\n            return '🐍';\n        case 'rb':\n            return '💎';\n        case 'java':\n            return '☕';\n        case 'go':\n            return '🐹';\n        case 'rs':\n            return '🦀';\n        case 'php':\n            return '🐘';\n        case 'sh':\n        case 'bash':\n            return '💻';\n        case 'yml':\n        case 'yaml':\n            return '⚙️';\n        case 'svg':\n        case 'png':\n        case 'jpg':\n        case 'jpeg':\n        case 'gif':\n            return '🖼️';\n        default:\n            return '📄';\n    }\n}\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/vite.config.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@monaco-editor/react` must match one of the following formats: camelCase, UPPER_CASE","line":45,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":45,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `monaco-editor` must match one of the following formats: camelCase, UPPER_CASE","line":47,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":47,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `Cache-Control` must match one of the following formats: camelCase, UPPER_CASE","line":74,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":74,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/vitest-setup.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Parameter name `_options` must not have a leading underscore.","line":104,"column":50,"nodeType":"Identifier","messageId":"unexpectedUnderscore","endLine":104,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":104,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2770,2773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2770,2773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":129,"column":5,"nodeType":"Property","messageId":"anyAssignment","endLine":129,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":156,"column":30,"nodeType":"MemberExpression","messageId":"unexpected","endLine":156,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":157,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":157,"endColumn":14},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":166,"column":4,"nodeType":"MemberExpression","messageId":"unexpected","endLine":166,"endColumn":17}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom/vitest';\nimport { afterEach, vi } from 'vitest';\n\nimport { cleanup } from '@testing-library/react';\n\nimport type { Mock } from 'vitest';\n\n// Automatically cleanup after each test\nafterEach(() => {\n  cleanup();\n});\n\n// Create a type-safe mock of CanvasRenderingContext2D\nconst createMockContext = () => {\n  const context = {\n    canvas: document.createElement('canvas'),\n    getContextAttributes: vi.fn(() => ({\n      alpha: true,\n      desynchronized: false,\n      colorSpace: 'srgb',\n      willReadFrequently: false,\n    })),\n    // Properties\n    globalAlpha: 1,\n    globalCompositeOperation: 'source-over',\n    fillStyle: '#000',\n    strokeStyle: '#000',\n    filter: 'none',\n    imageSmoothingEnabled: true,\n    imageSmoothingQuality: 'low' as const,\n    lineCap: 'butt' as const,\n    lineDashOffset: 0,\n    lineJoin: 'miter' as const,\n    lineWidth: 1,\n    miterLimit: 10,\n    shadowBlur: 0,\n    shadowColor: 'rgba(0, 0, 0, 0)',\n    shadowOffsetX: 0,\n    shadowOffsetY: 0,\n    direction: 'ltr' as const,\n    font: '10px sans-serif',\n    textAlign: 'start' as const,\n    textBaseline: 'alphabetic' as const,\n\n    // Methods\n    arc: vi.fn(),\n    arcTo: vi.fn(),\n    beginPath: vi.fn(),\n    bezierCurveTo: vi.fn(),\n    clearRect: vi.fn(),\n    clip: vi.fn(),\n    closePath: vi.fn(),\n    createConicGradient: vi.fn(),\n    createImageData: vi.fn(() => new ImageData(1, 1)),\n    createLinearGradient: vi.fn(),\n    createPattern: vi.fn(),\n    createRadialGradient: vi.fn(),\n    drawImage: vi.fn(),\n    ellipse: vi.fn(),\n    fill: vi.fn(),\n    fillRect: vi.fn(),\n    fillText: vi.fn(),\n    getImageData: vi.fn(() => new ImageData(1, 1)),\n    getLineDash: vi.fn(() => []),\n    getTransform: vi.fn(() => new DOMMatrix()),\n    isPointInPath: vi.fn(() => false),\n    isPointInStroke: vi.fn(() => false),\n    lineTo: vi.fn(),\n    measureText: vi.fn(() => ({\n      width: 0,\n      actualBoundingBoxAscent: 0,\n      actualBoundingBoxDescent: 0,\n      actualBoundingBoxLeft: 0,\n      actualBoundingBoxRight: 0,\n      fontBoundingBoxAscent: 0,\n      fontBoundingBoxDescent: 0,\n    })),\n    moveTo: vi.fn(),\n    putImageData: vi.fn(),\n    quadraticCurveTo: vi.fn(),\n    rect: vi.fn(),\n    reset: vi.fn(),\n    resetTransform: vi.fn(),\n    restore: vi.fn(),\n    rotate: vi.fn(),\n    roundRect: vi.fn(),\n    save: vi.fn(),\n    scale: vi.fn(),\n    setLineDash: vi.fn(),\n    setTransform: vi.fn(),\n    stroke: vi.fn(),\n    strokeRect: vi.fn(),\n    strokeText: vi.fn(),\n    transform: vi.fn(),\n    translate: vi.fn(),\n    isContextLost: vi.fn(() => false),\n  };\n\n  return context as unknown as CanvasRenderingContext2D;\n};\n\n// Type-safe mock canvas\nconst mockCanvasContext = createMockContext();\nconst getContextMock = vi.fn((contextId: string, _options?: any) => {\n  if (contextId === '2d') {\n    return mockCanvasContext;\n  }\n  return null;\n}) as unknown as typeof HTMLCanvasElement.prototype.getContext;\n\n// Mock ResizeObserver\nclass ResizeObserverMock implements ResizeObserver {\n  constructor(private callback: ResizeObserverCallback) {}\n  observe = vi.fn();\n  unobserve = vi.fn();\n  disconnect = vi.fn();\n}\n\n// Setup global mocks\nglobal.ResizeObserver = ResizeObserverMock as unknown as typeof ResizeObserver;\nglobal.HTMLCanvasElement.prototype.getContext = getContextMock;\nglobal.HTMLCanvasElement.prototype.toDataURL = vi.fn(() => '');\n\n// Mock window properties commonly used in React components\nObject.defineProperty(window, 'matchMedia', {\n  writable: true,\n  value: vi.fn().mockImplementation(query => ({\n    matches: false,\n    media: query,\n    onchange: null,\n    addListener: vi.fn(),\n    removeListener: vi.fn(),\n    addEventListener: vi.fn(),\n    removeEventListener: vi.fn(),\n    dispatchEvent: vi.fn(),\n  })),\n});\n\n// Mock IntersectionObserver\nclass IntersectionObserverMock implements IntersectionObserver {\n  readonly root: Element | null = null;\n  readonly rootMargin: string = '0px';\n  readonly thresholds: ReadonlyArray<number> = [0];\n\n  constructor(private callback: IntersectionObserverCallback) {}\n\n  observe = vi.fn();\n  unobserve = vi.fn();\n  disconnect = vi.fn();\n  takeRecords = vi.fn(() => []);\n}\n\nglobal.IntersectionObserver = IntersectionObserverMock as unknown as typeof IntersectionObserver;\n\n// Suppress console errors during tests but keep them available for inspection\nconst originalConsoleError = console.error;\nconsole.error = vi.fn((...args) => {\n  if (process.env.NODE_ENV === 'test') {\n    return;\n  }\n  originalConsoleError(...args);\n});\n\n// Cleanup function to restore console.error\nafterEach(() => {\n  (console.error as Mock).mockClear();\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/vitest.config.ts","messages":[{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@` must match one of the following formats: camelCase, UPPER_CASE","line":42,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":42,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@components` must match one of the following formats: camelCase, UPPER_CASE","line":43,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":43,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@hooks` must match one of the following formats: camelCase, UPPER_CASE","line":44,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":44,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@utils` must match one of the following formats: camelCase, UPPER_CASE","line":45,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":45,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@contexts` must match one of the following formats: camelCase, UPPER_CASE","line":46,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":46,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@types` must match one of the following formats: camelCase, UPPER_CASE","line":47,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":47,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@assets` must match one of the following formats: camelCase, UPPER_CASE","line":48,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":48,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@commands` must match one of the following formats: camelCase, UPPER_CASE","line":49,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":49,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@game` must match one of the following formats: camelCase, UPPER_CASE","line":50,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":50,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@test-utils` must match one of the following formats: camelCase, UPPER_CASE","line":51,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":51,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@` must match one of the following formats: camelCase, UPPER_CASE","line":56,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":56,"endColumn":10},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@components` must match one of the following formats: camelCase, UPPER_CASE","line":57,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":57,"endColumn":20},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@hooks` must match one of the following formats: camelCase, UPPER_CASE","line":58,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":58,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@utils` must match one of the following formats: camelCase, UPPER_CASE","line":59,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":59,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@contexts` must match one of the following formats: camelCase, UPPER_CASE","line":60,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":60,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@types` must match one of the following formats: camelCase, UPPER_CASE","line":61,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":61,"endColumn":15},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@assets` must match one of the following formats: camelCase, UPPER_CASE","line":62,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":62,"endColumn":16},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@commands` must match one of the following formats: camelCase, UPPER_CASE","line":63,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":63,"endColumn":18},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@game` must match one of the following formats: camelCase, UPPER_CASE","line":64,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":64,"endColumn":14},{"ruleId":"@typescript-eslint/naming-convention","severity":2,"message":"Object Literal Property name `@test-utils` must match one of the following formats: camelCase, UPPER_CASE","line":65,"column":7,"nodeType":"Literal","messageId":"doesNotMatchFormat","endLine":65,"endColumn":20}],"suppressedMessages":[],"errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { resolve } from 'path';\n\nimport react from '@vitejs/plugin-react';\nimport tsconfigPaths from 'vite-tsconfig-paths';\nimport { defineConfig } from 'vitest/config';\n\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tsconfigPaths({\n      projects: ['./tsconfig.test.json']\n    })\n  ],\n  test: {\n    globals: true,\n    environment: 'jsdom',\n    setupFiles: ['./vitest-setup.ts', './setupTests.ts'],\n    include: ['src/**/*.{test,spec}.{ts,tsx}'],\n    exclude: [\n      '**/node_modules/**',\n      '**/dist/**',\n      '**/e2e/**',\n      '**/playwright/**',\n      'tests-examples/**'\n    ],\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'src/test-utils/',\n        '**/*.d.ts',\n        '**/*.test.{ts,tsx}',\n        '**/*.spec.{ts,tsx}',\n        '**/types/',\n        'tests/',\n        'e2e/'\n      ]\n    },\n    alias: {\n      '@': resolve(__dirname, './src'),\n      '@components': resolve(__dirname, './src/components'),\n      '@hooks': resolve(__dirname, './src/hooks'),\n      '@utils': resolve(__dirname, './src/utils'),\n      '@contexts': resolve(__dirname, './src/contexts'),\n      '@types': resolve(__dirname, './src/types'),\n      '@assets': resolve(__dirname, './src/assets'),\n      '@commands': resolve(__dirname, './src/commands'),\n      '@game': resolve(__dirname, './src/game'),\n      '@test-utils': resolve(__dirname, './src/test-utils')\n    }\n  },\n  resolve: {\n    alias: {\n      '@': resolve(__dirname, './src'),\n      '@components': resolve(__dirname, './src/components'),\n      '@hooks': resolve(__dirname, './src/hooks'),\n      '@utils': resolve(__dirname, './src/utils'),\n      '@contexts': resolve(__dirname, './src/contexts'),\n      '@types': resolve(__dirname, './src/types'),\n      '@assets': resolve(__dirname, './src/assets'),\n      '@commands': resolve(__dirname, './src/commands'),\n      '@game': resolve(__dirname, './src/game'),\n      '@test-utils': resolve(__dirname, './src/test-utils')\n    }\n  }\n});\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/home/mstouffer/repos/handterm-proj/handterm/webpack.lambda.config.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: ESLint was configured to run on `<tsconfigRootDir>/webpack.lambda.config.js` using `parserOptions.project`: \n- <tsconfigRootDir>/tsconfig.json\n- <tsconfigRootDir>/tsconfig.test.json\n- <tsconfigRootDir>/tsconfig.node.json\nHowever, none of those TSConfigs include this file. Either:\n- Change ESLint's list of included files to not include this file\n- Change one of those TSConfigs to include this file\n- Create a new TSConfig that includes this file and include it in your parserOptions.project\nSee the typescript-eslint docs for more info: https://typescript-eslint.io/troubleshooting/typed-linting#i-get-errors-telling-me-eslint-was-configured-to-run--however-that-tsconfig-does-not--none-of-those-tsconfigs-include-this-file","nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const path = require('path');\n\nmodule.exports = {\n    target: 'node18',\n    mode: 'production',\n    entry: {\n        'oauth_callback': './dist/lambda/authentication/oauth_callback.js',\n        'listRecentRepos': './dist/lambda/authentication/listRecentRepos.js',\n        'githubAuthDevice': './dist/lambda/authentication/githubAuthDevice.js',\n        'githubDevicePoll': './dist/lambda/authentication/githubDevicePoll.js'\n    },\n    output: {\n        path: path.resolve(__dirname, 'dist/lambda/authentication'),\n        filename: '[name].js',  // Changed from [name].bundle.js to [name].js\n        libraryTarget: 'commonjs2'\n    },\n    resolve: {\n        extensions: ['.js', '.mjs', '.json'],\n        fullySpecified: false\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.m?js$/,\n                exclude: /node_modules/,\n                use: {\n                    loader: 'babel-loader',\n                    options: {\n                        presets: [\n                            ['@babel/preset-env', {\n                                targets: {\n                                    node: '18'\n                                }\n                            }]\n                        ]\n                    }\n                }\n            }\n        ]\n    },\n    externals: [\n        '@aws-sdk/client-cognito-identity-provider',\n        '@octokit/rest',\n        '@octokit/auth-oauth-app'\n    ],\n    optimization: {\n        minimize: true\n    }\n};\n","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
